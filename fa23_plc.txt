// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\brent\Desktop\factory\ui_cda_mini_factory_fa23\fa23_plc.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
836eff216d83880d9e374c98f7e446566f1d473bef6c33c2be68549d2e2931bca6ac6f76b0d81352
f5675e2a3646dc3a96de1045c6176718ee92e4f1376e7dc302811ab01be98a2e77d91b591d19d2b9
72e7640d3113a1888837a3e862d93e7d5b684cb20bc336f10d43ebac2be80e0bcced7f4c4156b06b
55b0f8fe35790dfd83cf118e4c00a1a81fef070e2c38bf467b2cc5d7abc2ea46378786888534808f
e87606415a9f41a70c766aa828a3fcebb94c8fe21d7f8b4d4a525d78002b431e857620eeef2d6e83
571edf81f0e1d040c032a1401dc4e8a7f37bb92225866913e7f234e14dfeae8112b1dda0cd7ec27a
7d855a6a5fde34a11acb465cfff343442268c04896621a4a2e9f96e6c1ea9439f0555ba7d7751e34
be8a611d193372042719c533c6c9e9613e38af2fab21122cfca5a741f6b4e6b25c239d9f077d53d3
0c41ba2189b745e267d75667bb78a91e62c6abffb63fd0691c4a2710b03acca5e71b59e0050311c5
776b0f09f204e80bb900b7ee55d99927927465a3e68bd47cfac183b8c16f98b6b56148a53eb761f8
e0daad1ab7111f9d40b85bdaaf24d9436265466cb81369ccc53ba1e7360198825287eceb999e5de8
bb5485961393a5666fa6611d177aa2557e8ab6535146e4d6a207927a9ccf071a38254c6c2acce10b
5003b1b76f1523542afdcaeb3f0a0f21d43937e43580d26aa9b0db14cf622af4aeb6f14115cb7f85
04cc2dc8a49a600a2a83d2723b7ff15a54886f52c9dd15890487709d711df7c9dedef3e160dd9448
4fc86ac48a15e145a763a8b6e48a5aeffd7c2924f201920c56213c27e5f8100ec4cde8b2fd4c6ad1
591924052666b835a80131544c1aca26d50478da79e3bd5bc1767959447198e934da3ef0573fd2e5
9b7fc5e1b6cd31e8442a691d1fd969cc639f3299f1a47fd85a1410de2ee1c86dfaed12a054c9ad64
780c4463c3df32ae5507b1ebe192b39a4d721caa8ed8f2b975dec0ce19935730539e4fe40dda8b29
271df8044cc181a6663ce21dae94fefbba9118d9c06b05e01e83a66943836cb4d9a86338ae71e900
d305752358682dc08823df95f830151fe8c1320b84a00151b48d041d8067d0b4e27c56df0d757842
7ad2ba1519be9197ec1b355c5ab34fa0da37f00dfdf3e526ed689b692c8653c9c43383662ebc08ba
afd4e6a392a9ac3de3fb016bdc70632e85d2f99ceaaf75853e3fc83c165567efab8ab26bed3804ef
215140a08e615fb094d5c281f415f6d9740438bfe9fb7f63ccf025189b5bcb890c5489cccc62dd8d
9a7f997badd4a4418e05f51eed8a09447b721e21a65144a156367210935b832f3a84327904b15cb2
d837eb3e86043335bc10fdbe9813ebf469f02cc2cd52e6e7b4b455daab90fdb9e479f02fb90dfe06
c6a4c2d7e68128c878634113fe33ceb62b879fa9549686087b83fde48cbecf79b87f581a0dbf5ae0
78189f244185bbf18a9e447591ea50b869fc0c0e13ea033b9876d9f5025e754a05527e475fff4745
ac18945a00b07d08973132b222ec1e8882671536a305d4bbad26eb655b35de07f233263435769ecf
06bb72b3ce63e7f5089d7244afbcca568b0d3022ed7122a9f373cd3e888bd4bd1b635cb1e54289a6
2bc5d06ea7597342ae08a3bcf525a492a702e84415219065a8798e2d596da96b59e77d98da178b1f
ddfa9ed2c94a1b375834fa65c0d9bf4eb6f1709c1b223c3b085a360c814fd53b88bf057ff6e04b29
2f215b277ed8133d07fb90d6e2892fa8251201c3a3fb8517ab9cf5a9e8fcc475c3660c5d7014bb83
6340576d528e89689647b06a31d41f17ff9ce176c16cb39039c2084ad45fb438adcd489e807ec146
b41cf131e62ddaeda8bc1946fd58221b92b5f320be07c69f41bb348a58e3335614219c475e795374
3251ccafeb761b0b75974945e1c0e956052502680b496771bb8155b2dd2980d09ea53b69f3fa5647
6d9d3ee2d359b460e7a2833ec1d62d5be6b6104f8d0e7c8ed76731c45dc45d11bc11ceedf014de04
a52befaef4dd3eec0f078332b9cdbbe6671f76aa7a65c09fc08282928e28a4ce55095b6d5b4ef2f9
aaf9e212e43ce54f3568353274b07b5248dcdf8f6c40f93a65fe82e49be4ff466ff07facda68edde
a9bb8f8c7c9ecbc2cd21686d93b42e6876a4c85d0d9bd895186ae052e0a262423ccb641b47021cce
64dfbddfa8cc998309f07d2d8bd4f68aad1812425c0a227f664b8b713cbe94e8ad625b027be55c5d
7b6b6ed06fa12d87bed8b19d21b26ac2e9fa7405621a44197db597d2ea437fd5f2adc0257d55bc05
1d2a28e219d2ad71ac933f8b1e9e86ae04a59b16d90b4a478bb49aeec07bef041cb3e44cb7c0c8e1
ffaab43ec46e8d253c0d61b3fd3e919fdb2a5bd5357804d87a400480aab87147a2d6ee4193c538dc
77e51ce2ecb14125f7116964c0c4990c4443f142437464a255be1ca3b641f62e174d20256943b23a
de627779103cd82bc2abf5e9e413ec0a87d79032551a676412c21b7014b5d9a9152d095d758a3d32
effaafb8b2571555e56cd4795afd7fd9e69cfa77a2609a3f1d6e8c3adebbae421183e98f99e97bfa
a91ab87be5f6325394d597629edd14ee6b89f87ac4263f1196fdef7721089d66a444e938b808988a
38c44785379afc453ee4b8fe51d762c0670642b6d9066397d43cad477d60ee86cda529ac9a824955
8d3b3dc6684b063987459e015749f61b5732cbc21104ecb799ee26ade913055991df2916e346e447
ba28067551c56ddd1d58d3eb650df29230aa59126a4ebf243d206783012f89fe9cef0e0318204007
f54eb4a8335e1c3f85eab42c4e19e1208256899e333436f3f049f2b832736e7690d0af2229c3a641
9f7111cc31ed7dd9c0d36aedfe91ccdf043f16e11d1c7f0d6d630f15d5e3474b732df0e0d1cd1390
dc422de7b9efd41ba746fce7f0aa4d714e3d3b53c2e6574cd36461ca9caa60487d75d2b57ba58088
4c35331e68a1f545ffa46d9683015a6888373dc2070b0e5e4dab047b62e5c629ebc507cdf71ac7c0
4b9d60f8452d88a51fc956de90a445db0eceabc3f1c02be858209df9c6f87d8ca91f886cd27ebab0
060d7e7b8e997bf9f4c28440a87ee730bc8f6d1616f301ad06da43cb028cecdcdc874d302ed7b6d9
9e080abae5de500d325a0d2ed6db88d2908c42ef43652dcb063132f7f68cf1fa931b469a84a4bf4f
a9bd7997f0ff77d03cf75ff01738e14dc987fb7ba453a6b1687a53e9a5379241ec8fa862fab6cdc8
815d4dcb3ce7c0af6dccbc0122bbe887f37ab9892973c0a0e077470750d79f34ad414b5df5152a44
6a064b8fe9d1f5af8eac716df0ad1d1fbd232ffc26ea5a07b8176bb54be8f389ece40abb892035c6
703f1f972f8ead12d896af85efa294a3479bb9fcc7aefbe19f7d39bd759c202bd5805542e423940b
cdbf304ac87b2f1f18f153cb707917385ac7b59f8daf0ab9b9fb4456361b60e229abea18dafc2808
ff0d557052297cb79c91f34c278992e2e454a7e679f9a1e17833b0a22d828a9c867bc3abaa07a1de
e04cd19ec0febf4052162d84d5cf359091cc65ae680c2cf6f6e99e224a0ba63a3faf03885e31a70d
44e41f97a38f276ab565ce4130461d591ed4f801182e50eb9ad5361d1072b209071d6d6bdb2b8ad8
0c8f138ead4fb656d2419423dd03f1b93e471ef7646b51f6ff11a56ac15daeecbc68eb77b447b7a5
2a85cddbadcb19ea309a011c88493a7f496483a652b800871474e4684f1fca10e683d6a16022a0a0
9076694461f3b2ed78e062e7cfea0256b3beb01933546abd95889206c7347e7c7d9abf4bd9207c42
f265aea4cd74bf791d7da7c798c52374e722555d74401b97c361795d19fbc0e4bda75df8e9348810
bbac13c969376a8cdb448166b72a1d0d931067d577055b7ed4d136a1616451ff928e0cba20abaa88
353ba3e68cd793d4a02c346df70371241b45c08eafd6e5d03e534fcd1b815a065bbdaa3da29a6f2b
7aaf53d65408ed2d5956e0365651b5e6ede622c5c88af145bf0c9d98e6687e9ccbc8c68b54794ec5
071dc732a1ae949b50db5943de05f7d64ccc94d4551ec276236ac8de3cf598c670d34f70e04cc7e9
c7a203f684d1e6f821331346696c72cb08dcbca2025d3e583728de2ef28946897a94a4635c3bb38f
a597f0868b977282ef75c06df758d0d453899abe450d548b053acf5bfe3bf57942dc54da0b141421
b0a8e238dda746811e8864efa8dad800823d6999972492a3ba9b776e8eef99fb66eb45634e705e84
876949c53083756b18cf113bcf42f06371444d6c462c71c7952060f9b589d7efa18472e764a11d0e
6d5460fb77f37aa64383f5ba84018c583a84b5d72550dac41c4b1ae324130ba13d80129e157b5530
a6f9e2192b350c584dd557d0f80c4cbe6249ffac5790a77fca629caac8c03e9b92cf416a430cb7af
e2bb9920ee7e672c1051a7a3e7e5c0843b29fd446b5c123b427d48a00dce1b3b251f0d22053b9c36
2df08ea1859796854c240ac68e1fa05339195ddc9b3d386748c7e9525b7167f3fd5995ce559a79ff
520e7f493acbecb021d0b4c9c05ad501da94177893f99ea5493ee26cc2e0d0099c642071476fd153
2bd4a285588e308eb470278c8058081b2d245bf2c921bfd32c2ccda80584391e95a73849f4998244
e759f49b75740832cc021b759c2e2be0a9da9af0ff6b2e5b3841c3bca5de76b037516880cbe84f85
206966f257f042caf61364c65671021f0feb3fe6e3b1707221d14afdd5cc9385b3100df9ae7d5caa
3cf06cef74bb20801942c69ca585513e6c0056e322dc22f4680b0b8830c5d4539c8f8663f50adb5b
4637245b7f3e408060a37422d0bc340107e1c82bbbf1117cf5e274ed8e6b0f2391a0208e6c1c6379
c1b98a6d71c12888a4fc6dcd121ed709cf2e3430b2f520274d74547f6a9e9814f9d7b6a4b8b2c5e7
9987ac7d7dde7a2aa87ac63709e70113b90289293d982f057cecc68e3275f72599a100c944e187b1
52a56a60419c8bc8a66584a1845b0c0bb0f3228fb693297716ca285c395e1ce46950cad697bbae24
dd30a32adec68e07f54cbee48da5657a1849bf5e5f3b51b146c2281bcfbd4ed88d25cf7b5bd9416e
4ae4a6b28a6e52b0f96939e083096fa80ff32eea18a2ed764b0bc1c358e3b872020bf29a40a0a18d
b041fa09eeffbbb8f0ea69d1b276b9d234ea441d3107ca28c36e6d9e7f088aae5becd011f5360f48
611083aecb837042540ce5d5552433d2ffb0c3c15dc2de734922224666218b72b64a051e3a5aaf2a
2e90d422df8a2c24282a9e170f67674e3829fb5534e09b0396df8b925109990a07f97b991db658fb
c2e2a0fcdaca29b2b1bdae386d05858a1e1211d7d0970cfd5f16bcaa9d82efcc96b2a77e5d50ceca
d85b02591e99131695e0d4d4980645d6685691157cd10c919d2cd01ea0d337d2ad541bb4344befea
018770b0d6fd8272d9c031f4054565c076573cb0480da4fe0a8ecd1ee1ee99c00934654ad2dcbb80
519fef656547a20931ef60020571593e4729c947d53e2d274be60a48b8d096ae4a39dd6315257736
c77addb97ff8dd580ea50b6935f6bbaa685f1dd4bbd6afa4372cda1f96276bb9462ae719c525c2b7
e36eaca324a42a65e56ed4312dd16a7b1435abdec5007838afb55885eccf75ca62ce77ad28cbfe80
02a23bd987745f1a6750b97d661f329bde6396d136c0a0fc8da3d6af6a09cad565136d975a7008a2
69bd6622af1094ad936217f0bf3075cad605f12fd316ed73f074b502672904e38c253a792c225ddf
b8a909d117273814965d064d04802a21f794c79b64b237c960a9939b7c01a6c8c8e1d48a01ef151a
b05c1f105f5fa1809a15deeb8d4c8a40fc77784b277b99b19a5dd1caea73cd6f163acb6e1c1b5819
fa6b42c6979347d1627bc738ba57870c9820896b36c7a63d66aa28e19094caa28daee89133047dd6
3f4ddde279ed59d1cec476cb3d50704562f75f3bf9d9f04ab341e2893311841975a4e4117dade987
c5d494689bc277ea4b7f6e68a5642c3b21c9d199a23326c802c0b9ad9bee4b4502c0c6dad9920391
9b27a414d211a9bafda6f28a12fc42f825646ada46319f3515bba284660e120356151edd0a7e443d
c88fd6e62858edd0bd63778d6033f134f3d6fdecdf780ae7b4665227d9c4d06efc6b8483b1012b02
1c5f0df16b8ffd1563f12a802c8fb1a88bdcb48590e20e3cc44bf0dcf7dd49130654d9fdc36461a7
39d34ae540787d58e8ce500538b83fff8dbeedf7d50dda7d9bc827eb159611d8a9fc4c075b792c40
180ca4c8b5f9dbaa584096417bafc45cf5d7a7e53e440f05918be0cf7abace7a1a0c1ef9aab8ba0d
cda352fef1f514c7dbc80c4da6d7142403ec3cd3e44ad61a18dcaf82a8fa49342140cbb5699d1121
26fa3ff5a95a35980c96d9e3681753b3ffe714c3f43d524c2b768602eb0b9242c8872479dada14f1
8a60b12e45a77721488090d6ec4b36c2cb204941b870e7490ccc31411bcdfbfe6ce7b1887f85925d
18832924b21c90dcd68879140fd646034afa73bc3abf615294e3695d24b884103114a2a3e19f817f
eb5ccd299ba94615c81d8771c803ad5ab03269e358c6cbc10f9b9eb35cc2f6ae08de987cd3e7562b
1261b9ad1579f2d1ee4e08c0518750a95812c9cf2624257c5500070dd35003bccd30f2e67aeba659
0ab54087468e339ebe5702ee010bf296c4ed245a830520dd5721b0bb0decd0a43b2b43840eb050c9
e638a15451b33cecf7ec610c1fb39105c015c28fa8bb067a39d37e70b34a32d743096400bf2722aa
bc2a3e58221165c1d9705bc1c89ded1678a07c8fe3ece728526f574684f5e6e24581549d487202e7
5d57201265f06ba81b3cc3c608c1497fac13c2e28f655f4ca05034ae4cb5994784a282eb31f707db
8c9d1fec46993f978bff1a0eb6d83209a4802757258cd2c46fe8f0dbc9b5f6d9a60c377711b38dec
863c400f0dcecf0a860d206692dad704b5e370f28c0f048aac0a3e9a7d0b535869667da4560fc2fd
2e59b20e185273d2f60f4833786d3b760091f2bf12cfc16b00da0a693e9b1979c383e3fc09f2f661
c9738f77b75a744876f6e7ce8f3d19a8756da1e532ce0dbd38b61d7b565b998d3513a5c683e4ca4b
ed632196e9c1db39f7711417a1aa6a2e6cf1e6d19dbc2749c0e5cbcba6ab65781003b5b62107b192
1473657ad497d81095a4a5a70c9c73f2a2a81bbdd37c18e01c9c7636cb34f9e1e918fbe1bdd7d490
b17857fb71184dd9125d5a3ccdc739fec2a44e849600d321f467147ce4d458e1b1fe716d8989fb70
9e979f00d573a2cb9895c1ddf3af3d378c0bb3be94fa39723784082e9c4de95e4f345a69e65dce8f
d1c27196b644f6b7acbe9d321c190a926e313850a2771818614cb8da933799afae84a604d00f2ab7
8d95081cecea03262b77e2f0e44a0604cefa684a2cd5cf762c6f1aed571dd17e7de2f784bca7ecdd
43ac87ce3dc48a6392adbcc399af3f8e068a2a319f3e90fbe22df464b037e1e7d255dc2b8c8a3b0c
3d223667ef8fc1e23f32959de041546e7b7895b8bd269c37018ef12ac5b71652ee9eeebf690e024c
f975086f0ca964aed696cc7a6f8caf6cd1c8ade82a8013c98f0dca4ac529964661de4b6888b9c442
86f7b952580718a7f154018ffea1d26951701dc06512ac7eefe07f507059e407efa8f24c4156b985
9b019251fe1c59a654389d55fa4393301643e6001cf9e7d64ff4156ea2b3dc9de5352fbb95a64580
a067ca9d7bde45f8ad866557dd388b8d693eeb0d3b6992a3a5c0c6718c375c428451d18805824616
5654c1c7cf2e48081ec7f1fab35fe07e943a71ce6a5c80ef9891527faaf5ba239be9fa7282a2e722
a4c22131a698c220352523a5bff6ecc8e83f9984b141981c5b38412e2eaf78642b5ab5a7712a9fc9
7e015e8f0413a6679e7ffcc2e045b6bc6a6de177b3527fde9b905aab828c7abe67c324c5e3ec67f1
c57ac02b242fa57a3b116511d84dda37b28ffb9ce82bc8a56ee93ebbed4a83710884c22ff22e2e0a
2dfcccd41ad3ba10c487c8f687f22bc651ec1f20d797b6266cc7983d207f26809e2c8ee9946f1f1a
211044e4a7b0a8647c484ccc6045223d2b37f4dbd72578dc57d19bdc0ab39492005ef735b15074d2
11f4a5404ab410ad27924310c5413d152449fa758160d1e86678cd32f030762a87561b34f15b0ac8
729e0868a1a9c58bc0a9ebc695ba866f079897f08ceab31eb4adf415fa9eb7c5d15ce226593d0239
71b5b3e62a547f734e986736642bd769b343054bb701dd145645131b4c8701a6e9123613201559d0
e7cddffa98042ec9fcd1cc2522397789728e891e12240430f0e8ed6284b11d23d2f84834a6373b7e
b7348853daed1267b8429ef8dc105518467da47f89362a73b9ba870b18cdf981d146e00bae2c6282
8c674f118f205f4c8d5da3095d7d49bad47317c2952138bba5479b1c444ba674edde5252f52dd205
2d6dc54543533e74c4c8269b7c17e63c2a7348d6f859ac33eb50d6209416da83dadb40330714aeef
2ee76f2a806746246f066ad9eeecd28245d852225535188408ad82a6c05125483348f85e112d5990
08880c266d2aa8e2668791ab3ec35d91c3e836589f778bb865e12947560b8937b7eaf7fece56eb54
d38bc5a67183a7c100eb43790df447ca4c8d14c7def5167b92a12a3016ec93f94dc79a9481f5140f
7b77a37ef8ad2e5eaf5fe8cba207131a0f688f7b333a3c9610ee966bfc517843907789093466d034
7bf40a8bbb8d909b8af24b22bbf977479720c64d89e5c5a5af81634e8d8da296a041cc4279f19deb
55b6d9f51552ff5f699d57eb3bfc23748e69d71cb4a3417f23b3b273711e7d9b693bfab6675cdd9b
1df5e92daa26fa9732c3dba519d4cabfa593efd82ea7636c14fb842401a67bc5dbb38eef7a86a821
797ef414c89ed37e38834071dcb2eadc87f634e7f27eb4dee27c2ad32160e627c656b68bb502f714
e0ec04121b95404eaa7a8dfbef5932affee207dbfbff7d2b4af3a2145f671cf944c00d90d24db6f7
adf7a45f4bd2daf8302d641da42cd2c5837cdc204fcb75359f2052e26d9b5bb5b25395b583ad7df3
b16000b703ced0eff1d592bf727671092cca822974aa9569543d90b60e4d5b46c98c5b9c8ae35f3e
61dba00df81a470cb1dc222e9f81f305c56a9fccb459bbe373c350fc1591fc3c5e22bc0767358a5b
f4ed2942c699a45d9be0b70206255645735c5977563b88e7112629ad31d54c420afd8bc39c391cdb
1dbee18c68f1157118eba70a0ffdd55e4686391e0f089e3d5d952b7003ceb0a825937cf04368cf2b
70e0bc79ab096846a38e774890c245a8e9ea54e907c71105e3b85b7f1b7e32db8a3370a822ebf0f1
429725f8c23637f9d62b652fddc2bd669fa126e8d76c7ff010bcca36833236dd26134a7cf380f42b
10c49a6f8efe7c87c446d98f03da690657a31a2a0d7d32cd83afa6fd62df30cbcc86f01909c196ef
3e6ebe64c1812f214a61bec11f70d86e91b49ea497c05d835688053c7aa4a72484aba1f2eca93445
89088fc817335da502066ab4014c7233291257ec7e63811445b523b29b59614f9cdba2b94e708002
f4b3b6ca0be77b9a19927362757cb605f06ef583db49320727fbf0a54b35a1f610e8c789f39d7ae4
e723d36b050bb66a96ab49bc701820313337385c699b9b16e2e662d779f90df6373f93c2b2019394
74d0e882d602c194f84d82b9b00a043dd6b8212c171fd351a8b3aa086a2508d63e1b94852ae8654b
0cf32e487a50f9fc4d31d6594739d614b0187cad1bd52b27993ea132ddfd6e809c946ceb83a314c7
d6962a8844f3107b2889bf7839df1a546074f275cf1a959740f64de9b1fcd99d37be2af5ad736026
cf3024062148e8e974cad5bc390c033665c1178b8af3d7d6b9f0a4254f610bdb0bf1d6f6d5a852f8
86f39bc451e62134dc09dd8f79fc51fadf036aa1f581436ac8c4a0844c57673e801cfa0c5bbf4b0e
0f22258ce0f56747892cd5f0e409bd28cf9b2d8f13a8a19c6eb34e8bfe49ffcbc238be7f76aee839
54ebc9963cadcc8e7cde9ddf1c556437555ebea5136732af3643c25036d7b9f8ef717c6753c05199
dfbcc4f7fb1ff64865393db07ede74e7b8b44c24e645ee05b5f63c4e6919a6d0aaab73d2abeacfdc
390d6d6bd0c808ff6e76f0bb209b5bb83b5f00ff6e3a212a1a5cb0afd26649d77b330d2357b25a96
983685a7987aeb5eebc0e87b66b75f39b29c7086087e79a66476e4cdbbc32893e66a07c8ca8fe731
9acca2f53e986baad011aeb429843826e929362d2f0e44a4608a19d99bc1052614c2b28f531cc369
ea2407df57121b8cde9ae1a4dee1ed4eaf1c8470ae31afa478e9f8095465b7971976bed5955d4a4c
dc8022a6ab50598d27f1c141b02e384dac921516049963a50a07175ab08d7cc8307c0a85b0375450
71acd2ce1d43c7e18d6e9137b79dc5434c12302ace7ccdd783543cd71d0fb0f7668a5f9f85a858f6
20874db438ab744804cf4eb6b708b04779a7935f54d637ca81a0ccfb9517e7f73abeb94f0b792312
ba86f885519b695545443803e2ba375c7940e2dbc7bb8ce940a50b86dfe0c2aed12789d577333530
59a84e304a581dbfa3bc7407b0bdb14b2f9a13c9144627ae941a614a60cf49b6d9305c6f32e46033
a0556eab4286d246526f11b50905476af67fb26602a13877afcbc66be2b9d49dab305621819ff7f3
8e527b5e81435b3eb42d42f37344362bfbbb1f2797b2f7c5f7305d8d85b338f3b2423d182e7009a6
7bc90142ab5596b8dd1c8e6bf5c60eb5037acde02c418dfb197c03d1e9fa26b59cda7545b1cf11cb
1568a70ea0a5cc59486c844ae5a3aaa69a601fba604eb94edd94715413f25a3188f36e04830478da
f123d95559d8f4eff3656e8d01f17d47a8eced4c32a502b377b1bf12ece65544d6792fb5cfc8eda1
09ed7585914bccd2ac949aec0bc6bc4eedb384c7a9e9b057eec7905490ba9416732642a811620e35
2e3d3079b67a3e8786fa18fae7a37c1b469e576ede79175a7c2f5a001106e6f5cab259f42feaeec0
aac9d17351c7ad624bb6a2469453f9b8ac666e3e90418a7d31e9e7b2afb8e587c349d24a84769996
b283cefd3eb44b3faae927e59affd3abaf0ef37fbb1cdedacbefd402c59f2bbc7bbec389284f7f33
6df3dce2051867da213175246ac58f110e52c7bc06a7d8f177397d60ad12e24ab886dcba956a5297
54576411927442ad50544b5b9fe25cbb5d307b7cbd9516c2b41310396b6c0a040705b45ba95bf7fa
d1413fabbd99da8b16905a74dcc0a5cda23a84b5f9110086ca42a62ad30f41edb55ec873b443ae03
77727c9e64b3b6d27ed2e7443aeab11aa4971d959cadf5634a525d5e91036f8cb0c6cf1442e4bb0f
d1dd1f21576a6537fe8b4e5b643634217d97821834015dfd256c247c1f2967f3f544d5ddcd367788
5f9b88fea6c76d45c5d6e6a1986b86d049f561f299f444195faafec5772592c9c204e33b489ea8a4
04da82237aed8dd63f6d2fde811d473e1fbf0dd078e2fb8b5cf87fe2e749990d384b4abb1fbab7ac
701fda74e46a4191ed602736638386b51a356d8647c403c98226337ebdc467ed21c7004556c33bf9
38e625b68f3d02303323133f07cd57476313143d8a9e2437aed75231052a95372928563dadc997f8
a2f60802cdbae7ab8ad29316748b987abbfcdbc32710105c1679607bf71b9d38b30310ccd6d2c123
ced1549bceeaa9f1b5a2e72dff0f67607b13506cda39a525debea0ff6e74edae192f628cff8cf428
16c0356ad48396aa572bcea7e2c4cbb4ac7cf006aa88796530b51b7c9a19970b5af470ec418da043
7342fea2321b4c6ee244f02ed1c776640843eb47e7aa77e1b059ed8e7c4aba9765869585f5d9717e
ab99c83abc2734cdfff7fb650ac700d5718df9c70d4cc215793039e7b35beca24b2da09d48736f4b
a925fb55e623bb01ac10dd49f64b9750909b5ab5c59f37d53e13ad619a5d62ef1e69b3ca5d8f6160
d6d4655eeec4a843d98eeb18a8de74cd09a377fec8cc9c979ce710f0ca1561e267a3686dcb1d5f38
e306aae24b08bbaf0e5f1119cd6f4c844fdc4bbb8b4ad40fe91c9f19bd2dd4f6d4a88ac491d4fc96
73287a930845f6ea1e427c8df17107ab31ed4f13a13d0432cda7b612f669ab3294c428403d01cb89
77f08a798ad68eca41448a9232ea0f8a7d248dc1cfc99569b026e301339305fc1bc0afe67a79ae0a
74a11218b5966a53227d044149c014593c0b0ca8daa6a199d696db5ab321f5d32347f7bd1d50bf82
98080bfb17fd709f0290385f61bbdf747cf725c0ac0717a743157c20b89e2b234ffae3a6ef3440cd
784976a68cdea71c13e29a7e2b13085116e62e4295c24665dc931eea6c630c5c7d97b50b09389073
f0e9b46b89f3ef69cd4d7d0a21baa4e7d51f8077a5936b13290bc5972c6953843e474d2ffb2cffb8
b9d6eb1d6cdc1a05afe732fe88ff1af0ce1994e0bb5a10fd806299f5772c1245b194799969e3c5d0
7c975d324dd5460c5ee4b83ff4799871a9bccf1256d65ba5b451628f9eb84864e87ea08873ed0035
4911f1921ac98c43e3f87de993f5df9017b040e8e3de7c14693771b68dd256edac934b5f545fdb91
6e2cb4277d2ddba7a3656b4a0393552b21da490ce8b5911603c5bb81b9f95d10bd9a35d9225c5e25
1981e941644ce7748f55093bec508661083b637ea8ae986d79252c9244b46df10f26aa815fb7c143
f76899173de8539973b685335f5384bd36b61df7f04e62b7adcb807b98153603d2c7502e2173cf07
0c47bdf0eb1384e15c92078fecb00a8e757178e460ee896585b03d2af8e7a7929fd5d03db7c7692f
bfaafbe8d8591d452549f17e2baca80d3838cb92b490ec1c9ab592d1d949a701a603aaf73aa7f565
fff103012c8d4b6660aa428a17fbb54f6a759a13f0d9426b911d2a3ab3330eadb407766259a41853
e5a20833b92108d2f6c5280e780507bb631eda595eb02e822f7f5eb871611ff7393c032b398cae40
0d13d7b382dfabce409d8e751ab9e2e79e650417901eec3f2e6d87d04eef261f634c848181044821
8b6c971240a463fc7040ab875a2dbb547d2ae8ef99d475e0effd70dccb60576a321cbd2e53ae3acc
a727bca9fa5d788114b966a38ce00f1ac19efe4b04f5f3cdc2bcd53f3e3d7a4e1108d0bfdb35c641
4a0c12dedaeb0607058be699e5928ea4e56700e891fb115273e2cd2ddbacc31050e9b0e81650da2b
577940b6a3ff12c6c6821516d957c2a613430349e1adacb70b441d0d31c57bb42587e02005d9f201
9baa2b6b0d2e1ac889ab15a259b3597767f25eb38d56d6432fe71d3aae6deb81eb212e6902665645
e5ad070b407cf9635377c57c8b5bb6674fb930acd3fb3febdd88d6a872bb34926de373f3ba3f87d8
2b3f463d0f3f2a889f883c2126360d2fa4f88bbbc6624993dc9d687d2f3fbf5e447dc46e6809fd02
056be44a86a09ac1db227f89b403144563c38a81bbc25f93cf951bce029144c3a9a7e4e367a9c50a
a3fc3c918d796f2f3119052a530992ba9f1dfcab243511bb26e412cf9f6cfdc941f25b7d77c9cca7
8188e0cb0f8c729b05b6e1ca52b03aecaaba555a4923e7e69797e59187a7ed05efcb9a9c3df91577
fc5732c37cb73ddb906e976859b0aa4c0dd1f0b2bfcf6d4de2c619ab7bb1bdcac26083cd5a1bfb2e
88362f4ec0fc893ab7da378af5fc9927cb97f8e9e83b69895c24c83961e60e804a93e878b1447bf5
7d4be857f544bede3b7440cf3118ea1867d20fd1f825ef8286467859e8182158377ac05fafe86ca4
a0c8e6ce93b429b7b79e73130cf7da75bc339bdcfdd03434e17e8660fd893b1402f419a93bc52376
7679929d3977b68bd47a2ddee754bb569c4f062a97657f0de8
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Pick TASK  0 -1
 HBW_Copy_State <Virtual>  0
 PID_10 PID  0
 PID_11 PID  0
 hunt_exp_light PROGRAM  0 -1
 HBW_Home <Virtual>  0
 HBW_Pick_Sto <Virtual>  0
 test TASK  0 -1
 HBW_Pickup_ST PROGRAM  0 -1
 HWB_Extend_Arm <Virtual>  0
 HBW_Retract_Arm <Virtual>  0
 HWB_PickUp TASK  0 -1
 HBW_HTO1POS <Virtual>  0
 HBW_Left_1Block <Virtual>  0
 HBW_HomeTo2_Col <Virtual>  0
 HWB_HomeTo3_Col <Virtual>  0
 HWB_HomeTo2_Row <Virtual>  0
 HWB_HomeTo3_Row <Virtual>  0
 HWB_HomeTo1_Col <Virtual>  0
 HBW_move_left_1 <Virtual>  0
 HWB_Home_to_11 <Virtual>  0
 HWB_11_DropOff <Virtual>  0
 HBW_Pickup <Virtual>  0
 HBW_PickUp_R1 <Virtual>  0
 HBW_Send_VGR <Virtual>  0
 HBW_PickUp_VGR <Virtual>  0
 HBW_Return_VGR <Virtual>  0
 HBW_MotorsOff <Virtual>  0
 HBW_ConvTo11 <Virtual>  0
 HBW_Return_Top <Virtual>  0
 HBW_MV_11_12 <Virtual>  0
 HBW_Conv_12 <Virtual>  0
 HBW_Conv_12_Lat <Virtual>  0
 HBW_RETRACT_13 <Virtual>  0
 HBW_Retract_23 <Virtual>  0
 HBW_Conv13_Lat <Virtual>  0
 HBW_Conv_2Row <Virtual>  0
 HBW_PickUp_R2 <Virtual>  0
 HBW_Conv11_Lat <Virtual>  0
 HBW_Retract_12 <Virtual>  0
 HBW_Shift_C1C2 <Virtual>  0
 HBW_Move_R1_R2 <Virtual>  0
 HBW_Retract_22 <Virtual>  0
 HBW_Retract_21 <Virtual>  0
 HBW_Retract_31 <Virtual>  0
 HBW_Move_R2_R3 <Virtual>  0
 HBW_PickUp_R3 <Virtual>  0
 HBW_Conv_3Row <Virtual>  0
 HBW_Retract_32 <Virtual>  0
 HBW_Retract_33 <Virtual>  0
 HBW_Retract_Done PROGRAM  0 -1
 HBW_Retract_DN <Virtual>  0
 oneOperation <Virtual>  0
 HBW_Check1Puck <Virtual>  0
 HBW_OneTime_R1 <Virtual>  0
 HBW_OneTime_R2 <Virtual>  0
 HBW_OneTime_R3 <Virtual>  0
 HBW_OneTime_C1 <Virtual>  0
 HBW_OneTime_C2 <Virtual>  0
 HBW_OneTime_C3 <Virtual>  0
 HBW_OneDropR3 <Virtual>  0
 HBW_OneDropR2 <Virtual>  0
 HBW_OneDropR1 <Virtual>  0
 VGR_Done <Virtual>  0
 HBW_Return11 <Virtual>  0
 HBW_Return12 <Virtual>  0
 HBW_Return13 <Virtual>  0
 HBW_Return21 <Virtual>  0
 HBW_Return22 <Virtual>  0
 HBW_Return23 <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
#BEGIN FMT_COMMENT 
"VGR Program"
#END

STR ST1
COPY 0x1 "4 0x0 MC410 C410 1 0x0 MC409 C409 1 0x0 MC412 Y28 1 0x0 MC412 MC450 1 0x0 MC411 C411 1 0x0 MC408 C408 1 0x0 MC406 C406 1 0x0 MC407 C407 1 0x0 MC413 Y29 1 0x0 MC413 MC451 1 0x0 X27 MI200 1 0x0 X26 MI454 1 0x0 X25 MI453 1 0x0 MC452 C452 1"

// Rung VGR_Copy_State#2
// Offset 33
NOP

// Rung VGR_Copy_State#3
// Offset 34
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
STR ST1
OUT Y29

// Rung VGR_Suction#2
// Offset 2
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR ST1
COPY 0x1 "4 0x0 MC800 Y41 1 0x0 Y41 MI801 1 0x0 MC802 Y43 1 0x0 Y43 MI803 1 0x0 MC804 C804 1 0x0 MC805 C805 1 0x0 MC806 Y44 1 0x0 MC807 Y20 1 0x0 MC808 C811 1 0x0 MC809 C809 1 0x0 MC810 C810 1 0x0 MC812 C812 1 0x0 MC813 C813 1 0x0 MC814 C814 1 0x0 MC816 Y45 1 0x0 MC817 Y46 1 0x0 MC818 Y21 1 0x0 MC819 Y20 1 0x0 MC820 Y44 1 0x0 MC822 Y52 1"

// Rung MPO_Copy_State#2
// Offset 45
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC800 C1600 1 0x0 MC801 C1601 1 0x0 MC802 C1602 1 0x0 MC803 C1603 1 0x0 MC804 C1604 1 0x0 Y31 MI800 1 0x0 MC850 C1605 1 0x0 MC805 C1610 1"

// Rung SLD_Copy_State#2
// Offset 21
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
#BEGIN FMT_COMMENT 
"SSC Program"
#END

STR ST1
COPY 0x1 "4 0x0 MC606 C1200 1 0x0 MC607 C1201 1 0x0 MC608 C1202 1 0x0 MC609 C1203 1 0x0 MC615 C1215 1 0x0 MC616 C1216 1 0x0 MC617 C1217 1 0x0 MC618 C1218 1 0x0 MC619 C1219 1 0x0 MC620 C1220 1"

// Rung SSC_Copy_State#2
// Offset 25
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_Home
$LGCMOD HBW_Home

// Rung HBW_Home#1
// Offset 0
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Home#2
// Offset 8
STRN C215
ANDN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 60 60
OUT Y51

// Rung HBW_Home#3
// Offset 26
STRN C215
ANDN X3
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y5

// Rung HBW_Home#4
// Offset 43
STRN C215
DUPBOOL
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y76

// Rung HBW_Home#5
// Offset 64
NOP

// Rung HBW_Home#6
// Offset 65
RET

// End of Code Block HBW_Home
$LGCEND HBW_Home

// Beginning of Code Block HBW_Copy_State
$LGCMOD HBW_Copy_State

// Rung HBW_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC600 Y40 1 0x0 Y80 MHR102 1 0x0 MC101 C205 1 0x0 MC102 C206 1 0x0 MC103 C207 1 0x0 MC104 C208 1 0x0 MC105 C209 1 0x0 MC106 C210 1 0x0 MC107 C211 1 0x0 MC108 C212 1 0x0 MC109 C213 1 0x0 MC110 C214 1 0x0 MC111 C215 1 0x0 MC112 C216 1 0x0 MC113 C300 1 0x0 MC114 C217 1 0x0 MC115 C218 1 0x0 MC116 C219 1 0x0 MC117 C220 1 0x0 MC118 C221 1 0x0 MC119 C222 1 0x0 MC120 C223 1 0x0 MC121 C224 1 0x0 MC122 C225 1 0x0 MC123 C226 1 0x0 X2 MI101 1 0x0 X10 MI102 1 0x0 X11 MI103 1 0x0 X3 MI104 1 0x0 X0 MI105 1 0x0 X6 MI106 1 0x0 X7 MI107 1 0x0 X8 MI108 1 0x0 X9 MI109 1 0x0 $HBW_Encoder_X.Acc MHR1 1 0x0 $HBW_Encoder_Z.Acc MHR2 1"

// Rung HBW_Copy_State#2
// Offset 77
RET

// End of Code Block HBW_Copy_State
$LGCEND HBW_Copy_State

// Beginning of Code Block HBW_HomeTo2_Col
$LGCMOD HBW_HomeTo2_Col

// Rung HBW_HomeTo2_Col#1
// Offset 0
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50

// Rung HBW_HomeTo2_Col#2
// Offset 17
STRGE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_HomeTo2_Col#3
// Offset 22
NOP

// Rung HBW_HomeTo2_Col#4
// Offset 23
NOP

// Rung HBW_HomeTo2_Col#5
// Offset 24
NOP

// Rung HBW_HomeTo2_Col#6
// Offset 25
RET

// End of Code Block HBW_HomeTo2_Col
$LGCEND HBW_HomeTo2_Col

// Beginning of Code Block HWB_HomeTo1_Col
$LGCMOD HWB_HomeTo1_Col

// Rung HWB_HomeTo1_Col#1
// Offset 0
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50

// Rung HWB_HomeTo1_Col#2
// Offset 17
STRGE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HWB_HomeTo1_Col#3
// Offset 22
NOP

// Rung HWB_HomeTo1_Col#4
// Offset 23
NOP

// Rung HWB_HomeTo1_Col#5
// Offset 24
RET

// End of Code Block HWB_HomeTo1_Col
$LGCEND HWB_HomeTo1_Col

// Beginning of Code Block HWB_Home_to_11
$LGCMOD HWB_Home_to_11

// Rung HWB_Home_to_11#1
// Offset 0
STRN C215
AND C250
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HWB_Home_to_11#2
// Offset 22
STRGE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HWB_Home_to_11#3
// Offset 27
STRN C215
AND C251
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
POPBOOL
AND ST2
OUT Y5

// Rung HWB_Home_to_11#4
// Offset 49
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HWB_Home_to_11#5
// Offset 54
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HWB_Home_to_11#6
// Offset 73
NOP

// Rung HWB_Home_to_11#7
// Offset 74
NOP

// Rung HWB_Home_to_11#8
// Offset 75
RET

// End of Code Block HWB_Home_to_11
$LGCEND HWB_Home_to_11

// Beginning of Code Block HWB_11_DropOff
$LGCMOD HWB_11_DropOff

// Rung HWB_11_DropOff#1
// Offset 0
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HWB_11_DropOff#2
// Offset 8
STRGE 80 $HBW_Encoder_X.Acc
OUT C250

// Rung HWB_11_DropOff#3
// Offset 13
STRN C215
ANDN C250
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51

// Rung HWB_11_DropOff#4
// Offset 31
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y4
AND ST2
OUT Y5

// Rung HWB_11_DropOff#5
// Offset 51
STRGE 2730 $HBW_Encoder_Z.Acc
OUT C251

// Rung HWB_11_DropOff#6
// Offset 56
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 60
OUT Y7

// Rung HWB_11_DropOff#7
// Offset 73
RET

// End of Code Block HWB_11_DropOff
$LGCEND HWB_11_DropOff

// Beginning of Code Block HBW_PickUp_R1
$LGCMOD HBW_PickUp_R1

// Rung HBW_PickUp_R1#1
// Offset 0
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_PickUp_R1#2
// Offset 19
STRN C215
AND C251
DUPBOOL
AND X10
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_PickUp_R1#3
// Offset 41
STRLE 80 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_PickUp_R1#4
// Offset 46
STRN C215
AND ST2
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
OUT Y50

// Rung HBW_PickUp_R1#5
// Offset 64
STRLE 80 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_PickUp_R1#6
// Offset 69
NOP

// Rung HBW_PickUp_R1#7
// Offset 70
NOP

// Rung HBW_PickUp_R1#8
// Offset 71
NOP

// Rung HBW_PickUp_R1#9
// Offset 72
NOP

// Rung HBW_PickUp_R1#10
// Offset 73
RET

// End of Code Block HBW_PickUp_R1
$LGCEND HBW_PickUp_R1

// Beginning of Code Block HBW_Send_VGR
$LGCMOD HBW_Send_VGR

// Rung HBW_Send_VGR#1
// Offset 0
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_Send_VGR#2
// Offset 19
STRN C215
AND ST2
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y5
OUT Y4

// Rung HBW_Send_VGR#3
// Offset 37
STRN C215
AND X2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 60 60
OUT Y48
AND ST2
OUT Y49

// Rung HBW_Send_VGR#4
// Offset 56
NOP

// Rung HBW_Send_VGR#5
// Offset 57
NOP

// Rung HBW_Send_VGR#6
// Offset 58
RET

// End of Code Block HBW_Send_VGR
$LGCEND HBW_Send_VGR

// Beginning of Code Block HBW_PickUp_VGR
$LGCMOD HBW_PickUp_VGR

// Rung HBW_PickUp_VGR#1
// Offset 0
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_PickUp_VGR#2
// Offset 19
STRN C215
AND ST2
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y5
OUT Y4

// Rung HBW_PickUp_VGR#3
// Offset 37
STRN C215
AND X11
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 60 60
OUT Y49
AND ST2
OUT Y48

// Rung HBW_PickUp_VGR#4
// Offset 56
NOP

// Rung HBW_PickUp_VGR#5
// Offset 57
NOP

// Rung HBW_PickUp_VGR#6
// Offset 58
RET

// End of Code Block HBW_PickUp_VGR
$LGCEND HBW_PickUp_VGR

// Beginning of Code Block HBW_Return_VGR
$LGCMOD HBW_Return_VGR

// Rung HBW_Return_VGR#1
// Offset 0
STRN C215
ANDN C251
DUPBOOL
AND C299
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y6

// Rung HBW_Return_VGR#2
// Offset 22
STRN C215
AND X1
DUPBOOL
AND C299
AND C251
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 60 60
OUT Y49
POPBOOL
AND ST2
OUT Y48

// Rung HBW_Return_VGR#3
// Offset 45
STRN C215
DUPBOOL
AND C299
ANDN X1
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_Return_VGR#4
// Offset 68
STRLE 2550 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Return_VGR#5
// Offset 73
NOP

// Rung HBW_Return_VGR#6
// Offset 74
NOP

// Rung HBW_Return_VGR#7
// Offset 75
RET

// End of Code Block HBW_Return_VGR
$LGCEND HBW_Return_VGR

// Beginning of Code Block HBW_MotorsOff
$LGCMOD HBW_MotorsOff

// Rung HBW_MotorsOff#1
// Offset 0
STRN C215
ANDN ST2
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
OUT Y6

// Rung HBW_MotorsOff#2
// Offset 18
STRN C215
AND ST2
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y5
OUT Y4

// Rung HBW_MotorsOff#3
// Offset 36
STRN C215
AND ST2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 60 60
OUT Y49
OUT Y48

// Rung HBW_MotorsOff#4
// Offset 54
NOP

// Rung HBW_MotorsOff#5
// Offset 55
NOP

// Rung HBW_MotorsOff#6
// Offset 56
NOP

// Rung HBW_MotorsOff#7
// Offset 57
RET

// End of Code Block HBW_MotorsOff
$LGCEND HBW_MotorsOff

// Beginning of Code Block HBW_ConvTo11
$LGCMOD HBW_ConvTo11

// Rung HBW_ConvTo11#1
// Offset 0
STRN C215
AND C250
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HBW_ConvTo11#2
// Offset 22
NOP

// Rung HBW_ConvTo11#3
// Offset 23
STRGE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_ConvTo11#4
// Offset 28
STRN C215
AND C251
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_ConvTo11#5
// Offset 50
STRLE 80 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_ConvTo11#6
// Offset 55
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_ConvTo11#7
// Offset 74
NOP

// Rung HBW_ConvTo11#8
// Offset 75
NOP

// Rung HBW_ConvTo11#9
// Offset 76
RET

// End of Code Block HBW_ConvTo11
$LGCEND HBW_ConvTo11

// Beginning of Code Block HBW_Return_Top
$LGCMOD HBW_Return_Top

// Rung HBW_Return_Top#1
// Offset 0
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_Return_Top#2
// Offset 19
STRN C215
AND C251
DUPBOOL
AND X10
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
POPBOOL
AND ST2
OUT Y5

// Rung HBW_Return_Top#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Return_Top#4
// Offset 46
STRN C215
AND ST2
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
OUT Y50

// Rung HBW_Return_Top#5
// Offset 64
STRLE 80 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Return_Top#6
// Offset 69
NOP

// Rung HBW_Return_Top#7
// Offset 70
NOP

// Rung HBW_Return_Top#8
// Offset 71
RET

// End of Code Block HBW_Return_Top
$LGCEND HBW_Return_Top

// Beginning of Code Block HBW_MV_11_12
$LGCMOD HBW_MV_11_12

// Rung HBW_MV_11_12#1
// Offset 0
STRN C215
DUPBOOL
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_MV_11_12#2
// Offset 21
NOP

// Rung HBW_MV_11_12#3
// Offset 22
NOP

// Rung HBW_MV_11_12#4
// Offset 23
NOP

// Rung HBW_MV_11_12#5
// Offset 24
RET

// End of Code Block HBW_MV_11_12
$LGCEND HBW_MV_11_12

// Beginning of Code Block HBW_Conv_12
$LGCMOD HBW_Conv_12

// Rung HBW_Conv_12#1
// Offset 0
NOP

// Rung HBW_Conv_12#2
// Offset 1
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_Conv_12#3
// Offset 20
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
AND ST2
OUT Y4

// Rung HBW_Conv_12#4
// Offset 40
STRGE $HBW_Encoder_Z.Acc 80
OUT C251

// Rung HBW_Conv_12#5
// Offset 45
NOP

// Rung HBW_Conv_12#6
// Offset 46
RET

// End of Code Block HBW_Conv_12
$LGCEND HBW_Conv_12

// Beginning of Code Block HBW_Conv_12_Lat
$LGCMOD HBW_Conv_12_Lat

// Rung HBW_Conv_12_Lat#1
// Offset 0
NOP

// Rung HBW_Conv_12_Lat#2
// Offset 1
STRN C215
ANDN C250
DUPBOOL
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
POPBOOL
AND ST2
OUT Y7

// Rung HBW_Conv_12_Lat#3
// Offset 23
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Conv_12_Lat#4
// Offset 42
STRGE 5290 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Conv_12_Lat#5
// Offset 47
NOP

// Rung HBW_Conv_12_Lat#6
// Offset 48
RET

// End of Code Block HBW_Conv_12_Lat
$LGCEND HBW_Conv_12_Lat

// Beginning of Code Block HBW_RETRACT_13
$LGCMOD HBW_RETRACT_13

// Rung HBW_RETRACT_13#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_RETRACT_13#2
// Offset 22
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_RETRACT_13#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_RETRACT_13#4
// Offset 46
STRN C215
AND C250
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HBW_RETRACT_13#5
// Offset 68
STRGE 7650 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_RETRACT_13#6
// Offset 73
RET

// End of Code Block HBW_RETRACT_13
$LGCEND HBW_RETRACT_13

// Beginning of Code Block HBW_Retract_23
$LGCMOD HBW_Retract_23

// Rung HBW_Retract_23#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_23#2
// Offset 22
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_23#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_23#4
// Offset 46
STRN C215
AND ST2
OUT Y51
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50

// Rung HBW_Retract_23#5
// Offset 65
STRGE 7640 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_23#6
// Offset 70
RET

// End of Code Block HBW_Retract_23
$LGCEND HBW_Retract_23

// Beginning of Code Block HBW_Conv13_Lat
$LGCMOD HBW_Conv13_Lat

// Rung HBW_Conv13_Lat#1
// Offset 0
NOP

// Rung HBW_Conv13_Lat#2
// Offset 1
STRN C215
ANDN C250
DUPBOOL
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
POPBOOL
AND ST2
OUT Y7

// Rung HBW_Conv13_Lat#3
// Offset 23
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Conv13_Lat#4
// Offset 42
STRGE 7640 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Conv13_Lat#5
// Offset 47
NOP

// Rung HBW_Conv13_Lat#6
// Offset 48
RET

// End of Code Block HBW_Conv13_Lat
$LGCEND HBW_Conv13_Lat

// Beginning of Code Block HBW_Conv_2Row
$LGCMOD HBW_Conv_2Row

// Rung HBW_Conv_2Row#1
// Offset 0
NOP

// Rung HBW_Conv_2Row#2
// Offset 1
NOP

// Rung HBW_Conv_2Row#3
// Offset 2
NOP

// Rung HBW_Conv_2Row#4
// Offset 3
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_Conv_2Row#5
// Offset 22
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
AND ST2
OUT Y4

// Rung HBW_Conv_2Row#6
// Offset 42
STRGE $HBW_Encoder_Z.Acc 1380
OUT C251

// Rung HBW_Conv_2Row#7
// Offset 47
NOP

// Rung HBW_Conv_2Row#8
// Offset 48
RET

// End of Code Block HBW_Conv_2Row
$LGCEND HBW_Conv_2Row

// Beginning of Code Block HBW_PickUp_R2
$LGCMOD HBW_PickUp_R2

// Rung HBW_PickUp_R2#1
// Offset 0
NOP

// Rung HBW_PickUp_R2#2
// Offset 1
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_PickUp_R2#3
// Offset 20
STRN C215
AND ST2
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
OUT Y50

// Rung HBW_PickUp_R2#4
// Offset 38
NOP

// Rung HBW_PickUp_R2#5
// Offset 39
STRN C215
AND C251
DUPBOOL
AND X10
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_PickUp_R2#6
// Offset 61
STRLE 1400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_PickUp_R2#7
// Offset 66
NOP

// Rung HBW_PickUp_R2#8
// Offset 67
NOP

// Rung HBW_PickUp_R2#9
// Offset 68
NOP

// Rung HBW_PickUp_R2#10
// Offset 69
RET

// End of Code Block HBW_PickUp_R2
$LGCEND HBW_PickUp_R2

// Beginning of Code Block HBW_Conv11_Lat
$LGCMOD HBW_Conv11_Lat

// Rung HBW_Conv11_Lat#1
// Offset 0
NOP

// Rung HBW_Conv11_Lat#2
// Offset 1
STRN C215
ANDN C250
DUPBOOL
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
POPBOOL
AND ST2
OUT Y7

// Rung HBW_Conv11_Lat#3
// Offset 23
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Conv11_Lat#4
// Offset 42
STRGE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Conv11_Lat#5
// Offset 47
NOP

// Rung HBW_Conv11_Lat#6
// Offset 48
RET

// End of Code Block HBW_Conv11_Lat
$LGCEND HBW_Conv11_Lat

// Beginning of Code Block HBW_Retract_12
$LGCMOD HBW_Retract_12

// Rung HBW_Retract_12#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_12#2
// Offset 22
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_12#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_12#4
// Offset 46
RET

// End of Code Block HBW_Retract_12
$LGCEND HBW_Retract_12

// Beginning of Code Block HBW_Shift_C1C2
$LGCMOD HBW_Shift_C1C2

// Rung HBW_Shift_C1C2#1
// Offset 0
STRGE 5290 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Shift_C1C2#2
// Offset 5
NOP

// Rung HBW_Shift_C1C2#3
// Offset 6
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Shift_C1C2#4
// Offset 25
NOP

// Rung HBW_Shift_C1C2#5
// Offset 26
STRN C215
AND ST2
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
OUT Y6

// Rung HBW_Shift_C1C2#6
// Offset 44
NOP

// Rung HBW_Shift_C1C2#7
// Offset 45
RET

// End of Code Block HBW_Shift_C1C2
$LGCEND HBW_Shift_C1C2

// Beginning of Code Block HBW_Move_R1_R2
$LGCMOD HBW_Move_R1_R2

// Rung HBW_Move_R1_R2#1
// Offset 0
STRGE 1760 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Move_R1_R2#2
// Offset 5
NOP

// Rung HBW_Move_R1_R2#3
// Offset 6
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Move_R1_R2#4
// Offset 25
NOP

// Rung HBW_Move_R1_R2#5
// Offset 26
NOP

// Rung HBW_Move_R1_R2#6
// Offset 27
RET

// End of Code Block HBW_Move_R1_R2
$LGCEND HBW_Move_R1_R2

// Beginning of Code Block HBW_Retract_22
$LGCMOD HBW_Retract_22

// Rung HBW_Retract_22#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_22#2
// Offset 22
STRGE 1730 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_22#3
// Offset 27
NOP

// Rung HBW_Retract_22#4
// Offset 28
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_22#5
// Offset 47
STRLE 5290 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_22#6
// Offset 52
STRN C215
AND C250
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
AND ST2
OUT Y50

// Rung HBW_Retract_22#7
// Offset 72
NOP

// Rung HBW_Retract_22#8
// Offset 73
RET

// End of Code Block HBW_Retract_22
$LGCEND HBW_Retract_22

// Beginning of Code Block HBW_Retract_21
$LGCMOD HBW_Retract_21

// Rung HBW_Retract_21#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_21#2
// Offset 22
STRGE 1730 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_21#3
// Offset 27
NOP

// Rung HBW_Retract_21#4
// Offset 28
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_21#5
// Offset 47
STRLE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_21#6
// Offset 52
STRN C215
AND C250
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
AND ST2
OUT Y50

// Rung HBW_Retract_21#7
// Offset 72
NOP

// Rung HBW_Retract_21#8
// Offset 73
RET

// End of Code Block HBW_Retract_21
$LGCEND HBW_Retract_21

// Beginning of Code Block HBW_Retract_31
$LGCMOD HBW_Retract_31

// Rung HBW_Retract_31#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_31#2
// Offset 22
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_31#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_31#4
// Offset 46
STRN C215
AND ST2
OUT Y51
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50

// Rung HBW_Retract_31#5
// Offset 65
STRGE 7640 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_31#6
// Offset 70
RET

// End of Code Block HBW_Retract_31
$LGCEND HBW_Retract_31

// Beginning of Code Block HBW_Move_R2_R3
$LGCMOD HBW_Move_R2_R3

// Rung HBW_Move_R2_R3#1
// Offset 0
STRGE 3600 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Move_R2_R3#2
// Offset 5
NOP

// Rung HBW_Move_R2_R3#3
// Offset 6
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Move_R2_R3#4
// Offset 25
NOP

// Rung HBW_Move_R2_R3#5
// Offset 26
NOP

// Rung HBW_Move_R2_R3#6
// Offset 27
RET

// End of Code Block HBW_Move_R2_R3
$LGCEND HBW_Move_R2_R3

// Beginning of Code Block HBW_PickUp_R3
$LGCMOD HBW_PickUp_R3

// Rung HBW_PickUp_R3#1
// Offset 0
NOP

// Rung HBW_PickUp_R3#2
// Offset 1
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_PickUp_R3#3
// Offset 20
STRN C215
AND ST2
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
OUT Y50

// Rung HBW_PickUp_R3#4
// Offset 38
STRLE 2800 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_PickUp_R3#5
// Offset 43
NOP

// Rung HBW_PickUp_R3#6
// Offset 44
STRN C215
AND C251
DUPBOOL
AND X10
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_PickUp_R3#7
// Offset 66
NOP

// Rung HBW_PickUp_R3#8
// Offset 67
NOP

// Rung HBW_PickUp_R3#9
// Offset 68
NOP

// Rung HBW_PickUp_R3#10
// Offset 69
RET

// End of Code Block HBW_PickUp_R3
$LGCEND HBW_PickUp_R3

// Beginning of Code Block HBW_Conv_3Row
$LGCMOD HBW_Conv_3Row

// Rung HBW_Conv_3Row#1
// Offset 0
NOP

// Rung HBW_Conv_3Row#2
// Offset 1
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_Conv_3Row#3
// Offset 20
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Conv_3Row#4
// Offset 40
STRLE $HBW_Encoder_Z.Acc 2950
OUT C251

// Rung HBW_Conv_3Row#5
// Offset 45
NOP

// Rung HBW_Conv_3Row#6
// Offset 46
RET

// End of Code Block HBW_Conv_3Row
$LGCEND HBW_Conv_3Row

// Beginning of Code Block HBW_Retract_32
$LGCMOD HBW_Retract_32

// Rung HBW_Retract_32#1
// Offset 0
STRGE 3300 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_32#2
// Offset 5
NOP

// Rung HBW_Retract_32#3
// Offset 6
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_32#4
// Offset 28
NOP

// Rung HBW_Retract_32#5
// Offset 29
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_32#6
// Offset 48
STRGE 5290 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_32#7
// Offset 53
NOP

// Rung HBW_Retract_32#8
// Offset 54
STRN C215
AND C250
DUPBOOL
ANDN C251
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HBW_Retract_32#9
// Offset 77
NOP

// Rung HBW_Retract_32#10
// Offset 78
RET

// End of Code Block HBW_Retract_32
$LGCEND HBW_Retract_32

// Beginning of Code Block HBW_Retract_33
$LGCMOD HBW_Retract_33

// Rung HBW_Retract_33#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_33#2
// Offset 22
STRGE 3300 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_33#3
// Offset 27
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_33#4
// Offset 46
STRGE 7640 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_33#5
// Offset 51
NOP

// Rung HBW_Retract_33#6
// Offset 52
STRN C215
AND C250
DUPBOOL
ANDN C251
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HBW_Retract_33#7
// Offset 75
NOP

// Rung HBW_Retract_33#8
// Offset 76
RET

// End of Code Block HBW_Retract_33
$LGCEND HBW_Retract_33

// Beginning of Code Block HBW_Retract_DN
$LGCMOD HBW_Retract_DN

// Rung HBW_Retract_DN#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_DN#2
// Offset 22
STRGE 3200 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_DN#3
// Offset 27
NOP

// Rung HBW_Retract_DN#4
// Offset 28
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_DN#5
// Offset 47
STRLE 80 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_DN#6
// Offset 52
STRN C215
AND C250
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
AND ST2
OUT Y50

// Rung HBW_Retract_DN#7
// Offset 72
NOP

// Rung HBW_Retract_DN#8
// Offset 73
RET

// End of Code Block HBW_Retract_DN
$LGCEND HBW_Retract_DN

// Beginning of Code Block oneOperation
$LGCMOD oneOperation

// Rung oneOperation#1
// Offset 0
NOP

// Rung oneOperation#2
// Offset 1
NOP

// Rung oneOperation#3
// Offset 2
RET

// End of Code Block oneOperation
$LGCEND oneOperation

// Beginning of Code Block HBW_Check1Puck
$LGCMOD HBW_Check1Puck

// Rung HBW_Check1Puck#1
// Offset 0
STR ST1
MOVE 0 C301

// Rung HBW_Check1Puck#2
// Offset 3
STR C217
MOVE 1 C301
MOVE 1 N2

// Rung HBW_Check1Puck#3
// Offset 8
STR C218
MOVE 1 C301
MOVE 2 N2

// Rung HBW_Check1Puck#4
// Offset 13
STR C219
MOVE 1 C301
MOVE 3 N2

// Rung HBW_Check1Puck#5
// Offset 18
STR C220
MOVE 1 C301
MOVE 4 N2

// Rung HBW_Check1Puck#6
// Offset 23
STR C221
MOVE 1 C301
MOVE 5 N2

// Rung HBW_Check1Puck#7
// Offset 28
STR C222
MOVE 1 C301
MOVE 6 N2

// Rung HBW_Check1Puck#8
// Offset 33
STR C223
MOVE 1 C301
MOVE 7 N2

// Rung HBW_Check1Puck#9
// Offset 38
STR C224
MOVE 1 C301
MOVE 8 N2

// Rung HBW_Check1Puck#10
// Offset 43
STR C225
MOVE 1 C301
MOVE 9 N2

// Rung HBW_Check1Puck#11
// Offset 48
RET

// End of Code Block HBW_Check1Puck
$LGCEND HBW_Check1Puck

// Beginning of Code Block HBW_OneTime_R1
$LGCMOD HBW_OneTime_R1

// Rung HBW_OneTime_R1#1
// Offset 0
STRGE 375 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_OneTime_R1#2
// Offset 5
NOP

// Rung HBW_OneTime_R1#3
// Offset 6
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_OneTime_R1#4
// Offset 25
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_OneTime_R1#5
// Offset 45
NOP

// Rung HBW_OneTime_R1#6
// Offset 46
RET

// End of Code Block HBW_OneTime_R1
$LGCEND HBW_OneTime_R1

// Beginning of Code Block HBW_OneTime_R2
$LGCMOD HBW_OneTime_R2

// Rung HBW_OneTime_R2#1
// Offset 0
STRGE 1650 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_OneTime_R2#2
// Offset 5
NOP

// Rung HBW_OneTime_R2#3
// Offset 6
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_OneTime_R2#4
// Offset 25
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_OneTime_R2#5
// Offset 45
NOP

// Rung HBW_OneTime_R2#6
// Offset 46
RET

// End of Code Block HBW_OneTime_R2
$LGCEND HBW_OneTime_R2

// Beginning of Code Block HBW_OneTime_R3
$LGCMOD HBW_OneTime_R3

// Rung HBW_OneTime_R3#1
// Offset 0
STRGE 3200 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_OneTime_R3#2
// Offset 5
NOP

// Rung HBW_OneTime_R3#3
// Offset 6
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_OneTime_R3#4
// Offset 25
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_OneTime_R3#5
// Offset 45
NOP

// Rung HBW_OneTime_R3#6
// Offset 46
RET

// End of Code Block HBW_OneTime_R3
$LGCEND HBW_OneTime_R3

// Beginning of Code Block HBW_OneTime_C1
$LGCMOD HBW_OneTime_C1

// Rung HBW_OneTime_C1#1
// Offset 0
STRGE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_OneTime_C1#2
// Offset 5
NOP

// Rung HBW_OneTime_C1#3
// Offset 6
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_OneTime_C1#4
// Offset 25
NOP

// Rung HBW_OneTime_C1#5
// Offset 26
RET

// End of Code Block HBW_OneTime_C1
$LGCEND HBW_OneTime_C1

// Beginning of Code Block HBW_OneTime_C2
$LGCMOD HBW_OneTime_C2

// Rung HBW_OneTime_C2#1
// Offset 0
STRGE 5290 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_OneTime_C2#2
// Offset 5
NOP

// Rung HBW_OneTime_C2#3
// Offset 6
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_OneTime_C2#4
// Offset 25
NOP

// Rung HBW_OneTime_C2#5
// Offset 26
RET

// End of Code Block HBW_OneTime_C2
$LGCEND HBW_OneTime_C2

// Beginning of Code Block HBW_OneTime_C3
$LGCMOD HBW_OneTime_C3

// Rung HBW_OneTime_C3#1
// Offset 0
STRGE 7640 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_OneTime_C3#2
// Offset 5
NOP

// Rung HBW_OneTime_C3#3
// Offset 6
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_OneTime_C3#4
// Offset 25
NOP

// Rung HBW_OneTime_C3#5
// Offset 26
RET

// End of Code Block HBW_OneTime_C3
$LGCEND HBW_OneTime_C3

// Beginning of Code Block HBW_OneDropR3
$LGCMOD HBW_OneDropR3

// Rung HBW_OneDropR3#1
// Offset 0
NOP

// Rung HBW_OneDropR3#2
// Offset 1
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_OneDropR3#3
// Offset 23
STRGE 3300 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_OneDropR3#4
// Offset 28
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_OneDropR3#5
// Offset 47
NOP

// Rung HBW_OneDropR3#6
// Offset 48
NOP

// Rung HBW_OneDropR3#7
// Offset 49
RET

// End of Code Block HBW_OneDropR3
$LGCEND HBW_OneDropR3

// Beginning of Code Block HBW_OneDropR2
$LGCMOD HBW_OneDropR2

// Rung HBW_OneDropR2#1
// Offset 0
NOP

// Rung HBW_OneDropR2#2
// Offset 1
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_OneDropR2#3
// Offset 23
STRGE 1730 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_OneDropR2#4
// Offset 28
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_OneDropR2#5
// Offset 47
NOP

// Rung HBW_OneDropR2#6
// Offset 48
NOP

// Rung HBW_OneDropR2#7
// Offset 49
RET

// End of Code Block HBW_OneDropR2
$LGCEND HBW_OneDropR2

// Beginning of Code Block HBW_OneDropR1
$LGCMOD HBW_OneDropR1

// Rung HBW_OneDropR1#1
// Offset 0
NOP

// Rung HBW_OneDropR1#2
// Offset 1
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_OneDropR1#3
// Offset 23
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_OneDropR1#4
// Offset 28
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_OneDropR1#5
// Offset 47
NOP

// Rung HBW_OneDropR1#6
// Offset 48
NOP

// Rung HBW_OneDropR1#7
// Offset 49
RET

// End of Code Block HBW_OneDropR1
$LGCEND HBW_OneDropR1

// Beginning of Code Block VGR_Done
$LGCMOD VGR_Done

// Rung VGR_Done#1
// Offset 0
STR ST1
MOVE 0 C700

// Rung VGR_Done#2
// Offset 3
NOP

// Rung VGR_Done#3
// Offset 4
RET

// End of Code Block VGR_Done
$LGCEND VGR_Done

// Beginning of Code Block HBW_Return11
$LGCMOD HBW_Return11

// Rung HBW_Return11#1
// Offset 0
NOP

// Rung HBW_Return11#2
// Offset 1
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_Return11#3
// Offset 20
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
AND ST2
OUT Y4

// Rung HBW_Return11#4
// Offset 40
STRGE $HBW_Encoder_Z.Acc 80
OUT C251

// Rung HBW_Return11#5
// Offset 45
NOP

// Rung HBW_Return11#6
// Offset 46
STRN C215
ANDN C250
DUPBOOL
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
POPBOOL
AND ST2
OUT Y7

// Rung HBW_Return11#7
// Offset 68
STRGE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Return11#8
// Offset 73
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Return11#9
// Offset 92
NOP

// Rung HBW_Return11#10
// Offset 93
RET

// Rung HBW_Return11#11
// Offset 94
NOP

// Rung HBW_Return11#12
// Offset 95
NOP

// Rung HBW_Return11#13
// Offset 96
NOP

// End of Code Block HBW_Return11
$LGCEND HBW_Return11

// Beginning of Code Block HBW_Return12
$LGCMOD HBW_Return12

// Rung HBW_Return12#1
// Offset 0
NOP

// Rung HBW_Return12#2
// Offset 1
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_Return12#3
// Offset 20
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
AND ST2
OUT Y4

// Rung HBW_Return12#4
// Offset 40
STRGE $HBW_Encoder_Z.Acc 80
OUT C251

// Rung HBW_Return12#5
// Offset 45
NOP

// Rung HBW_Return12#6
// Offset 46
STRN C215
ANDN C250
DUPBOOL
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
POPBOOL
AND ST2
OUT Y7

// Rung HBW_Return12#7
// Offset 68
STRGE 5290 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Return12#8
// Offset 73
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Return12#9
// Offset 92
NOP

// Rung HBW_Return12#10
// Offset 93
RET

// Rung HBW_Return12#11
// Offset 94
NOP

// Rung HBW_Return12#12
// Offset 95
NOP

// Rung HBW_Return12#13
// Offset 96
NOP

// End of Code Block HBW_Return12
$LGCEND HBW_Return12

// Beginning of Code Block HBW_Return13
$LGCMOD HBW_Return13

// Rung HBW_Return13#1
// Offset 0
NOP

// Rung HBW_Return13#2
// Offset 1
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_Return13#3
// Offset 20
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
AND ST2
OUT Y4

// Rung HBW_Return13#4
// Offset 40
STRGE $HBW_Encoder_Z.Acc 80
OUT C251

// Rung HBW_Return13#5
// Offset 45
NOP

// Rung HBW_Return13#6
// Offset 46
STRN C215
ANDN C250
DUPBOOL
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
POPBOOL
AND ST2
OUT Y7

// Rung HBW_Return13#7
// Offset 68
STRGE 7640 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Return13#8
// Offset 73
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Return13#9
// Offset 92
NOP

// Rung HBW_Return13#10
// Offset 93
RET

// Rung HBW_Return13#11
// Offset 94
NOP

// Rung HBW_Return13#12
// Offset 95
NOP

// Rung HBW_Return13#13
// Offset 96
NOP

// End of Code Block HBW_Return13
$LGCEND HBW_Return13

// Beginning of Code Block HBW_Return21
$LGCMOD HBW_Return21

// Rung HBW_Return21#1
// Offset 0
NOP

// Rung HBW_Return21#2
// Offset 1
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_Return21#3
// Offset 20
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
AND ST2
OUT Y4

// Rung HBW_Return21#4
// Offset 40
STRGE $HBW_Encoder_Z.Acc 1380
OUT C251

// Rung HBW_Return21#5
// Offset 45
NOP

// Rung HBW_Return21#6
// Offset 46
STRN C215
ANDN C250
DUPBOOL
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
POPBOOL
AND ST2
OUT Y7

// Rung HBW_Return21#7
// Offset 68
STRGE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Return21#8
// Offset 73
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Return21#9
// Offset 92
NOP

// Rung HBW_Return21#10
// Offset 93
RET

// Rung HBW_Return21#11
// Offset 94
NOP

// Rung HBW_Return21#12
// Offset 95
NOP

// Rung HBW_Return21#13
// Offset 96
NOP

// End of Code Block HBW_Return21
$LGCEND HBW_Return21

// Beginning of Code Block HBW_Return22
$LGCMOD HBW_Return22

// Rung HBW_Return22#1
// Offset 0
NOP

// Rung HBW_Return22#2
// Offset 1
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_Return22#3
// Offset 20
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
AND ST2
OUT Y4

// Rung HBW_Return22#4
// Offset 40
STRGE $HBW_Encoder_Z.Acc 1380
OUT C251

// Rung HBW_Return22#5
// Offset 45
NOP

// Rung HBW_Return22#6
// Offset 46
STRN C215
ANDN C250
DUPBOOL
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
POPBOOL
AND ST2
OUT Y7

// Rung HBW_Return22#7
// Offset 68
STRGE 5290 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Return22#8
// Offset 73
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Return22#9
// Offset 92
NOP

// Rung HBW_Return22#10
// Offset 93
RET

// Rung HBW_Return22#11
// Offset 94
NOP

// Rung HBW_Return22#12
// Offset 95
NOP

// Rung HBW_Return22#13
// Offset 96
NOP

// End of Code Block HBW_Return22
$LGCEND HBW_Return22

// Beginning of Code Block HBW_Return23
$LGCMOD HBW_Return23

// Rung HBW_Return23#1
// Offset 0
NOP

// Rung HBW_Return23#2
// Offset 1
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_Return23#3
// Offset 20
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
AND ST2
OUT Y4

// Rung HBW_Return23#4
// Offset 40
STRGE $HBW_Encoder_Z.Acc 1380
OUT C251

// Rung HBW_Return23#5
// Offset 45
NOP

// Rung HBW_Return23#6
// Offset 46
STRN C215
ANDN C250
DUPBOOL
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
POPBOOL
AND ST2
OUT Y7

// Rung HBW_Return23#7
// Offset 68
STRGE 7640 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Return23#8
// Offset 73
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Return23#9
// Offset 92
NOP

// Rung HBW_Return23#10
// Offset 93
RET

// Rung HBW_Return23#11
// Offset 94
NOP

// Rung HBW_Return23#12
// Offset 95
NOP

// End of Code Block HBW_Return23
$LGCEND HBW_Return23

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#2
// Offset 3
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#3
// Offset 6
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#4
// Offset 9
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#5
// Offset 12
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// Rung $Main#6
// Offset 15
#BEGIN FMT_COMMENT 
"Hunter Demo Light<br>"
#END

STR ST1
RUN hunt_exp_light

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
SG HBW_Program.S0

// Rung HBW_Program#2
// Offset 2
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#3
// Offset 10
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#4
// Offset 12
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#5
// Offset 14
STR ST1
MOVE 0 C298

// Rung HBW_Program#6
// Offset 17
STR ST1
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#7
// Offset 25
STR ST1
CALL HBW_Check1Puck 0x1 DST511 "3" "3"

// Rung HBW_Program#8
// Offset 33
STR C301
JMP HBW_Program.S19

// Rung HBW_Program#9
// Offset 35
NOP

// Rung HBW_Program#10
// Offset 36
STR C216
JMP HBW_Program.S1

// Rung HBW_Program#11
// Offset 38
STR C213
JMP HBW_Program.S1

// Rung HBW_Program#12
// Offset 40
SG HBW_Program.S1

// Rung HBW_Program#13
// Offset 42
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#14
// Offset 50
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#15
// Offset 52
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#16
// Offset 54
STR ST1
MOVE 0 N1

// Rung HBW_Program#17
// Offset 57
STR ST1
MOVE 0 C299

// Rung HBW_Program#18
// Offset 60
NOP

// Rung HBW_Program#19
// Offset 61
STR ST1
DUPBOOL
STR C205
ANDN C206
STR C206
ANDN C205
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 500 60
POPBOOL
DUPBOOL
AND C205
OUT Y48
POPBOOL
AND C206
OUT Y49

// Rung HBW_Program#20
// Offset 90
STR ST1
DUPBOOL
STR C207
ANDN C208
STRN C207
AND C208
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
POPBOOL
DUPBOOL
AND C207
OUT Y50
POPBOOL
AND C208
OUT Y51

// Rung HBW_Program#21
// Offset 119
STR ST1
DUPBOOL
STR C209
ANDN C210
STRN C209
AND C210
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
POPBOOL
DUPBOOL
AND C209
OUT Y4
POPBOOL
AND C210
OUT Y5

// Rung HBW_Program#22
// Offset 148
STR ST1
DUPBOOL
STR C211
ANDN C212
STRN C211
AND C212
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
POPBOOL
DUPBOOL
AND C211
OUT Y6
POPBOOL
AND C212
OUT Y7

// Rung HBW_Program#23
// Offset 177
STR C226
JMP HBW_Program.S0

// Rung HBW_Program#24
// Offset 179
STR C213
JMP HBW_Program.S2

// Rung HBW_Program#25
// Offset 181
SG HBW_Program.S2

// Rung HBW_Program#26
// Offset 183
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#27
// Offset 191
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#28
// Offset 193
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#29
// Offset 195
STR ST1
CALL HBW_Home 0x1 DST511 "3" "3"

// Rung HBW_Program#30
// Offset 203
STR X0
AND X11
AND X3
JMP HBW_Program.S3

// Rung HBW_Program#31
// Offset 207
STR C212
JMP HBW_Program.S3

// Rung HBW_Program#32
// Offset 209
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#33
// Offset 211
SG HBW_Program.S3

// Rung HBW_Program#34
// Offset 213
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#35
// Offset 221
STR ST1
CALL HWB_Home_to_11 0x1 DST511 "3" "3"

// Rung HBW_Program#36
// Offset 229
STRN C250
ANDN C251
JMP HBW_Program.S4

// Rung HBW_Program#37
// Offset 232
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#38
// Offset 234
SG HBW_Program.S4

// Rung HBW_Program#39
// Offset 236
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#40
// Offset 244
STR ST1
CALL HBW_PickUp_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#41
// Offset 252
STR X10
ANDN C251
JMP HBW_Program.S5

// Rung HBW_Program#42
// Offset 255
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#43
// Offset 257
NOP

// Rung HBW_Program#44
// Offset 258
SG HBW_Program.S5

// Rung HBW_Program#45
// Offset 260
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#46
// Offset 268
STR ST1
CALL HWB_11_DropOff 0x1 DST511 "3" "3"

// Rung HBW_Program#47
// Offset 276
STRN C251
AND C250
JMP HBW_Program.S6

// Rung HBW_Program#48
// Offset 279
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#49
// Offset 281
SG HBW_Program.S6

// Rung HBW_Program#50
// Offset 283
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#51
// Offset 291
STR ST1
CALL HBW_Send_VGR 0x1 DST511 "3" "3"

// Rung HBW_Program#52
// Offset 299
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#53
// Offset 301
STRN X2
MOVE 1 C298

// Rung HBW_Program#54
// Offset 304
STRN X2
JMP HBW_Program.S7
INC N1

// Rung HBW_Program#55
// Offset 307
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#56
// Offset 309
NOP

// Rung HBW_Program#57
// Offset 310
SG HBW_Program.S7

// Rung HBW_Program#58
// Offset 312
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#59
// Offset 320
STR C300
MOVE 1 C299

// Rung HBW_Program#60
// Offset 323
STR ST1
CALL HBW_Return_VGR 0x1 DST511 "3" "3"

// Rung HBW_Program#61
// Offset 331
STR X11
JMP HBW_Program.S15
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#62
// Offset 340
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#63
// Offset 342
NOP

// Rung HBW_Program#64
// Offset 343
SG HBW_Program.S8

// Rung HBW_Program#65
// Offset 345
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#66
// Offset 353
STR ST1
CALL HBW_Conv_12 0x1 DST511 "3" "3"

// Rung HBW_Program#67
// Offset 361
STR ST1
MOVE 0 C299
MOVE 0 C298

// Rung HBW_Program#68
// Offset 366
STRN C250
JMP HBW_Program.S9

// Rung HBW_Program#69
// Offset 368
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#70
// Offset 370
NOP

// Rung HBW_Program#71
// Offset 371
SG HBW_Program.S9

// Rung HBW_Program#72
// Offset 373
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#73
// Offset 381
STR ST1
CALL HBW_Return_Top 0x1 DST511 "3" "3"

// Rung HBW_Program#74
// Offset 389
STR X10
ANDN C251
JMP HBW_Program.S10
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#75
// Offset 399
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#76
// Offset 401
NOP

// Rung HBW_Program#77
// Offset 402
SG HBW_Program.S10

// Rung HBW_Program#78
// Offset 404
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#79
// Offset 412
STR ST1
CALL HBW_MV_11_12 0x1 DST511 "3" "3"

// Rung HBW_Program#80
// Offset 420
STRN C250
JMP HBW_Program.S11

// Rung HBW_Program#81
// Offset 422
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#82
// Offset 424
NOP

// Rung HBW_Program#83
// Offset 425
SG HBW_Program.S11

// Rung HBW_Program#84
// Offset 427
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#85
// Offset 435
STRE N1 1
CALL HBW_PickUp_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#86
// Offset 446
STRE N1 2
CALL HBW_PickUp_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#87
// Offset 457
STRE N1 3
CALL HBW_Move_R1_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#88
// Offset 468
STRE N1 3
ANDLE 1650 $HBW_Encoder_Z.Acc
JMP HBW_Program.S51

// Rung HBW_Program#89
// Offset 477
STRE N1 4
CALL HBW_PickUp_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#90
// Offset 488
STRE N1 5
CALL HBW_PickUp_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#91
// Offset 499
STRE N1 6
CALL HBW_Move_R2_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#92
// Offset 510
STRE N1 6
ANDLE 3200 $HBW_Encoder_Z.Acc
JMP HBW_Program.S51

// Rung HBW_Program#93
// Offset 519
STRE N1 7
CALL HBW_PickUp_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#94
// Offset 530
STRE N1 8
CALL HBW_PickUp_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#95
// Offset 541
STRE N1 9
JMP HBW_Program.S18

// Rung HBW_Program#96
// Offset 546
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#97
// Offset 548
NOP

// Rung HBW_Program#98
// Offset 549
NOP

// Rung HBW_Program#99
// Offset 550
STR X10
ANDN C251
JMP HBW_Program.S12

// Rung HBW_Program#100
// Offset 553
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#101
// Offset 555
SG HBW_Program.S51

// Rung HBW_Program#102
// Offset 557
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#103
// Offset 565
STRE N1 3
CALL HBW_PickUp_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#104
// Offset 576
STRE N1 6
CALL HBW_PickUp_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#105
// Offset 587
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#106
// Offset 589
STR X10
ANDN C251
JMP HBW_Program.S12

// Rung HBW_Program#107
// Offset 592
SG HBW_Program.S12

// Rung HBW_Program#108
// Offset 594
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#109
// Offset 602
STR ST1
CALL HWB_11_DropOff 0x1 DST511 "3" "3"

// Rung HBW_Program#110
// Offset 610
STRN C251
AND C250
JMP HBW_Program.S13

// Rung HBW_Program#111
// Offset 613
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#112
// Offset 615
SG HBW_Program.S13

// Rung HBW_Program#113
// Offset 617
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#114
// Offset 625
STR ST1
CALL HBW_Send_VGR 0x1 DST511 "3" "3"

// Rung HBW_Program#115
// Offset 633
STRN X2
MOVE 1 C298

// Rung HBW_Program#116
// Offset 636
STR C300
MOVE 1 C299

// Rung HBW_Program#117
// Offset 639
STRN X2
AND C299
JMP HBW_Program.S14
INC N1

// Rung HBW_Program#118
// Offset 643
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#119
// Offset 645
SG HBW_Program.S14

// Rung HBW_Program#120
// Offset 647
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#121
// Offset 655
STR ST1
CALL HBW_Return_VGR 0x1 DST511 "3" "3"

// Rung HBW_Program#122
// Offset 663
STR X11
JMP HBW_Program.S15
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#123
// Offset 672
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#124
// Offset 674
SG HBW_Program.S15

// Rung HBW_Program#125
// Offset 676
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#126
// Offset 684
STR ST1
MOVE 0 C299
MOVE 0 C298

// Rung HBW_Program#127
// Offset 689
STRE N1 1
CALL HBW_Return11 0x1 DST511 "3" "3"

// Rung HBW_Program#128
// Offset 700
STRE N1 2
CALL HBW_Return12 0x1 DST511 "3" "3"

// Rung HBW_Program#129
// Offset 711
STRE N1 3
CALL HBW_Return13 0x1 DST511 "3" "3"

// Rung HBW_Program#130
// Offset 722
STRE N1 4
CALL HBW_Return21 0x1 DST511 "3" "3"

// Rung HBW_Program#131
// Offset 733
STRE N1 5
CALL HBW_Return22 0x1 DST511 "3" "3"

// Rung HBW_Program#132
// Offset 744
STRE N1 6
CALL HBW_Return23 0x1 DST511 "3" "3"

// Rung HBW_Program#133
// Offset 755
STRE N1 7
CALL HBW_Conv_3Row 0x1 DST511 "3" "3"

// Rung HBW_Program#134
// Offset 766
STRE N1 8
CALL HBW_Conv_3Row 0x1 DST511 "3" "3"

// Rung HBW_Program#135
// Offset 777
STRE N1 9
CALL HBW_Conv_3Row 0x1 DST511 "3" "3"

// Rung HBW_Program#136
// Offset 788
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#137
// Offset 790
STRN C251
JMP HBW_Program.S16
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#138
// Offset 799
SG HBW_Program.S16

// Rung HBW_Program#139
// Offset 801
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#140
// Offset 809
STRE N1 1
CALL HBW_Conv11_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#141
// Offset 820
STRE N1 2
CALL HBW_Conv_12_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#142
// Offset 831
STRE N1 3
CALL HBW_Conv13_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#143
// Offset 842
STRE N1 4
CALL HBW_Conv13_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#144
// Offset 853
STRE N1 5
CALL HBW_Conv_12_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#145
// Offset 864
STRE N1 6
CALL HBW_Conv11_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#146
// Offset 875
STRE N1 7
CALL HBW_Conv11_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#147
// Offset 886
STRE N1 8
CALL HBW_Conv_12_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#148
// Offset 897
STRE N1 9
CALL HBW_Conv13_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#149
// Offset 908
NOP

// Rung HBW_Program#150
// Offset 909
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#151
// Offset 911
STRN C250
AND X10
JMP HBW_Program.S17

// Rung HBW_Program#152
// Offset 914
SG HBW_Program.S17

// Rung HBW_Program#153
// Offset 916
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#154
// Offset 924
STRE N1 1
CALL HBW_Retract_12 0x1 DST511 "3" "3"

// Rung HBW_Program#155
// Offset 935
STRE N1 2
CALL HBW_RETRACT_13 0x1 DST511 "3" "3"

// Rung HBW_Program#156
// Offset 946
STRE N1 3
CALL HBW_Retract_23 0x1 DST511 "3" "3"

// Rung HBW_Program#157
// Offset 957
STRE N1 4
CALL HBW_Retract_22 0x1 DST511 "3" "3"

// Rung HBW_Program#158
// Offset 968
STRE N1 5
CALL HBW_Retract_21 0x1 DST511 "3" "3"

// Rung HBW_Program#159
// Offset 979
STRE N1 6
CALL HBW_Retract_21 0x1 DST511 "3" "3"

// Rung HBW_Program#160
// Offset 990
STRE N1 7
CALL HBW_Retract_32 0x1 DST511 "3" "3"

// Rung HBW_Program#161
// Offset 1001
STRE N1 8
CALL HBW_Retract_33 0x1 DST511 "3" "3"

// Rung HBW_Program#162
// Offset 1012
STRE N1 9
CALL HBW_Retract_33 0x1 DST511 "3" "3"

// Rung HBW_Program#163
// Offset 1023
NOP

// Rung HBW_Program#164
// Offset 1024
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#165
// Offset 1026
STR X11
ANDN C251
ANDN C250
JMP HBW_Program.S11

// Rung HBW_Program#166
// Offset 1030
STR X11
ANDE N1 1
JMP HBW_Program.S50

// Rung HBW_Program#167
// Offset 1036
SG HBW_Program.S18

// Rung HBW_Program#168
// Offset 1038
STR ST1
JMP HBW_Program.S0

// Rung HBW_Program#169
// Offset 1040
SG HBW_Program.S50

// Rung HBW_Program#170
// Offset 1042
STR ST1
CALL HBW_Shift_C1C2 0x1 DST511 "3" "3"

// Rung HBW_Program#171
// Offset 1050
STRN Y50
ANDN C250
JMP HBW_Program.S11

// Rung HBW_Program#172
// Offset 1053
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#173
// Offset 1055
NOP

// Rung HBW_Program#174
// Offset 1056
SG HBW_Program.S19

// Rung HBW_Program#175
// Offset 1058
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#176
// Offset 1066
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#177
// Offset 1068
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#178
// Offset 1070
NOP

// Rung HBW_Program#179
// Offset 1071
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#180
// Offset 1073
STR ST1
CALL HBW_Home 0x1 DST511 "3" "3"

// Rung HBW_Program#181
// Offset 1081
STR X0
AND X11
AND X3
JMP HBW_Program.S20

// Rung HBW_Program#182
// Offset 1085
SG HBW_Program.S20

// Rung HBW_Program#183
// Offset 1087
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#184
// Offset 1095
NOP

// Rung HBW_Program#185
// Offset 1096
STRE N2 1
CALL HBW_OneTime_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#186
// Offset 1107
STRE N2 2
CALL HBW_OneTime_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#187
// Offset 1118
STRE N2 3
CALL HBW_OneTime_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#188
// Offset 1129
STRE N2 4
CALL HBW_OneTime_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#189
// Offset 1140
STRE N2 5
CALL HBW_OneTime_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#190
// Offset 1151
STRE N2 6
CALL HBW_OneTime_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#191
// Offset 1162
STRE N2 7
CALL HBW_OneTime_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#192
// Offset 1173
STRE N2 8
CALL HBW_OneTime_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#193
// Offset 1184
STRE N2 9
CALL HBW_OneTime_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#194
// Offset 1195
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#195
// Offset 1197
STRN C251
JMP HBW_Program.S21

// Rung HBW_Program#196
// Offset 1199
SG HBW_Program.S21

// Rung HBW_Program#197
// Offset 1201
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#198
// Offset 1209
NOP

// Rung HBW_Program#199
// Offset 1210
STRE N2 1
CALL HBW_OneTime_C1 0x1 DST511 "3" "3"

// Rung HBW_Program#200
// Offset 1221
STRE N2 2
CALL HBW_OneTime_C2 0x1 DST511 "3" "3"

// Rung HBW_Program#201
// Offset 1232
STRE N2 3
CALL HBW_OneTime_C3 0x1 DST511 "3" "3"

// Rung HBW_Program#202
// Offset 1243
STRE N2 4
CALL HBW_OneTime_C1 0x1 DST511 "3" "3"

// Rung HBW_Program#203
// Offset 1254
STRE N2 5
CALL HBW_OneTime_C2 0x1 DST511 "3" "3"

// Rung HBW_Program#204
// Offset 1265
STRE N2 6
CALL HBW_OneTime_C3 0x1 DST511 "3" "3"

// Rung HBW_Program#205
// Offset 1276
STRE N2 7
CALL HBW_OneTime_C1 0x1 DST511 "3" "3"

// Rung HBW_Program#206
// Offset 1287
STRE N2 8
CALL HBW_OneTime_C2 0x1 DST511 "3" "3"

// Rung HBW_Program#207
// Offset 1298
STRE N2 9
CALL HBW_OneTime_C3 0x1 DST511 "3" "3"

// Rung HBW_Program#208
// Offset 1309
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#209
// Offset 1311
STRN C250
JMP HBW_Program.S22

// Rung HBW_Program#210
// Offset 1313
SG HBW_Program.S22

// Rung HBW_Program#211
// Offset 1315
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#212
// Offset 1323
STRE N2 1
CALL HBW_PickUp_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#213
// Offset 1334
STRE N2 2
CALL HBW_PickUp_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#214
// Offset 1345
STRE N2 3
CALL HBW_PickUp_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#215
// Offset 1356
STRE N2 4
CALL HBW_PickUp_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#216
// Offset 1367
STRE N2 5
CALL HBW_PickUp_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#217
// Offset 1378
STRE N2 6
CALL HBW_PickUp_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#218
// Offset 1389
STRE N2 7
CALL HBW_PickUp_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#219
// Offset 1400
STRE N2 8
CALL HBW_PickUp_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#220
// Offset 1411
STRE N2 9
CALL HBW_PickUp_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#221
// Offset 1422
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#222
// Offset 1424
STRN C251
JMP HBW_Program.S23

// Rung HBW_Program#223
// Offset 1426
SG HBW_Program.S23

// Rung HBW_Program#224
// Offset 1428
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#225
// Offset 1436
STR ST1
CALL HWB_11_DropOff 0x1 DST511 "3" "3"

// Rung HBW_Program#226
// Offset 1444
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#227
// Offset 1446
STRN C251
AND C250
JMP HBW_Program.S24

// Rung HBW_Program#228
// Offset 1449
SG HBW_Program.S24

// Rung HBW_Program#229
// Offset 1451
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#230
// Offset 1459
STR ST1
CALL HBW_Send_VGR 0x1 DST511 "3" "3"

// Rung HBW_Program#231
// Offset 1467
STRN X2
MOVE 1 C298

// Rung HBW_Program#232
// Offset 1470
STRN X2
AND C299
JMP HBW_Program.S25

// Rung HBW_Program#233
// Offset 1473
STR C300
MOVE 1 C299

// Rung HBW_Program#234
// Offset 1476
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#235
// Offset 1478
SG HBW_Program.S25

// Rung HBW_Program#236
// Offset 1480
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#237
// Offset 1488
STR ST1
CALL HBW_Return_VGR 0x1 DST511 "3" "3"

// Rung HBW_Program#238
// Offset 1496
STR X11
JMP HBW_Program.S26
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#239
// Offset 1505
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#240
// Offset 1507
NOP

// Rung HBW_Program#241
// Offset 1508
SG HBW_Program.S26

// Rung HBW_Program#242
// Offset 1510
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#243
// Offset 1518
STR ST1
MOVE 0 C299
MOVE 0 C298

// Rung HBW_Program#244
// Offset 1523
STRE N2 1
CALL HBW_Conv_12 0x1 DST511 "3" "3"

// Rung HBW_Program#245
// Offset 1534
STRE N2 2
CALL HBW_Conv_12 0x1 DST511 "3" "3"

// Rung HBW_Program#246
// Offset 1545
STRE N2 3
CALL HBW_Conv_12 0x1 DST511 "3" "3"

// Rung HBW_Program#247
// Offset 1556
STRE N2 4
CALL HBW_Conv_2Row 0x1 DST511 "3" "3"

// Rung HBW_Program#248
// Offset 1567
STRE N2 5
CALL HBW_Conv_2Row 0x1 DST511 "3" "3"

// Rung HBW_Program#249
// Offset 1578
STRE N2 6
CALL HBW_Conv_2Row 0x1 DST511 "3" "3"

// Rung HBW_Program#250
// Offset 1589
STRE N2 7
CALL HBW_Conv_3Row 0x1 DST511 "3" "3"

// Rung HBW_Program#251
// Offset 1600
STRE N2 8
CALL HBW_Conv_3Row 0x1 DST511 "3" "3"

// Rung HBW_Program#252
// Offset 1611
STRE N2 9
CALL HBW_Conv_3Row 0x1 DST511 "3" "3"

// Rung HBW_Program#253
// Offset 1622
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#254
// Offset 1624
STRN C251
JMP HBW_Program.S27
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#255
// Offset 1633
SG HBW_Program.S27

// Rung HBW_Program#256
// Offset 1635
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#257
// Offset 1643
STRE N2 1
CALL HBW_Conv11_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#258
// Offset 1654
STRE N2 2
CALL HBW_Conv_12_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#259
// Offset 1665
STRE N2 3
CALL HBW_Conv13_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#260
// Offset 1676
STRE N2 4
CALL HBW_Conv11_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#261
// Offset 1687
STRE N2 5
CALL HBW_Conv_12_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#262
// Offset 1698
STRE N2 6
CALL HBW_Conv13_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#263
// Offset 1709
STRE N2 7
CALL HBW_Conv11_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#264
// Offset 1720
STRE N2 8
CALL HBW_Conv_12_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#265
// Offset 1731
STRE N2 9
CALL HBW_Conv13_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#266
// Offset 1742
NOP

// Rung HBW_Program#267
// Offset 1743
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#268
// Offset 1745
STRN C250
AND X10
JMP HBW_Program.S28

// Rung HBW_Program#269
// Offset 1748
SG HBW_Program.S28

// Rung HBW_Program#270
// Offset 1750
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#271
// Offset 1758
STRE N2 1
CALL HBW_OneDropR1 0x1 DST511 "3" "3"

// Rung HBW_Program#272
// Offset 1769
STRE N2 2
CALL HBW_OneDropR1 0x1 DST511 "3" "3"

// Rung HBW_Program#273
// Offset 1780
STRE N2 3
CALL HBW_OneDropR1 0x1 DST511 "3" "3"

// Rung HBW_Program#274
// Offset 1791
STRE N2 4
CALL HBW_OneDropR2 0x1 DST511 "3" "3"

// Rung HBW_Program#275
// Offset 1802
STRE N2 5
CALL HBW_OneDropR2 0x1 DST511 "3" "3"

// Rung HBW_Program#276
// Offset 1813
STRE N2 6
CALL HBW_OneDropR2 0x1 DST511 "3" "3"

// Rung HBW_Program#277
// Offset 1824
STRE N2 7
CALL HBW_OneDropR3 0x1 DST511 "3" "3"

// Rung HBW_Program#278
// Offset 1835
STRE N2 8
CALL HBW_OneDropR3 0x1 DST511 "3" "3"

// Rung HBW_Program#279
// Offset 1846
STRE N2 9
CALL HBW_OneDropR3 0x1 DST511 "3" "3"

// Rung HBW_Program#280
// Offset 1857
STR X11
JMP HBW_Program.S0

// Rung HBW_Program#281
// Offset 1859
STR C215
JMP HBW_Program.S0

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
DUPBOOL
STR C410
ANDN C409
STRN C410
AND C409
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 100
POPBOOL
DUPBOOL
AND C410
OUT Y27
POPBOOL
AND C409
OUT Y26

// Rung VGR_Program#4
// Offset 39
STR ST1
DUPBOOL
STR C408
ANDN C411
STRN C408
AND C411
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
POPBOOL
DUPBOOL
AND C408
OUT Y24
POPBOOL
AND C411
OUT Y25

// Rung VGR_Program#5
// Offset 68
STR ST1
DUPBOOL
STR C406
ANDN C407
STRN C406
AND C407
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 100
POPBOOL
DUPBOOL
AND C406
OUT Y23
POPBOOL
AND C407
OUT Y22

// Rung VGR_Program#6
// Offset 97
STR C452
JMP VGR_Program.S1

// Rung VGR_Program#7
// Offset 99
SG VGR_Program.S1

// Rung VGR_Program#8
// Offset 101
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#9
// Offset 103
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#10
// Offset 111
STRN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 100
OUT Y22

// Rung VGR_Program#11
// Offset 127
STRN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
OUT Y24

// Rung VGR_Program#12
// Offset 143
STRN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 100
OUT Y26

// Rung VGR_Program#13
// Offset 159
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_Program#14
// Offset 161
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_Program#15
// Offset 163
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_Program#16
// Offset 165
STR X25
AND X26
AND X27
JMP VGR_Program.S2

// Rung VGR_Program#17
// Offset 169
SG VGR_Program.S2

// Rung VGR_Program#18
// Offset 171
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#19
// Offset 179
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#20
// Offset 181
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_Program#21
// Offset 183
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_Program#22
// Offset 185
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_Program#23
// Offset 187
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_Program#24
// Offset 189
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_Program#25
// Offset 191
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_Program#26
// Offset 193
STRGE 5340 $VGR_Encoder_Rot.Acc
ANDGE 5360 $VGR_Encoder_Rot.Acc
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 100
OUT Y27

// Rung VGR_Program#27
// Offset 216
STRGE 725 $VGR_Encoder_X.Acc
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
OUT Y25

// Rung VGR_Program#28
// Offset 235
STRN X2
JMP VGR_Program.S3

// Rung VGR_Program#29
// Offset 237
SG VGR_Program.S3

// Rung VGR_Program#30
// Offset 239
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#31
// Offset 247
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#32
// Offset 249
STRGE 600 $VGR_Encoder_Y.Acc
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 100
OUT Y23

// Rung VGR_Program#33
// Offset 268
STRGE $VGR_Encoder_Y.Acc 600
JMP VGR_Program.S4

// Rung VGR_Program#34
// Offset 273
SG VGR_Program.S4

// Rung VGR_Program#35
// Offset 275
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#36
// Offset 283
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#37
// Offset 285
STR ST1
OUT Y28

// Rung VGR_Program#38
// Offset 287
STR Y28
JMP VGR_Program.S5

// Rung VGR_Program#39
// Offset 289
SG VGR_Program.S5

// Rung VGR_Program#40
// Offset 291
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#41
// Offset 299
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#42
// Offset 301
STR ST1
OUT Y28

// Rung VGR_Program#43
// Offset 303
STR ST1
OUT Y29

// Rung VGR_Program#44
// Offset 305
STR Y29
JMP VGR_Program.S6

// Rung VGR_Program#45
// Offset 307
SG VGR_Program.S6

// Rung VGR_Program#46
// Offset 309
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#47
// Offset 317
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#48
// Offset 319
STR ST1
OUT Y28
OUT Y29

// Rung VGR_Program#49
// Offset 322
STRN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 100
OUT Y22

// Rung VGR_Program#50
// Offset 338
STR X25
JMP VGR_Program.S7

// Rung VGR_Program#51
// Offset 340
SG VGR_Program.S7

// Rung VGR_Program#52
// Offset 342
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#53
// Offset 350
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#54
// Offset 352
STR ST1
OUT Y28
OUT Y29

// Rung VGR_Program#55
// Offset 355
STR ST1
MOVE 1 C299

// Rung VGR_Program#56
// Offset 358
STRN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
OUT Y24

// Rung VGR_Program#57
// Offset 374
STR X26
JMP VGR_Program.S8

// Rung VGR_Program#58
// Offset 376
SG VGR_Program.S8

// Rung VGR_Program#59
// Offset 378
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#60
// Offset 386
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#61
// Offset 388
STR ST1
OUT Y28
OUT Y29

// Rung VGR_Program#62
// Offset 391
STRN X27
ANDGE $VGR_Encoder_Rot.Acc 3573
ANDGE $VGR_Encoder_Rot.Acc 3564
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 100
OUT Y26

// Rung VGR_Program#63
// Offset 415
STRGE 3404 $VGR_Encoder_X.Acc
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
OUT Y25

// Rung VGR_Program#64
// Offset 434
STRGE $VGR_Encoder_X.Acc 3404
JMP VGR_Program.S9

// Rung VGR_Program#65
// Offset 439
SG VGR_Program.S9

// Rung VGR_Program#66
// Offset 441
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#67
// Offset 449
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#68
// Offset 451
STR ST1
OUT Y28
OUT Y29

// Rung VGR_Program#69
// Offset 454
STRGE 2026 $VGR_Encoder_Y.Acc
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 100
OUT Y23

// Rung VGR_Program#70
// Offset 473
STRGE $VGR_Encoder_Y.Acc 2026
JMP VGR_Program.S10

// Rung VGR_Program#71
// Offset 478
SG VGR_Program.S10

// Rung VGR_Program#72
// Offset 480
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#73
// Offset 488
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#74
// Offset 490
STR ST2
OUT Y29

// Rung VGR_Program#75
// Offset 492
STRN X25
ANDN Y29
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 100
OUT Y22

// Rung VGR_Program#76
// Offset 509
STRN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
OUT Y24

// Rung VGR_Program#77
// Offset 525
STR ST2
JMP VGR_Program.S11

// Rung VGR_Program#78
// Offset 527
STR X25
AND X26
JMP VGR_Program.S2

// Rung VGR_Program#79
// Offset 530
SG VGR_Program.S11

// Rung VGR_Program#80
// Offset 532
STRN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 100
OUT Y22

// Rung VGR_Program#81
// Offset 548
STRN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
OUT Y24

// Rung VGR_Program#82
// Offset 564
STRN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 100
OUT Y26

// Rung VGR_Program#83
// Offset 580
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_Program#84
// Offset 582
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_Program#85
// Offset 584
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_Program#86
// Offset 586
STR ST1
MOVE 1 C700

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
STR C813
OUT Y18

// Rung MPO_Program#4
// Offset 12
STR C810
OUT Y17

// Rung MPO_Program#5
// Offset 14
STR C811
OUT Y52

// Rung MPO_Program#6
// Offset 16
STR ST1
DUPBOOL
STR C804
ANDN C805
STR C805
ANDN C804
ORSTR
ANDSTR
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 100
POPBOOL
DUPBOOL
AND C804
OUT Y53
POPBOOL
AND C805
OUT Y15

// Rung MPO_Program#7
// Offset 45
STR C814
OUT Y19

// Rung MPO_Program#8
// Offset 47
STR C809
JMP MPO_Program.S1

// Rung MPO_Program#9
// Offset 49
SG MPO_Program.S1

// Rung MPO_Program#10
// Offset 51
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#11
// Offset 59
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#12
// Offset 61
STR X24
RST C1199

// Rung MPO_Program#13
// Offset 63
STRN X24
SET Y17

// Rung MPO_Program#14
// Offset 65
STR Y17
OUT Y20
ANDN X17
ONDTMR T105 3000 Y44

// Rung MPO_Program#15
// Offset 71
STR X17
JMP MPO_Program.S10

// Rung MPO_Program#16
// Offset 73
SG MPO_Program.S10

// Rung MPO_Program#17
// Offset 75
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#18
// Offset 83
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#19
// Offset 85
STR X17
RST Y20

// Rung MPO_Program#20
// Offset 87
STR X17
ONDTMR T106 2000 Y16

// Rung MPO_Program#21
// Offset 91
STR T106.Done
JMP MPO_Program.S11

// Rung MPO_Program#22
// Offset 93
SG MPO_Program.S11

// Rung MPO_Program#23
// Offset 95
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#24
// Offset 103
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#25
// Offset 105
STRN X18
OUT Y52

// Rung MPO_Program#26
// Offset 107
STR X18
RST Y20

// Rung MPO_Program#27
// Offset 109
STR X18
RST Y16

// Rung MPO_Program#28
// Offset 111
STRN Y16
ONDTMR T107 1000 C819

// Rung MPO_Program#29
// Offset 115
STR C819
JMP MPO_Program.S2

// Rung MPO_Program#30
// Offset 117
SG MPO_Program.S2

// Rung MPO_Program#31
// Offset 119
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#32
// Offset 127
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#33
// Offset 129
NOP

// Rung MPO_Program#34
// Offset 130
STRN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y53

// Rung MPO_Program#35
// Offset 146
STR X19
JMP MPO_Program.S3

// Rung MPO_Program#36
// Offset 148
SG MPO_Program.S3

// Rung MPO_Program#37
// Offset 150
STR ST1
SET Y17

// Rung MPO_Program#38
// Offset 152
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#39
// Offset 160
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#40
// Offset 162
STR X19
SET Y19

// Rung MPO_Program#41
// Offset 164
STR X19
ONDTMR T100 1000 Y18

// Rung MPO_Program#42
// Offset 168
STR T100.DN
JMP MPO_Program.S4

// Rung MPO_Program#43
// Offset 170
SG MPO_Program.S4

// Rung MPO_Program#44
// Offset 172
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#45
// Offset 180
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#46
// Offset 182
STR X19
RST Y19

// Rung MPO_Program#47
// Offset 184
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y15

// Rung MPO_Program#48
// Offset 200
STR X16
JMP MPO_Program.S5

// Rung MPO_Program#49
// Offset 202
SG MPO_Program.S5

// Rung MPO_Program#50
// Offset 204
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#51
// Offset 212
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#52
// Offset 214
STR X16
SET Y19

// Rung MPO_Program#53
// Offset 216
STR Y19
ONDTMR T101 1000 C815

// Rung MPO_Program#54
// Offset 220
STR C815
RST Y18

// Rung MPO_Program#55
// Offset 222
STRN Y18
ONDTMR T110 1000 C830

// Rung MPO_Program#56
// Offset 226
STR C830
JMP MPO_Program.S6

// Rung MPO_Program#57
// Offset 228
SG MPO_Program.S6

// Rung MPO_Program#58
// Offset 230
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#59
// Offset 238
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#60
// Offset 240
STR X16
RST Y19

// Rung MPO_Program#61
// Offset 242
STRN Y19
ONDTMR T102 1000 C818

// Rung MPO_Program#62
// Offset 246
STR C818
JMP MPO_Program.S7

// Rung MPO_Program#63
// Offset 248
SG MPO_Program.S7

// Rung MPO_Program#64
// Offset 250
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#65
// Offset 258
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#66
// Offset 260
STRN X15
OUT Y45

// Rung MPO_Program#67
// Offset 262
STR X15
TMRDOWN T102 1000
OUT Y43

// Rung MPO_Program#68
// Offset 266
STR T102.Done
JMP MPO_Program.S8

// Rung MPO_Program#69
// Offset 268
SG MPO_Program.S8

// Rung MPO_Program#70
// Offset 270
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#71
// Offset 278
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#72
// Offset 280
STRN X13
OUT Y45

// Rung MPO_Program#73
// Offset 282
STR X13
TMRDOWN T103 1000
OUT Y21

// Rung MPO_Program#74
// Offset 286
STR T103.Done
JMP MPO_Program.S9

// Rung MPO_Program#75
// Offset 288
SG MPO_Program.S9

// Rung MPO_Program#76
// Offset 290
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#77
// Offset 298
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#78
// Offset 300
STRN X12
ONDTMR T104 1000 Y46

// Rung MPO_Program#79
// Offset 304
STR ST1
OUT Y47

// Rung MPO_Program#80
// Offset 306
STR X12
JMP MPO_Program.S12

// Rung MPO_Program#81
// Offset 308
SG MPO_Program.S12

// Rung MPO_Program#82
// Offset 310
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#83
// Offset 318
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#84
// Offset 320
STR X12
RST Y17

// Rung MPO_Program#85
// Offset 322
STRN Y17
JMP MPO_Program.S1

// Rung MPO_Program#86
// Offset 324
STRN X14
SET C1199

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#3
// Offset 10
STR C1600
OUT Y30

// Rung SLD_Program#4
// Offset 12
STR C1601
OUT Y31

// Rung SLD_Program#5
// Offset 14
STR C1602
OUT Y32

// Rung SLD_Program#6
// Offset 16
STR C1603
OUT Y33

// Rung SLD_Program#7
// Offset 18
STR C1604
OUT Y34

// Rung SLD_Program#8
// Offset 20
STR C1605
JMP SLD_Program.S1

// Rung SLD_Program#9
// Offset 22
SG SLD_Program.S1

// Rung SLD_Program#10
// Offset 24
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#11
// Offset 32
STRN C1605
JMP SLD_Program.S0

// Rung SLD_Program#12
// Offset 34
STRN X35
OFFDTMR T200 1750 C1651

// Rung SLD_Program#13
// Offset 38
STR C1651
OUT Y30

// Rung SLD_Program#14
// Offset 40
STRGE T200.Acc 1750
FLASHER 500 500 Y899

// Rung SLD_Program#15
// Offset 48
SG SLD_Program.S2

// Rung SLD_Program#16
// Offset 50
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#17
// Offset 58
STRN C1605
JMP SLD_Program.S0

// Rung SLD_Program#18
// Offset 60
STR ST1
SGSET SLD_Program.S3

// Rung SLD_Program#19
// Offset 62
SG SLD_Program.S3

// Rung SLD_Program#20
// Offset 64
STR C1610
OUT Y30

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STR C1200
OUT Y39

// Rung SSC_Program#4
// Offset 12
STR C1201
OUT Y40

// Rung SSC_Program#5
// Offset 14
STR C1202
OUT Y41

// Rung SSC_Program#6
// Offset 16
STR C1215
PWMOUT @ssc_vertical $ssc_vertical Y11 500 100
OUT Y35

// Rung SSC_Program#7
// Offset 32
STR C1216
PWMOUT @ssc_vertical $ssc_vertical Y11 500 100
OUT Y36

// Rung SSC_Program#8
// Offset 48
STR C1217
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y37

// Rung SSC_Program#9
// Offset 64
STR C1218
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y38

// Rung SSC_Program#10
// Offset 80
STR ST2
ANDPD X47
ANDPDPF
STR ST2
AND CT150.Done
CNT CT150 100

// Rung SSC_Program#11
// Offset 88
STR C1203
JMP SSC_Program.S1

// Rung SSC_Program#12
// Offset 90
SG SSC_Program.S1

// Rung SSC_Program#13
// Offset 92
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#14
// Offset 100
STRN C1203
JMP SSC_Program.S0

// Rung SSC_Program#15
// Offset 102
STRN X41
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y37

// Rung SSC_Program#16
// Offset 118
STRN X40
PWMOUT @ssc_vertical $ssc_vertical Y11 60 100
OUT Y36

// Rung SSC_Program#17
// Offset 134
STR X40
AND X41
JMP SSC_Program.S2

// Rung SSC_Program#18
// Offset 137
SG SSC_Program.S2

// Rung SSC_Program#19
// Offset 139
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#20
// Offset 147
STRN C1203
JMP SSC_Program.S0

// Rung SSC_Program#21
// Offset 149
STR X44
ANDPDPF
STR ST2
CNT CT150 300

// Rung SSC_Program#22
// Offset 154
STRN CT150.Done
PWMOUT @ssc_vertical $ssc_vertical Y11 60 100
OUT Y35

// Rung SSC_Program#23
// Offset 170
STR X46
STR ST2
CNT CT151 1300

// Rung SSC_Program#24
// Offset 174
STRN CT151.Done
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y38

// Rung SSC_Program#25
// Offset 190
STR CT150.Done
AND CT151.Done
JMP SSC_Program.S3

// Rung SSC_Program#26
// Offset 193
SG SSC_Program.S3

// Rung SSC_Program#27
// Offset 195
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#28
// Offset 203
STRN C1203
JMP SSC_Program.S0

// Rung SSC_Program#29
// Offset 205
STR X46
STR ST2
CNT CT152 300

// Rung SSC_Program#30
// Offset 209
STRN CT152.Done
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y37

// Rung SSC_Program#31
// Offset 225
STR CT152.Done
JMP SSC_Program.S4

// Rung SSC_Program#32
// Offset 227
SG SSC_Program.S4

// Rung SSC_Program#33
// Offset 229
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#34
// Offset 237
STRN C1203
JMP SSC_Program.S0

// Rung SSC_Program#35
// Offset 239
STR X46
STR ST2
CNT CT153 135

// Rung SSC_Program#36
// Offset 243
STRN CT153.Done
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y37

// Rung SSC_Program#37
// Offset 259
STR X44
STR ST2
CNT CT154 210

// Rung SSC_Program#38
// Offset 263
STRN CT154.Done
PWMOUT @ssc_vertical $ssc_vertical Y11 60 100
OUT Y36

// Rung SSC_Program#39
// Offset 279
STR CT153.Done
AND CT154.Done
JMP SSC_Program.S5

// Rung SSC_Program#40
// Offset 282
SG SSC_Program.S5

// Rung SSC_Program#41
// Offset 284
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#42
// Offset 292
STRN C1203
JMP SSC_Program.S0

// Rung SSC_Program#43
// Offset 294
STR X46
STR ST2
CNT CT155 1100

// Rung SSC_Program#44
// Offset 298
STRN CT155.Done
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y37

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block hunt_exp_light
$PRGRM hunt_exp_light

// Rung hunt_exp_light#1
// Offset 0
STR ST2
COPY 0x1 "4 0x0 MC402 Y39 1"

// End of Code Block hunt_exp_light
$PGMEND hunt_exp_light

// Beginning of Code Block HWB_PickUp
$TSK HWB_PickUp

// Rung HWB_PickUp#1
// Offset 0
NOP

// End of Code Block HWB_PickUp
$TSKEND HWB_PickUp

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C1","copy","",""
"C11","C11_Interlock","","Used to delay logic by one scan"
"C12","C12_Interlock_2","","Used to delay logic by one scan"
"C20","HBW_Has_Pallet","","True when carrying a pallet"
"C51","X_Direction","","True: Left False: Right"
"C52","Z_Direction","","True: Down False: Up"
"C80","Conveyor_Timeout","","Bit high when Conveyor Timeout timer active"
"C90","HBW_XY_PID_EN","","Enables PID control in HBW_Move_XZ"
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C150","HBW_MoveComplete","","HBW_Move_XZ completion interlock."
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"C182","Fault_X_Target","","Active when X target out of range"
"C183","Fault_Z_target","","Active when Z target out of range"
"C400","VGR_T0","",""
"C410","VGR_T1","",""
"C420","VGR_T2","",""
"C430","VGR_T3","",""
"C440","VGR_T4","",""
"C500","VGR_Man_Control","",""
"C799","VGR_RESET","",""
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"V801","VGR_Fault_Code","",""
"N810","VGR_Rot_Target","",""
"N811","VGR_X_Target","",""
"N812","VGR_Y_Target","",""
"D0","MC","",""
"D1","Feeder_Extend","",""
"D140","X_Start_Position","","Distance to target"
"D142","Y_Start_Position","","Distance to target"
"D143","HBW_PWM_Cur_X","","PWM value for X for XZ movement task"
"D144","HBW_PWM_Cur_Z","","PWM value for Z for XZ movement task"
"T3","T_HBW_S6","",""
"T4","T_Conveyor_Timer","","Used to detect conveyor faults"
"MPO_Program.S2","Vaccum_MO","",""
"MPO_Program.S3","Vaccum","",""
"MPO_Program.S4","Vacumm_MO","",""
"MPO_Program.S5","Vaccum_Load","",""
"US0","_CP_Strogram_A","","CP_State_Program"
"US1","_VGR_Movement","","VGR_Movement"
"US2","_SSC_Check_InOut","","SSC_Check_InOut"
"UB0","_VGR_MisScan_A","","VGR_Movement.Done ThisScan"
#END

