// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\DLChe\ui_cda_mini_factory_fa23\fa23_plc.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
c4486a122bd9c31559b7b7dfd171711421427384b5c533a13b4b0aebcddad529570a5bfe802bcbf8
bf334d42e2f3da9aa35e5909c3ede550d1483bcf7cf793f35cf06630c3f84fa06dd540b56bd4d2d6
f2770cf4ef657db0ebedd10b9686f09452017b272f2a70ff9eaea54bab4a597204834fc6735e67b6
f52610d31eccdb71a783976b014511df4954a08159d75008e24457210cead0d95e83f2811ea870dd
4572b9e4b2bb13d5551f1df03f88b12cc883b5ab8c18ed1468787cc89dcad3cef21023c7ea7e4584
b085c10b6e7e54eb745399c07b20b14ec2e7b3549f7a27ca5d1448423fec333da88920b557545192
271c7b62a3dd1898e68a81449a56f6025fb2423385fdabd546265cf9f447e7776702abeb9967cb7d
14d92c1b847c4e5a312c7320794df93cf6357a31edba0201a013913f12dba8bef191296e973e7e88
7569bad38ea2525c5c3fe0f52d1a964f0fd250cc3b45fae32e04e5de0e3b9fa59e336408810fb08a
ac133909ae7816f7f084e7c943dc7c16b45c3ba0149644a49c12597bcbb49a1a67be482dab4363fd
75bff87dc2e51681eaae62d7f23c85cbc7e94d00b0a0629e1fe5acaeb0899d3c9aa75971acf9f95d
ecb5e99163b466de6fdb4aaf8b37bff112b340f2b9c4caebcfd05e691f4a7055c9c14626f0df89f9
5eaa73888b41d04c2086ba2b200c16848bb7393dc1cd540599597ddada34ed223a7496b738a4135d
f53c05f9eca7baa080829a277adf65128eb5b5fe47d16cb4659e50becc28e31023d60ef42889e2dc
79fbe2ee2cd48a66f42c9f1da1df7f2593a4ceebe5c7a26847aab7d596ea8c980d044a3ac310173a
8835550535f1879fb521876ec5e8907bf74e688068d9b093cf6a93d2ea3b34c88360efb4b1084271
f6204b488545fa6bf393bc9b9e04a7cb162fb890cdd0231eb1363a9185f22d6312b9a2d1d0fd9bdb
02e373686acca05cd38675b2207eb28269a7ccd3e908b681bc7c5af30a261ab76dc4a867412a1e16
9489d09f0a066c303473accb5d4bfa39571ffaaf8294f9a0178419720b250cd59b618250ea3a8167
3314050a2d9f95dbc349ab2f6bc5456abc93e6c9e29870be5b041c985a262017baf7baba32fac71c
2eafb702bde91eadeacae5fee5b11fc73686492e9382044f3e1c339b03a9cd8ded8c3b668609386b
0bb7c808f482ed358c96679b4cbd658cd51225a59e1ba6869fdf07457968e5fc18456c350a470acb
83e3aa58aae973cf36837ccaa0d869c083385343205460ade31e5dc9e653cee0916926a284fefd4f
b431e72335492b313b4a35186ae439b7503497cfda123c51dc6ac7ae276a6eb42bc1730f8c3e9945
e1ad30bf983a63115203d09df46f210225915a6fa204e211ee01f925bad1fb3848a637516c79b956
d6d29c575bd67cdd3ed87720c404527eff3b357969f726def652b7a9d7ffe508c983bddbf1ecf54c
c393f3ba210c77b98facbb131356fb6f2afd6b0860d5d28c373b12ea2e8be32f12ad11f0b07dba2e
45fa08c45dcf56c0c2e8046b7023d8b0126054b2577d825d729a359ae1bfaa4052e4f8cecf3b64ee
b479a6d41abb7416754e23358035fd5e22fc992441996996e4501c24565091ae1aef465ca7c20b49
9ca1dc9124e940f8df429ad69fec1ad0c5f3cd5c9a24aeebe3e74b1e4892fe517ef2b8ffd38cd3aa
a42d60eb19f6a83061ac0470845badf571d31ce0aedc4f0a479b7791763281b9adb0de0f9aad4e28
8f375b956369a58110deffad4979cbe9a07c84c98b8b3de9157af46b9681c274577edd50962da8b3
f73cb53a289f7f11b000e69c42339809c149eaf192b8dea370c4d66181ef49f91f65bbca61f655c8
bde417b88feed1ba447cc09661e13eabacd308872915593270c4f1c08a85f7529520bf59ea1cf52b
f17e6067f11fd9f619dbcdce0b52d14d58501ad216811eb9f26aa5db67627966c055a744b5da699e
f5307e2f2e56a1eecfe2fca3fdbd02249b4bb9ea1d846df0bc1168ff754e221106c157621ce11d5f
6d00c8f22fd2920eb4436439dd17fd3bc157e68161ae7e92b36c30629e7dfd36a4a2b117dc2a7278
38c2e5cfc88eed3119f68c8fdf7277cde466fc807abfc54a25adbebd412cee31bbc25e17593dd994
dd99c38d593e8b2ccf1545314ee32484f4713fd6a13e25c939ab7f697e007e62fd921491763554d1
9f15758beae0956106f0e34ffa4ac0ddf4b16a8989a1462d6338267002f2b32bd90250df9437a6c4
2bc3331fda54be205f237611fb800d31fa29b1c7adb849ff74c0f8933b68176f8961d71480345fe0
d3007bf764630588b5c3f5f3d3f8aa728b0dd3eb732979630427a67c15542ebbf7f43367e1885e8a
10bfca7872d6cae0ebcc38494f388b8bfdae45b4184bfb0b910a292db9770de3b5a40a7f75aec8d9
3641bf9e5a40cb13a4f19f24424620012dc94a5ac577f45ebcb79b5994bd6548e7d32720645d1ae1
dfd562a25026e3f8402e585f30ee2ebbc7b06fe433c76630aac3ae4a2ec174553aa98a6def497204
b2a7bb2f63ec256ca7ca19ad2175b64cf9d3625d407c5580424861752037bc6ac048f6874592c1de
a56378f2135e6b4138ccd5c39a53cce5a5ddd023356c837bbb6119415169b42c3518e36e72cf86de
0e4aa8d9e53543ebc3c6dde0fb1a1d1f84b10ce2d0851477bcd0b339a1306352cd5a05ad9202182f
8ca3b5fe9d94d8e3a759b182d011e9b94c0942edb3fc97aec35a1bc70f16063756ea051f50b5fec6
1c4ec6fa772d5e5fe700e695baa74435c4c1754581845a4d9f289472e5a91781767e950c0487e709
31c8fd155ca2de5fe997e24a935faf9de3e99da4d7f1a2b88c0b6871b42ce635feeea5bb27b13a48
097d4a7251c22d8b735fe91da6be702de7d59bcc76a3f5b4bfa4e4b872fe398545dc9b243237b6c7
711451ecf3636096f017dd21e8c4683b90e9a949ac31a849ff9d68ef92426801b4cf28ce73f083e9
277fd7727dc2a6f8f78f1bb4cf53ab0eefac1f8dd9bb31c4345f63706e367a586f7d48a4da715917
e8ab5ee0a9e94481708fcdfaf5ce73ddf02e61869ad28ca65158c6d4abd605d4fa7c6a5362894a5e
e94581c8ce03e4ea5568f52f3d6d7406e815cf7e1d7c2c92ec3dde60c1562459049de94cb94e4d3b
5d717aaa0305dada2d8f5d7dbf2648f8bd1043267cc39072403341a480c55bb40215dcdccaac8276
1c6e3b3c7609f382bce8f669842e122985f75d6858828ed0ad71fd638346da43d1da2465a61cc893
3ea6a93357dcf7319fe5bc8acb82f987709b8bc0c0d1aab9c0c980fa2958bcfe1cf0796f5ae3f664
573b007dafeae3a20c786c766316bb1153a43c2c7c3cadb21c324902c1b0ae25d379b94730f2e5b6
45fca37726f1d69beb59c6ac47fe212a0a72c4fcc9ff92ee1416385e775d5a1c7fda1ac6f0e6f34f
b7dc7269d92ff7a872f2ac717630fa0077836878f778a631b77f9b272ed07d2bd22f179ece0a1a48
7287f7e6147f918bbbbd0dfebf2eaef4b42d66b5a738979f89f30d355d5cf1379ff586c79fc1c423
16e208b12e16a6307b6934c10adcb89842227ea34552c0df3ac987f4b5ef617de8480cae9d83dbdc
de28af1ffba259e883efd8540c16a0de1564e68c0eb1ea1fcc6c3bde15142612e1cbffd1522db6a4
3b946c7a08a7605189228a94cf6b261cbbb28c83b2ab05e349d1ffb7e1feed21d878fc8f5f854825
7acc68b4066c1f5e1e4025c2f7032990979d78d9e5e4cd091481be2fdc04d20f102ff1e3e3ba73c1
bac5c6af2b63833fb2cbdce6a02c8159d61f3813d225e1aef6766b91afe76e419f05f238b36bbdd8
1c6e8e4c4fc765d5f4e7a3f2ad853ae571c1a88b4576874be8c970e62d2b020e3f268876dc364b76
53fba8f7969c834b97b7e605ef711e5c78766c8b14d4c39e0d953621c56f3ab210a0fdaea9f8a78f
5087bd7e4412af372799c356b312eee2518aef2b59a96bdcf2baecfba8877fdf5b08df88402d7244
e44c0036600d7598882cd9aaffcb95cfd52d8885d863fb584f904a5a9ee99478ee3105b0cbddcddb
0ffc28d9d6fbfab8c1d3d386d5908d3774a030294496e0821084f58875cb6a78b487c48daa4824c5
7aa43ec9038870695841ef3993341a5204d380479119a678561fa933eeb9e89d7c87ff38976e0593
c44ff9efdde1beb7d58184aec3916eb3691991c719fcc3df2c5abb2ae417f969cd48d0dee6427aba
c7575daeb607a07004ff27db6e6036a8c2d128bca3a6e7ca226712bf1c2819100680ec0e0d7f9f8f
a390feeb57ad16eab865d61fcbb1d095ddcdce6ac01b287c7d2dc6a977f6b612a1ab9969dddd588b
ab3dccfff6c7f38804a4d523bb8f4ec13d59341870269bb842b09014bfe938c007322a8e12251600
6d193702aaa1698eafedcc1f60627bf99c2c9da8e1df8918d31e687d896b928e829864c1c09d8c45
b3d7bf252e41375d4fba73f4c753916223211450cfddc9705f6a2409706d8814b5a342151a94eb62
c5d9add93a332c298e653fa1b29908479f3e0b091f815c3a76b8cbd4297d02a5185026db2b149ea1
80514dcb8c456e72d2da0e8cca0c117c030eb577ebc7a4c1f1aad582bcf308cfff7af43f618864cd
ad0b6d30bc408ff436758a5b1a45942346f3c9cd3db88d70b738723e8f93c8df363905035aa4ed88
1dc81646bf180ed5d1602212de3b59a4dcb67802fb65d11ee7d7d0bc98c8aa2afcdc1a16b643214a
84fe9082b88c9ad4d67d50a7da08af92809bfe2f1a931f9817cd7b5fd8dda34a1e658afe4c3bacb8
b57f8682166cfcca15553c9e34779ce5a410d324b7a36e0567251b714899d4781aca243c92394118
4dfa4f9e9627c559218c032d4c9e7c2596d0b626b59081a72ab494082f78ce87edd63dfd92e8ec2e
d33f16f283d03e2d66ac2a8ae226fafdffc5632359eaabbea0bd181fb989de692a21ee494a90a6ce
bdb784aa28ff135d808765812edc1c0bc46338e2d4bc7f4a44837494f5ef9d20f826dafab7e87e1e
b2e6272f3f8e049ec75daa3202be078cdddb563159b5e17e116551ccf3c520bb14f3aaa33892a276
8494e51e31b6937079cfa01bcbc82a4afe1b4e7778cf30663750840288fc0825528a49b02cae752b
2e457b01986dbc636c66f88f1b63d87e06959c658ba273da07db9b4816e02408cba0be3bf3989b7d
7a3a5e06140ccc08cb1b7e02cf4c8e313b0878ce941e00a53fc4a2738032fe7ec6ff4d0084e8a34c
6dc0a390bcc74991cee78eac291952fdcecafff88af65036cd28aeb547c43b8db18cab6db3f3e1d0
c62a2c9dc734ce2f2547223527a866f32ef3468e804e133d2428514f2caeeaf5d2e7294e619f4055
88adf9309050056803782b466c917215f9f23f1a8224beabe5f0aa7e6ed22e0382104f44735d65ff
43b9d0f6aa64f895b363c7693491299136425f0f12fd991b7fa9d3f27faa6cb2d2709e506777d01c
b409c4e5844b1ccc92388ef0b0e389553add64e36fb1860b934553c81dbc12f9909e89c59a32d254
73a4a9543d46c4f23d46c951712885ad08225190a847efff089d8bb40ded00bda778ad5bcab96832
d2542e023d453ad0c340d3cd0386ce3098478c809715bf1456dad71a7c255cce0d9d56f478e32ce0
f7d9da87a4042a9f5b9458ded4d304c089aae02e93720c7130f7374943f51eb84430a68fd01966b8
4dc3f0ee5395f21ebe8383bf9dc3fc2c9d598a62c85f64bd097fba8c8f2e0baa17a1379ef994c507
5301e250129000c687ba683c3c0fdc525cc4b2ef049bce5b3311049513d3dcb6e9adf05c5f42ef2e
452560635ec99be8b8675efa91d2f6d99953e65d5d4c6516c2a61ea3869ceebbfa62a39f4e690ebc
8961e817dc9abb7b8068d83b3b03778402db5ecbb17b08da04da7451fbb771bd77119ac05be44206
53fd10cf5a70640071e2c4bbf85c353f0346916fcca55471baf5b610e4aa3adad6e8b368d4890a19
b3c4d60799d9e48a840ee677680919c0379ad1a645b999af4f056a7eac7ea98f575bb220cd475af3
0193471ef0faa4b8be1ab0d18bd83bdf08495574962aa5bbf3a39d9ef444caf9e8e417dacb0b3a0a
55a21b4331d20b2478a50b59950dd04e9eb347baae3928483bd60d40e57b08579646c5b06bf3e90c
4f1ab2efaa7af87a842aea7d13d5a9c1e93156b916d631ad0ec5c0e2a3ad88224a1da8482d2fa3de
612c8b82d6c3221e61e15f36732f03d78224f0b1de40ce93fff196ebe79a1000b7eda947fad893b6
bf6fac39c8e68742bbe794a5ec9dbfbf7a1fbc5791c431ab7c95c6fef07b9342ba40175e2328e37c
c00924f51d9af163e39cb90685b563b3096da996b0edf1a6e9197c2eeddb3e02528ee0594c42e535
e5cef856ca5f620eb0153a5d2bb5831ef3d3caeac05ebaed4e05597b3efa2632ea25cc3ff98e9b7e
06fc763549ce8b3725002a8b5cfb1bb7354a5eae6214dd08b222c97391aacb6ba1908657b63fc230
5fae0af31564ed4833073bdd53b9a9b287f5f02d4afcec44aa7f9a2598f6249fe79b0995df1d1c77
660470630f038c3dacad250ebb006a8c7749976cbe0ce9c2827a350b0092519738164fcb93bf2cb0
fb32f00c4c378e7d1968ba469b86ba7365505d84c8917aff5cdaae6828ea5e8599e3ee5e221da47b
95aad1db2260ed41102b1d0f8bf23762dddc5a19b7b3dfc246ff20311bf0bbb75eb4fdb2a66913ee
a0b1d3bf99415a061431cabb3595b4d8734b9b6829d2639af34063bc25a341d8cf346f225de18c9c
8112a5e654b11d9f6054d0b67c5bed4a67922ce7d00abbbd3195e306a1dc60a9e9287cd5c305141d
fe6c2e56944933d32f8ce69cc69b7d35fdec9622832eac53b1195f9fb80e1934c1d7ad05ced7c9ec
a331ade80a18a42bdbdd47cc24333793a50b17b5a184cd587653006f216243559e113d0672c9b9d0
8e626c6113585a632bc72f25dc5e1b52d8ddf2b77d90435c683c3623ce78139a4d9d7437a2220a51
1b59cc8f380ee8f6d4db6e736ab2e7e98cb22b0b1023f36c9141d39e14d39d49d0f9b7cbed1cf4de
36b4e56d15e38ba954b426f2a211a10a3e1171f151212c47328c24975cdc3be88fff7f9db6032202
37f8d7ee9cf72e8e3c5afac46a99d193cee73dd85318c77e27758ce60854428d22eb34a739844003
13a58627e1ba05150ea3d2f841f63b1ebf7fb162c6b848f3419095ae51280130b14fafbcdef73a16
86a1451735e68a6552199df8b4927f11d6a8ca71978db14cd7143a219358caa9edbfd23a7958a6ee
b00c812b5034fd392ad91426f4c3b526e2412a0154521eb07ef8c2e2726501d9269ea2038a9fbc9e
535fcdd6a512f63b530de4b6e87f180cc362d421970acff6d1aecce5e0f2f1394d1effaca627a1fc
3fbc63d328c3398e2b77e41d612db089b08c93e8425f01de10758cfebb10d567e4270133cb41596c
1ccd052b663d78612b4f718940a4f358359c87b8b47760a36f810f30d9982a58ba3a3361c4546888
417212eb4c0aeceb7003674329ff564dbb8e8b223a1af254972449a994f2718c09d942599c491141
65247be748f730c9b3015f8b99e4a134ad0d8ff1223d2269c1a6543bdcfbcafff0bc3a15e9a20922
9c96c6e22b010deaef50785fb39f52591bde245ab7f0d20d520b9c156ceb1c971ec32e401a4ec356
ada6a83c5139bf897c32cb38778e3741d29f1bcf91b5f1d4c157ebfef30308ec79828987137e1629
4ffd7f08e6fc6afe452ac3508f887a1597406fd6872670bc3f8700296e777fa5940f4c4c8a155a43
4fe90af0b61ad688c937a6e9dc2e2d04b8477a18a256eaebf129361f5aab69d9966752ed669e6cd6
110a7e003acf4f174e8eec337c8ccb367864ac2ff80efbad253a79f985500400c6dd4eb862d41c56
e17ecc60a54d26cd698442d68f9608467efdf2c7586110a0297acd817fd2fba6e428ced2f3eacb30
1e0d849fdba2044516626492248c83df6a176364b173f44a621a3a6d320d0ee043ec36c49018b8cc
e205f4e4c185e17ae26993d9c9ba8d0622c52c5a850407fdcb5dd5d9300c1c741eab3367475c9846
8abbf0aced2dc9b5e4f7e06944d024fbd06bde670bc1544407ec8dcddfa4141aa72a6c72aa66e00a
c968014c5cc4052575b8b69ce05bcad951ac50e0f58c857b58b45b512f8960a10ccbecf625765993
a4323b42cfc0dd3a36cf0fc12603b14ef3ad0b4f22d2bfded5c3ce989a0e284dc494757d4729c371
37147098cc6ce337ba19a545f69c14e1fb196cc5c7884758b3660544d5dcc5867696daaf10cb7505
351aafd168c08519046742840d6c6069b0b3aa826cd21b771dc26c38fbb968a13240a364609d7e15
01e802c2aa3831cb2f59c3c5f54b42e5f6241d06687329f8b614a6933bd4c7c26044d53f812fffe8
2aec831c2a871a1677cf3dcdb846508186bc73aeaa7e4551ab9ac60331f0d51935b6be9ee4d4be89
a5856fd06346bff71afcdd8768698ec3bbcc66df4067e4cd350bfa27d905fc686fb10f5067fd2191
88b2987ecc1901adf88daace91d39e1c2599693738b7397edf9c0d3529f7d64bcc144ed65e6818ae
1a88dbaa427cde16686df401ec365d6b201f989c56a694a4c15b13d489430eeb09ae781c2e32f037
613effca766b166823fcf72801c4eafdf84f17baa5088775b4a08d077c5b9923a09bdccd0f8cdc7d
ac8ab8d4c2d39b0f937e7315e38b93607e2741567eee981e9023414d8fde1b92c66a7fa0ce3733b7
1cdded357c3fc8b7d07116c65829d1ea956340f8f472b33876ba99d6d5cf9ad97537da0128421dd5
a5597139295ca46c38749b3dc20a31e80fb8b40aee49cba082c724d03e56454d85c56417f2cae291
cc4e86af7e92d9b0173d36487c4084b5210695ec442b8bec0a4e43367b0f428382326b2b08a2630f
ed252623587a79e738cac969d28649fc793da9aed9775afafaab4e76755b54e9300512263915847a
2f278a8ef294c9abf9a5257d30804411dcf3943c4355019a41b8e1c0a8d883b2e8e268d4db2a1ed9
1185c099343bad7998e85e45728b19050561e94afe207bc5b95c95a8d632fbfff81ccc91689ef5af
904c0153c0e6de11c88d6f4bb00fa062c4dec663a76a5af2496900a46c4f2a92c96101dfe900b057
4b4550d5e2801db45562cae429b083c716172919b8824fd4749f6e89e4bea2b4a7e417db4f1d9816
fa28e33996a765cc41395b34335341c6613ca7904f1a71d90b161ab44355ba736ebbfa54d6a6c8ae
5127400579da89aa8615efebfb04c5869fbab31d86d02209e1cba6e51e471f9a3877e54324af55b3
bcd3db48a0082e6cd7e13254a4bfc1556b6e6a6c4d51e856e1c3810ff9de712dcae3ba0c466d32f5
a1373a7ee6e29cb1b53f1509236da3259a7c111746343972696009f1a999670cf544661a7483dd94
258d1720e80cdaa2f4fef551c6292fa1a9cc40d885389794e78662ecc525108a3e624725e536b534
471a696d0e5bfb8b8a9508388f7ebda42ea32b44156541d62943fba027a3431ba9943412a097b8e1
08660216da94a7d54709cae68540cf3b75a5b5a0edc85dcbcc7e8ac2b8c5bc7d39aa0894800dfa43
9f87c1e708937a6437b295ee396b1e8fb3c4d48f8d59d722f55d959a7257e7d74db9aeeca46f9000
38b2499a47a73d32ebc3c635af84f4b44ae33fe3458076694938fdd5fbfa94858178540cc7cff0f0
f4cd6f52f38ff770b79884e21340e33ad0bc417476970f69963d72b372906f22b5669267c2c5a083
eb2f395cf20462123d10e13f08d6abe3cdf8775c3d4566b50b7f65e50e1f84a5e19081bbefc9299a
dac75b2ccbc5125b4238fd52e7aba44416b3dcc4026d97c10f3c794e80bc3bbe49d8508b1b7a2e9b
481e904cdd7622de2ea832e536d76c21d2c1226e061747f54e2381bd6bb577a9c616de846515cfdc
63ac2024a52fb6da91b772ac02363c45fa0846adb85f8e0674ccda282f57cd8a0e2ab1c5c27579b5
059d0e9c6de93af065367754dee43015681efd2afaafee910bf3a95593a64287d4b5340977ebc233
e535a9674cc5ffe6b5e26412f6a448382f2955fce47897bdb853668349c9bd658cab45e97483bbe3
4f31e59eb300483e1081fab3a1c419a60f133b3f069ebf5582dedafa472a7a423378a07c9d0bdb73
555e4903f3522bc49f55e4ad01b34fdad10f059bd0f6199a3c27e63f8c30fa570a739d1302e9700b
12ff9539c2350d52c9a24c35486e86800100ed5c7cbfd9ea696c4a0137903a3420fd6221e906864e
8e9ccbe5af36f5ed84c82a0dd5754139f69f839fb37111614bbbe37c269d4df9eafa0250b0b1aa0c
a0737f4ab255727e096bb7a07415e63fb08fd7979df4980cc692f5441f03bc42744ea80b7414a5de
87d24b038e0b9b3f47e17a8362cf80d3e200d81b52761ee8ef7b313497a066b01eed86c7c224ab93
1cad5850daa78a84fb042c2a7cf8fcadc514dce0347c4100e9e58ddc7b4d42a5bca118376fd226c1
0d8aaf80712c18de905480623dcc689a9aae46481a194ae7b514cd8d6d1afcb23a4cd05b7a4d9669
e704b2d31db480695f10cfa725364e8c5b2a73c026585253a7212a8eacee2d71315219768a0fa3a6
c46b25a598d5c34af0494c0cfa6ac0ce95e360d461d3b909dc9daf3b401dd065daf763b2c42eb8fb
756f44fb7aeca79bf2ee58d632b34d1467aa7cf739870fd549ad8be9d32530d745402436a3c64554
91450256baf77c3bfa4ec33ba9049267e4c193f2f1ee3ee5597341afa462541e24f6407b0916c787
033bf8e89b5dd99a7cd4c85225a235840a36a704bcf4c3b1e638479f92d53ebc309c467fccf4470f
6619827e4f69f4db21655a9c8b66a9053241c08951edad731b9cbf3cc7946941eb960b16399698bb
84c1d3ac6c984f00d9f04114b7e93f2c1dd1591e62c0cfeb43efc802902b46c851ca6a5551ef611b
65b938d0252cb412a711556b8dbd2a1b570fa2d9a4367eb41f1f4cb3ce26274c557a15690b71c593
af79afd2c3ece829a75350ce60fab91fd859cacd3ae42e69127b67dc363d0783a1cc970e98ca3ed8
c8a91777580aa7c9a5178d7b40ba5c0e52540a66a03f9e60837e368eb3fd72c845f0c8e0ba8850c2
f7f3aedbc9dc8b9497b9304c04c92bbc18689d924aee9284f15c6556ce7f4270596dac4c71247455
af00b2dc8ad82c0192826e241611ef2102693c17c6f2085c76fabeba2b96a5542a1868bcb85d07f4
c677c77d81f5a397739c264335b56c9d2d11db454c9c0557416c6420a1aea029cad78196463e794d
5a3237884767d6bdb41f653dd3e621a41b16ae8ef4c4ce57de3c2ac3b2fea6dae1ee10c20589a824
33f00854f64ba148142c3dfda5c705d11569795415af30b49988a66e15705399a3b5238ad7a0410a
b28cbeabc7052806cc2afb5ef5b351b3e0b1637902c7243d167e2456825f30eaca6f34811ea49727
fa158662e6a500f8d28aba6efd3f834c47f9f3005b22d707252aa3ea8e9d7cf0f2642820890f7136
79a24a6323c14d1776328c65bd2b04b36567a3a6ba2956ca41ae4e603616bfa206b8c538030a90c7
2eceb7c285fdfd60d6f2d2ef27a0f5448873de872c4782bd86f6428044ae9a1f539602a8d21d6335
449366f14887acaeb3f7093ef9cf23348e00919171ba26f3b8aa2d92b40df721377baa21df7f124f
a98c2d41ace64df9b4385443681e579176bc6627494cbebe7f1ed0489133549954b70e417df8eb36
501fb72e88800fa4ac18a7c94a38d980867317e8f3ca192189a3daf683bdda746bec3e5192778212
8804645eba7fdb368543a29945190aedb4b1548d09ebe0392907a2a5544586d62b1bb78a2daf1056
2fe3a8acc3e1da44bf839e77148f5184ad461f52ff18658643b19f094581e936ab0972608e7cf1ca
0083a1b63690eb8a42492586020a77866519a8abe7b055235396f2f4e4c9e28cdf70022dfe788e50
d15abd69b6f1ace3dffde43d859413921d74ebd37070046840bbbccf9b6a77c7df2d113fdc95917e
b6a1dd8c69078ade5acca12945326097ff77c36a884565fd5642cda6f9a0df994b246d2f16eef7b0
e451930e6a9ca53cfd0c2cd88aeaa72149ffaa26077ae0da1d9dd33e0e3d4d273bb560b7eb81ee68
cf19256cbab1d5cd39b9270489ded0a3a47afdb5d488d8dc6b5920ad60dd25e80101143e5135d148
14fb4afd06d0288ec28c5b5c8d50c8ed775e050cdb998757a84d185c6a661b9622ab916851482897
5d8b40d75be972d4242749606db3730a4b09be2d763eb2af8863fe832a7c29650aa715d399fc5277
b617e3a79962e5b7cf0a6668f80892bee2a73b7593ff25f486bcf4425ef89939681063a4febb3fa4
a2d97910fa6a8a38eff96cbea4ce84180bd5dbb305e10f06406e584276b43526f3c57baeab1de650
973ed14a1e13bb62d0e12c3f28c3e1062b0e0585d789482ada74ab01a5d57c99f330a8c708317075
ae5189a77fa76d74728e689a689af7bb8cba31cda6439c355e2899c18b70e4694277a6b7205a5503
5f949ff41e5b40b80f6ad719fc790e42d8807afee90d89076884d0e47970a2e9a81d397316f57000
aae22750341e0d3ac583aa1ce870262998713c6c9f06a186fa6aecdbfcbfb721cb6dca6fc6db161b
ddb8c3ccb9cddefaa79b54aa70ddef1ee1743ea569c5210041a6d136c61e10d756b297242da14b01
68366ff086df2536ffcd32ff985b480be8187523425654c3b5f08632a5b7cc2c84a87783c1f75022
b39d6a94e48d766fce9428ea677d34f004da18fee601639833a8b6206205efe74b5f02faee56a846
03576c1438c2bdf8ccc5df31843dbebfe7b1d7e8d9c18f2b2262430a774de7f1b04c94adfd23ebd5
be71fa25545a9280a8275208caf820ebde7435607d3b1dd1eb023f2979c172077a054d6d2c69647c
5faf66936d1d7c8752cf5af767d62f5a4969e86502ea9df11b44e56e41a757204f94d46dd481ff38
b362022c9563066c462ee16626d000adbaaada392ad4d052db1361dd7f0957953c1d69180517857d
c26721d6c4e502bbd25ee15f31e012edbfd4cc16cb0fcf169649a3d73500fb2054392575fc80880b
221de99844d8168478b65acbd8c75b2755bdf026cb7430d547836f2331f523855d7eb0f3ef022ca5
3e02c86a6246d6f5db35534aace54b72a649ffbbfb490387f43df08a588d0ccc477cd36685075849
973a26702f6be12bd21a3f577db80f0488884a77ac856ed0d7cf13dc13ae05a69a2fdde59320fcbf
f20fcc9fce324d318ad08dc1093e659cc1f9c5729537540e9bc7f05f6fc5e4c33aa997c49fa89bb9
2e225763887c46ec3ea1063954050f773bef1271588367ef25fc30d87e8d2378aae9841ef09dc38d
cace73143ccacdaf65b4e8f485a2715e904e08fd76e0f99c7fe0e165ddbb9fc957befb9ec345c7ea
e011d664eb8de92f81a8796cd5d95972a2e9257205f67848b710305946ade6b5b855b8ad54250e97
ef4fc177fe368130f292753aca40feb745771ca9311bf43fe18a0d2c12b31599c1a8e4932de42adf
f734114ea6143f3f180e75f22af7400eab64bcb5e30691fa2ee0be7b1395b8706a001fefc799dcb8
ff92e55586eb5fd40cf6381d79c2ab18ed00d7b68975cd3f25ecdc
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Pick TASK  0 -1
 HBW_Copy_State <Virtual>  0
 PID_10 PID  0
 PID_11 PID  0
 hunt_exp_light PROGRAM  0 -1
 HBW_Home <Virtual>  0
 HBW_Pick_Sto <Virtual>  0
 test TASK  0 -1
 HBW_Pickup_ST PROGRAM  0 -1
 HWB_Extend_Arm <Virtual>  0
 HBW_Retract_Arm <Virtual>  0
 HWB_PickUp TASK  0 -1
 HBW_HTO1POS <Virtual>  0
 HBW_Left_1Block <Virtual>  0
 HBW_HomeTo2_Col <Virtual>  0
 HWB_HomeTo3_Col <Virtual>  0
 HWB_HomeTo2_Row <Virtual>  0
 HWB_HomeTo3_Row <Virtual>  0
 HWB_HomeTo1_Col <Virtual>  0
 HBW_move_left_1 <Virtual>  0
 HWB_Home_to_11 <Virtual>  0
 HWB_11_DropOff <Virtual>  0
 HBW_Pickup <Virtual>  0
 HBW_PickUp_R1 <Virtual>  0
 HBW_Send_VGR <Virtual>  0
 HBW_PickUp_VGR <Virtual>  0
 HBW_Return_VGR <Virtual>  0
 HBW_MotorsOff <Virtual>  0
 HBW_ConvTo11 <Virtual>  0
 HBW_Return_Top <Virtual>  0
 HBW_MV_11_12 <Virtual>  0
 HBW_Conv_12 <Virtual>  0
 HBW_Conv_12_Lat <Virtual>  0
 HBW_RETRACT_13 <Virtual>  0
 HBW_Retract_23 <Virtual>  0
 HBW_Conv13_Lat <Virtual>  0
 HBW_Conv_2Row <Virtual>  0
 HBW_PickUp_R2 <Virtual>  0
 HBW_Conv11_Lat <Virtual>  0
 HBW_Retract_12 <Virtual>  0
 HBW_Shift_C1C2 <Virtual>  0
 HBW_Move_R1_R2 <Virtual>  0
 HBW_Retract_22 <Virtual>  0
 HBW_Retract_21 <Virtual>  0
 HBW_Retract_31 <Virtual>  0
 HBW_Move_R2_R3 <Virtual>  0
 HBW_PickUp_R3 <Virtual>  0
 HBW_Conv_3Row <Virtual>  0
 HBW_Retract_32 <Virtual>  0
 HBW_Retract_33 <Virtual>  0
 HBW_Retract_Done PROGRAM  0 -1
 HBW_Retract_DN <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
#BEGIN FMT_COMMENT 
"VGR Program"
#END

STR ST1
COPY 0x1 "4 0x0 MC410 C410 1 0x0 MC409 C409 1 0x0 MC412 Y28 1 0x0 MC412 MC450 1 0x0 MC411 C411 1 0x0 MC408 C408 1 0x0 MC406 C406 1 0x0 MC407 C407 1 0x0 MC413 Y29 1 0x0 MC413 MC451 1 0x0 X27 MI200 1 0x0 X26 MI454 1 0x0 X25 MI453 1 0x0 MC452 C452 1"

// Rung VGR_Copy_State#2
// Offset 33
NOP

// Rung VGR_Copy_State#3
// Offset 34
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR ST1
COPY 0x1 "4 0x0 MC800 Y41 1 0x0 Y41 MI801 1 0x0 MC802 Y43 1 0x0 Y43 MI803 1 0x0 MC804 C804 1 0x0 MC805 C805 1 0x0 MC806 Y44 1 0x0 MC807 Y20 1 0x0 MC808 C811 1 0x0 MC809 C809 1 0x0 MC810 C810 1 0x0 MC812 C812 1 0x0 MC813 C813 1 0x0 MC814 C814 1 0x0 MC816 Y45 1 0x0 MC817 Y46 1 0x0 MC818 Y21 1 0x0 MC819 Y20 1 0x0 MC820 Y44 1 0x0 MC822 Y52 1"

// Rung MPO_Copy_State#2
// Offset 45
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC800 C1600 1 0x0 MC801 C1601 1 0x0 MC802 C1602 1 0x0 MC803 C1603 1 0x0 MC804 C1604 1 0x0 Y31 MI800 1 0x0 MC850 C1605 1"

// Rung SLD_Copy_State#2
// Offset 19
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
#BEGIN FMT_COMMENT 
"SSC Program"
#END

STR ST1
COPY 0x1 "4 0x0 MC606 C1200 1 0x0 MC607 C1201 1 0x0 MC608 C1202 1 0x0 MC609 C1203 1 0x0 MC615 C1215 1 0x0 MC616 C1216 1 0x0 MC617 C1217 1 0x0 MC618 C1218 1 0x0 MC619 C1219 1 0x0 MC620 C1220 1"

// Rung SSC_Copy_State#2
// Offset 25
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_Home
$LGCMOD HBW_Home

// Rung HBW_Home#1
// Offset 0
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Home#2
// Offset 8
STRN C215
ANDN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 60 60
OUT Y51

// Rung HBW_Home#3
// Offset 26
STRN C215
ANDN X3
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y5

// Rung HBW_Home#4
// Offset 43
STRN C215
DUPBOOL
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y76

// Rung HBW_Home#5
// Offset 64
NOP

// Rung HBW_Home#6
// Offset 65
RET

// End of Code Block HBW_Home
$LGCEND HBW_Home

// Beginning of Code Block HBW_Copy_State
$LGCMOD HBW_Copy_State

// Rung HBW_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC600 Y40 1 0x0 Y80 MHR102 1 0x0 MC101 C205 1 0x0 MC102 C206 1 0x0 MC103 C207 1 0x0 MC104 C208 1 0x0 MC105 C209 1 0x0 MC106 C210 1 0x0 MC107 C211 1 0x0 MC108 C212 1 0x0 MC109 C213 1 0x0 MC110 C214 1 0x0 MC111 C215 1 0x0 MC112 C216 1 0x0 MC113 C300 1 0x0 X2 MI101 1 0x0 X10 MI102 1 0x0 X11 MI103 1 0x0 X3 MI104 1 0x0 X0 MI105 1 0x0 X6 MI106 1 0x0 X7 MI107 1 0x0 X8 MI108 1 0x0 X9 MI109 1 0x0 $HBW_Encoder_X.Acc MHR1 1 0x0 $HBW_Encoder_Z.Acc MHR2 1"

// Rung HBW_Copy_State#2
// Offset 57
RET

// End of Code Block HBW_Copy_State
$LGCEND HBW_Copy_State

// Beginning of Code Block HBW_HomeTo2_Col
$LGCMOD HBW_HomeTo2_Col

// Rung HBW_HomeTo2_Col#1
// Offset 0
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50

// Rung HBW_HomeTo2_Col#2
// Offset 17
STRGE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_HomeTo2_Col#3
// Offset 22
NOP

// Rung HBW_HomeTo2_Col#4
// Offset 23
NOP

// Rung HBW_HomeTo2_Col#5
// Offset 24
NOP

// Rung HBW_HomeTo2_Col#6
// Offset 25
RET

// End of Code Block HBW_HomeTo2_Col
$LGCEND HBW_HomeTo2_Col

// Beginning of Code Block HWB_HomeTo1_Col
$LGCMOD HWB_HomeTo1_Col

// Rung HWB_HomeTo1_Col#1
// Offset 0
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50

// Rung HWB_HomeTo1_Col#2
// Offset 17
STRGE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HWB_HomeTo1_Col#3
// Offset 22
NOP

// Rung HWB_HomeTo1_Col#4
// Offset 23
NOP

// Rung HWB_HomeTo1_Col#5
// Offset 24
RET

// End of Code Block HWB_HomeTo1_Col
$LGCEND HWB_HomeTo1_Col

// Beginning of Code Block HWB_Home_to_11
$LGCMOD HWB_Home_to_11

// Rung HWB_Home_to_11#1
// Offset 0
STRN C215
AND C250
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HWB_Home_to_11#2
// Offset 22
STRGE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HWB_Home_to_11#3
// Offset 27
STRN C215
AND C251
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
POPBOOL
AND ST2
OUT Y5

// Rung HWB_Home_to_11#4
// Offset 49
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HWB_Home_to_11#5
// Offset 54
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HWB_Home_to_11#6
// Offset 73
NOP

// Rung HWB_Home_to_11#7
// Offset 74
NOP

// Rung HWB_Home_to_11#8
// Offset 75
RET

// End of Code Block HWB_Home_to_11
$LGCEND HWB_Home_to_11

// Beginning of Code Block HWB_11_DropOff
$LGCMOD HWB_11_DropOff

// Rung HWB_11_DropOff#1
// Offset 0
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HWB_11_DropOff#2
// Offset 8
STRGE 80 $HBW_Encoder_X.Acc
OUT C250

// Rung HWB_11_DropOff#3
// Offset 13
STRN C215
ANDN C250
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51

// Rung HWB_11_DropOff#4
// Offset 31
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y4
AND ST2
OUT Y5

// Rung HWB_11_DropOff#5
// Offset 51
STRGE 2730 $HBW_Encoder_Z.Acc
OUT C251

// Rung HWB_11_DropOff#6
// Offset 56
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 60
OUT Y7

// Rung HWB_11_DropOff#7
// Offset 73
RET

// End of Code Block HWB_11_DropOff
$LGCEND HWB_11_DropOff

// Beginning of Code Block HBW_PickUp_R1
$LGCMOD HBW_PickUp_R1

// Rung HBW_PickUp_R1#1
// Offset 0
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_PickUp_R1#2
// Offset 19
STRN C215
AND C251
DUPBOOL
AND X10
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_PickUp_R1#3
// Offset 41
STRLE 80 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_PickUp_R1#4
// Offset 46
STRN C215
AND ST2
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
OUT Y50

// Rung HBW_PickUp_R1#5
// Offset 64
STRLE 80 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_PickUp_R1#6
// Offset 69
NOP

// Rung HBW_PickUp_R1#7
// Offset 70
NOP

// Rung HBW_PickUp_R1#8
// Offset 71
NOP

// Rung HBW_PickUp_R1#9
// Offset 72
NOP

// Rung HBW_PickUp_R1#10
// Offset 73
RET

// End of Code Block HBW_PickUp_R1
$LGCEND HBW_PickUp_R1

// Beginning of Code Block HBW_Send_VGR
$LGCMOD HBW_Send_VGR

// Rung HBW_Send_VGR#1
// Offset 0
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_Send_VGR#2
// Offset 19
STRN C215
AND ST2
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y5
OUT Y4

// Rung HBW_Send_VGR#3
// Offset 37
STRN C215
AND X2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 60 60
OUT Y48
AND ST2
OUT Y49

// Rung HBW_Send_VGR#4
// Offset 56
NOP

// Rung HBW_Send_VGR#5
// Offset 57
NOP

// Rung HBW_Send_VGR#6
// Offset 58
RET

// End of Code Block HBW_Send_VGR
$LGCEND HBW_Send_VGR

// Beginning of Code Block HBW_PickUp_VGR
$LGCMOD HBW_PickUp_VGR

// Rung HBW_PickUp_VGR#1
// Offset 0
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_PickUp_VGR#2
// Offset 19
STRN C215
AND ST2
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y5
OUT Y4

// Rung HBW_PickUp_VGR#3
// Offset 37
STRN C215
AND X11
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 60 60
OUT Y49
AND ST2
OUT Y48

// Rung HBW_PickUp_VGR#4
// Offset 56
NOP

// Rung HBW_PickUp_VGR#5
// Offset 57
NOP

// Rung HBW_PickUp_VGR#6
// Offset 58
RET

// End of Code Block HBW_PickUp_VGR
$LGCEND HBW_PickUp_VGR

// Beginning of Code Block HBW_Return_VGR
$LGCMOD HBW_Return_VGR

// Rung HBW_Return_VGR#1
// Offset 0
STRN C215
ANDN C251
DUPBOOL
AND C299
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y6

// Rung HBW_Return_VGR#2
// Offset 22
STRN C215
AND X1
DUPBOOL
AND C299
AND C251
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 60 60
OUT Y49
POPBOOL
AND ST2
OUT Y48

// Rung HBW_Return_VGR#3
// Offset 45
STRN C215
DUPBOOL
AND C299
ANDN X1
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_Return_VGR#4
// Offset 68
STRLE 2550 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Return_VGR#5
// Offset 73
NOP

// Rung HBW_Return_VGR#6
// Offset 74
NOP

// Rung HBW_Return_VGR#7
// Offset 75
RET

// End of Code Block HBW_Return_VGR
$LGCEND HBW_Return_VGR

// Beginning of Code Block HBW_MotorsOff
$LGCMOD HBW_MotorsOff

// Rung HBW_MotorsOff#1
// Offset 0
STRN C215
ANDN ST2
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
OUT Y6

// Rung HBW_MotorsOff#2
// Offset 18
STRN C215
AND ST2
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y5
OUT Y4

// Rung HBW_MotorsOff#3
// Offset 36
STRN C215
AND ST2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 60 60
OUT Y49
OUT Y48

// Rung HBW_MotorsOff#4
// Offset 54
NOP

// Rung HBW_MotorsOff#5
// Offset 55
NOP

// Rung HBW_MotorsOff#6
// Offset 56
NOP

// Rung HBW_MotorsOff#7
// Offset 57
RET

// End of Code Block HBW_MotorsOff
$LGCEND HBW_MotorsOff

// Beginning of Code Block HBW_ConvTo11
$LGCMOD HBW_ConvTo11

// Rung HBW_ConvTo11#1
// Offset 0
STRN C215
AND C250
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HBW_ConvTo11#2
// Offset 22
NOP

// Rung HBW_ConvTo11#3
// Offset 23
STRGE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_ConvTo11#4
// Offset 28
STRN C215
AND C251
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_ConvTo11#5
// Offset 50
STRLE 80 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_ConvTo11#6
// Offset 55
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_ConvTo11#7
// Offset 74
NOP

// Rung HBW_ConvTo11#8
// Offset 75
NOP

// Rung HBW_ConvTo11#9
// Offset 76
RET

// End of Code Block HBW_ConvTo11
$LGCEND HBW_ConvTo11

// Beginning of Code Block HBW_Return_Top
$LGCMOD HBW_Return_Top

// Rung HBW_Return_Top#1
// Offset 0
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_Return_Top#2
// Offset 19
STRN C215
AND C251
DUPBOOL
AND X10
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
POPBOOL
AND ST2
OUT Y5

// Rung HBW_Return_Top#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Return_Top#4
// Offset 46
STRN C215
AND ST2
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
OUT Y50

// Rung HBW_Return_Top#5
// Offset 64
STRLE 80 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Return_Top#6
// Offset 69
NOP

// Rung HBW_Return_Top#7
// Offset 70
NOP

// Rung HBW_Return_Top#8
// Offset 71
RET

// End of Code Block HBW_Return_Top
$LGCEND HBW_Return_Top

// Beginning of Code Block HBW_MV_11_12
$LGCMOD HBW_MV_11_12

// Rung HBW_MV_11_12#1
// Offset 0
STRN C215
DUPBOOL
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_MV_11_12#2
// Offset 21
NOP

// Rung HBW_MV_11_12#3
// Offset 22
NOP

// Rung HBW_MV_11_12#4
// Offset 23
NOP

// Rung HBW_MV_11_12#5
// Offset 24
RET

// End of Code Block HBW_MV_11_12
$LGCEND HBW_MV_11_12

// Beginning of Code Block HBW_Conv_12
$LGCMOD HBW_Conv_12

// Rung HBW_Conv_12#1
// Offset 0
NOP

// Rung HBW_Conv_12#2
// Offset 1
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_Conv_12#3
// Offset 20
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
AND ST2
OUT Y4

// Rung HBW_Conv_12#4
// Offset 40
STRGE $HBW_Encoder_Z.Acc 80
OUT C251

// Rung HBW_Conv_12#5
// Offset 45
NOP

// Rung HBW_Conv_12#6
// Offset 46
RET

// End of Code Block HBW_Conv_12
$LGCEND HBW_Conv_12

// Beginning of Code Block HBW_Conv_12_Lat
$LGCMOD HBW_Conv_12_Lat

// Rung HBW_Conv_12_Lat#1
// Offset 0
NOP

// Rung HBW_Conv_12_Lat#2
// Offset 1
STRN C215
ANDN C250
DUPBOOL
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
POPBOOL
AND ST2
OUT Y7

// Rung HBW_Conv_12_Lat#3
// Offset 23
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Conv_12_Lat#4
// Offset 42
STRGE 5290 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Conv_12_Lat#5
// Offset 47
NOP

// Rung HBW_Conv_12_Lat#6
// Offset 48
RET

// End of Code Block HBW_Conv_12_Lat
$LGCEND HBW_Conv_12_Lat

// Beginning of Code Block HBW_RETRACT_13
$LGCMOD HBW_RETRACT_13

// Rung HBW_RETRACT_13#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_RETRACT_13#2
// Offset 22
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_RETRACT_13#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_RETRACT_13#4
// Offset 46
STRN C215
AND C250
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HBW_RETRACT_13#5
// Offset 68
STRGE 7650 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_RETRACT_13#6
// Offset 73
RET

// End of Code Block HBW_RETRACT_13
$LGCEND HBW_RETRACT_13

// Beginning of Code Block HBW_Retract_23
$LGCMOD HBW_Retract_23

// Rung HBW_Retract_23#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_23#2
// Offset 22
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_23#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_23#4
// Offset 46
STRN C215
AND ST2
OUT Y51
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50

// Rung HBW_Retract_23#5
// Offset 65
STRGE 7640 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_23#6
// Offset 70
RET

// End of Code Block HBW_Retract_23
$LGCEND HBW_Retract_23

// Beginning of Code Block HBW_Conv13_Lat
$LGCMOD HBW_Conv13_Lat

// Rung HBW_Conv13_Lat#1
// Offset 0
NOP

// Rung HBW_Conv13_Lat#2
// Offset 1
STRN C215
ANDN C250
DUPBOOL
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
POPBOOL
AND ST2
OUT Y7

// Rung HBW_Conv13_Lat#3
// Offset 23
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Conv13_Lat#4
// Offset 42
STRGE 7640 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Conv13_Lat#5
// Offset 47
NOP

// Rung HBW_Conv13_Lat#6
// Offset 48
RET

// End of Code Block HBW_Conv13_Lat
$LGCEND HBW_Conv13_Lat

// Beginning of Code Block HBW_Conv_2Row
$LGCMOD HBW_Conv_2Row

// Rung HBW_Conv_2Row#1
// Offset 0
NOP

// Rung HBW_Conv_2Row#2
// Offset 1
NOP

// Rung HBW_Conv_2Row#3
// Offset 2
NOP

// Rung HBW_Conv_2Row#4
// Offset 3
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_Conv_2Row#5
// Offset 22
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
AND ST2
OUT Y4

// Rung HBW_Conv_2Row#6
// Offset 42
STRGE $HBW_Encoder_Z.Acc 1380
OUT C251

// Rung HBW_Conv_2Row#7
// Offset 47
NOP

// Rung HBW_Conv_2Row#8
// Offset 48
RET

// End of Code Block HBW_Conv_2Row
$LGCEND HBW_Conv_2Row

// Beginning of Code Block HBW_PickUp_R2
$LGCMOD HBW_PickUp_R2

// Rung HBW_PickUp_R2#1
// Offset 0
NOP

// Rung HBW_PickUp_R2#2
// Offset 1
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_PickUp_R2#3
// Offset 20
STRN C215
AND ST2
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
OUT Y50

// Rung HBW_PickUp_R2#4
// Offset 38
NOP

// Rung HBW_PickUp_R2#5
// Offset 39
STRN C215
AND C251
DUPBOOL
AND X10
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_PickUp_R2#6
// Offset 61
STRLE 1400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_PickUp_R2#7
// Offset 66
NOP

// Rung HBW_PickUp_R2#8
// Offset 67
NOP

// Rung HBW_PickUp_R2#9
// Offset 68
NOP

// Rung HBW_PickUp_R2#10
// Offset 69
RET

// End of Code Block HBW_PickUp_R2
$LGCEND HBW_PickUp_R2

// Beginning of Code Block HBW_Conv11_Lat
$LGCMOD HBW_Conv11_Lat

// Rung HBW_Conv11_Lat#1
// Offset 0
NOP

// Rung HBW_Conv11_Lat#2
// Offset 1
STRN C215
ANDN C250
DUPBOOL
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
POPBOOL
AND ST2
OUT Y7

// Rung HBW_Conv11_Lat#3
// Offset 23
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Conv11_Lat#4
// Offset 42
STRGE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Conv11_Lat#5
// Offset 47
NOP

// Rung HBW_Conv11_Lat#6
// Offset 48
RET

// End of Code Block HBW_Conv11_Lat
$LGCEND HBW_Conv11_Lat

// Beginning of Code Block HBW_Retract_12
$LGCMOD HBW_Retract_12

// Rung HBW_Retract_12#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_12#2
// Offset 22
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_12#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_12#4
// Offset 46
RET

// End of Code Block HBW_Retract_12
$LGCEND HBW_Retract_12

// Beginning of Code Block HBW_Shift_C1C2
$LGCMOD HBW_Shift_C1C2

// Rung HBW_Shift_C1C2#1
// Offset 0
STRGE 5290 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Shift_C1C2#2
// Offset 5
NOP

// Rung HBW_Shift_C1C2#3
// Offset 6
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Shift_C1C2#4
// Offset 25
NOP

// Rung HBW_Shift_C1C2#5
// Offset 26
STRN C215
AND ST2
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
OUT Y6

// Rung HBW_Shift_C1C2#6
// Offset 44
NOP

// Rung HBW_Shift_C1C2#7
// Offset 45
RET

// End of Code Block HBW_Shift_C1C2
$LGCEND HBW_Shift_C1C2

// Beginning of Code Block HBW_Move_R1_R2
$LGCMOD HBW_Move_R1_R2

// Rung HBW_Move_R1_R2#1
// Offset 0
STRGE 1760 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Move_R1_R2#2
// Offset 5
NOP

// Rung HBW_Move_R1_R2#3
// Offset 6
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Move_R1_R2#4
// Offset 25
NOP

// Rung HBW_Move_R1_R2#5
// Offset 26
NOP

// Rung HBW_Move_R1_R2#6
// Offset 27
RET

// End of Code Block HBW_Move_R1_R2
$LGCEND HBW_Move_R1_R2

// Beginning of Code Block HBW_Retract_22
$LGCMOD HBW_Retract_22

// Rung HBW_Retract_22#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_22#2
// Offset 22
STRGE 1730 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_22#3
// Offset 27
NOP

// Rung HBW_Retract_22#4
// Offset 28
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_22#5
// Offset 47
STRLE 5290 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_22#6
// Offset 52
STRN C215
AND C250
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
AND ST2
OUT Y50

// Rung HBW_Retract_22#7
// Offset 72
NOP

// Rung HBW_Retract_22#8
// Offset 73
RET

// End of Code Block HBW_Retract_22
$LGCEND HBW_Retract_22

// Beginning of Code Block HBW_Retract_21
$LGCMOD HBW_Retract_21

// Rung HBW_Retract_21#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_21#2
// Offset 22
STRGE 1730 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_21#3
// Offset 27
NOP

// Rung HBW_Retract_21#4
// Offset 28
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_21#5
// Offset 47
STRLE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_21#6
// Offset 52
STRN C215
AND C250
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
AND ST2
OUT Y50

// Rung HBW_Retract_21#7
// Offset 72
NOP

// Rung HBW_Retract_21#8
// Offset 73
RET

// End of Code Block HBW_Retract_21
$LGCEND HBW_Retract_21

// Beginning of Code Block HBW_Retract_31
$LGCMOD HBW_Retract_31

// Rung HBW_Retract_31#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_31#2
// Offset 22
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_31#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_31#4
// Offset 46
STRN C215
AND ST2
OUT Y51
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50

// Rung HBW_Retract_31#5
// Offset 65
STRGE 7640 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_31#6
// Offset 70
RET

// End of Code Block HBW_Retract_31
$LGCEND HBW_Retract_31

// Beginning of Code Block HBW_Move_R2_R3
$LGCMOD HBW_Move_R2_R3

// Rung HBW_Move_R2_R3#1
// Offset 0
STRGE 3600 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Move_R2_R3#2
// Offset 5
NOP

// Rung HBW_Move_R2_R3#3
// Offset 6
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Move_R2_R3#4
// Offset 25
NOP

// Rung HBW_Move_R2_R3#5
// Offset 26
NOP

// Rung HBW_Move_R2_R3#6
// Offset 27
RET

// End of Code Block HBW_Move_R2_R3
$LGCEND HBW_Move_R2_R3

// Beginning of Code Block HBW_PickUp_R3
$LGCMOD HBW_PickUp_R3

// Rung HBW_PickUp_R3#1
// Offset 0
NOP

// Rung HBW_PickUp_R3#2
// Offset 1
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_PickUp_R3#3
// Offset 20
STRN C215
AND ST2
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
OUT Y50

// Rung HBW_PickUp_R3#4
// Offset 38
NOP

// Rung HBW_PickUp_R3#5
// Offset 39
STRN C215
AND C251
DUPBOOL
AND X10
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_PickUp_R3#6
// Offset 61
STRLE 2800 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_PickUp_R3#7
// Offset 66
NOP

// Rung HBW_PickUp_R3#8
// Offset 67
NOP

// Rung HBW_PickUp_R3#9
// Offset 68
NOP

// Rung HBW_PickUp_R3#10
// Offset 69
RET

// End of Code Block HBW_PickUp_R3
$LGCEND HBW_PickUp_R3

// Beginning of Code Block HBW_Conv_3Row
$LGCMOD HBW_Conv_3Row

// Rung HBW_Conv_3Row#1
// Offset 0
NOP

// Rung HBW_Conv_3Row#2
// Offset 1
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_Conv_3Row#3
// Offset 20
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Conv_3Row#4
// Offset 40
STRLE $HBW_Encoder_Z.Acc 2950
OUT C251

// Rung HBW_Conv_3Row#5
// Offset 45
NOP

// Rung HBW_Conv_3Row#6
// Offset 46
RET

// End of Code Block HBW_Conv_3Row
$LGCEND HBW_Conv_3Row

// Beginning of Code Block HBW_Retract_32
$LGCMOD HBW_Retract_32

// Rung HBW_Retract_32#1
// Offset 0
STRGE 3300 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_32#2
// Offset 5
NOP

// Rung HBW_Retract_32#3
// Offset 6
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_32#4
// Offset 28
NOP

// Rung HBW_Retract_32#5
// Offset 29
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_32#6
// Offset 48
STRGE 5290 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_32#7
// Offset 53
NOP

// Rung HBW_Retract_32#8
// Offset 54
STRN C215
AND C250
DUPBOOL
ANDN C251
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HBW_Retract_32#9
// Offset 77
NOP

// Rung HBW_Retract_32#10
// Offset 78
RET

// End of Code Block HBW_Retract_32
$LGCEND HBW_Retract_32

// Beginning of Code Block HBW_Retract_33
$LGCMOD HBW_Retract_33

// Rung HBW_Retract_33#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_33#2
// Offset 22
STRGE 3300 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_33#3
// Offset 27
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_33#4
// Offset 46
STRGE 7640 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_33#5
// Offset 51
NOP

// Rung HBW_Retract_33#6
// Offset 52
STRN C215
AND C250
DUPBOOL
ANDN C251
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HBW_Retract_33#7
// Offset 75
NOP

// Rung HBW_Retract_33#8
// Offset 76
RET

// End of Code Block HBW_Retract_33
$LGCEND HBW_Retract_33

// Beginning of Code Block HBW_Retract_DN
$LGCMOD HBW_Retract_DN

// Rung HBW_Retract_DN#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_DN#2
// Offset 22
STRGE 3200 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_DN#3
// Offset 27
NOP

// Rung HBW_Retract_DN#4
// Offset 28
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_DN#5
// Offset 47
STRLE 80 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_DN#6
// Offset 52
STRN C215
AND C250
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
AND ST2
OUT Y50

// Rung HBW_Retract_DN#7
// Offset 72
NOP

// Rung HBW_Retract_DN#8
// Offset 73
RET

// End of Code Block HBW_Retract_DN
$LGCEND HBW_Retract_DN

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#2
// Offset 3
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#3
// Offset 6
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#4
// Offset 9
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#5
// Offset 12
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// Rung $Main#6
// Offset 15
#BEGIN FMT_COMMENT 
"Hunter Demo Light<br>"
#END

STR ST1
RUN hunt_exp_light

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
SG HBW_Program.S0

// Rung HBW_Program#2
// Offset 2
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#3
// Offset 10
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#4
// Offset 12
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#5
// Offset 14
STR ST1
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#6
// Offset 22
NOP

// Rung HBW_Program#7
// Offset 23
STR C216
JMP HBW_Program.S1

// Rung HBW_Program#8
// Offset 25
STR C213
JMP HBW_Program.S1

// Rung HBW_Program#9
// Offset 27
SG HBW_Program.S1

// Rung HBW_Program#10
// Offset 29
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#11
// Offset 37
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#12
// Offset 39
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#13
// Offset 41
STR ST1
MOVE 0 N1

// Rung HBW_Program#14
// Offset 44
STR ST1
MOVE 0 C299

// Rung HBW_Program#15
// Offset 47
NOP

// Rung HBW_Program#16
// Offset 48
STR ST1
DUPBOOL
STR C205
ANDN C206
STR C206
ANDN C205
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 500 60
POPBOOL
DUPBOOL
AND C205
OUT Y48
POPBOOL
AND C206
OUT Y49

// Rung HBW_Program#17
// Offset 77
STR ST1
DUPBOOL
STR C207
ANDN C208
STRN C207
AND C208
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
POPBOOL
DUPBOOL
AND C207
OUT Y50
POPBOOL
AND C208
OUT Y51

// Rung HBW_Program#18
// Offset 106
STR ST1
DUPBOOL
STR C209
ANDN C210
STRN C209
AND C210
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
POPBOOL
DUPBOOL
AND C209
OUT Y4
POPBOOL
AND C210
OUT Y5

// Rung HBW_Program#19
// Offset 135
STR ST1
DUPBOOL
STR C211
ANDN C212
STRN C211
AND C212
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
POPBOOL
DUPBOOL
AND C211
OUT Y6
POPBOOL
AND C212
OUT Y7

// Rung HBW_Program#20
// Offset 164
STR C213
JMP HBW_Program.S2

// Rung HBW_Program#21
// Offset 166
SG HBW_Program.S2

// Rung HBW_Program#22
// Offset 168
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#23
// Offset 176
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#24
// Offset 178
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#25
// Offset 180
STR ST1
CALL HBW_Home 0x1 DST511 "3" "3"

// Rung HBW_Program#26
// Offset 188
STR X0
AND X11
AND X3
JMP HBW_Program.S3

// Rung HBW_Program#27
// Offset 192
STR C212
JMP HBW_Program.S3

// Rung HBW_Program#28
// Offset 194
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#29
// Offset 196
SG HBW_Program.S3

// Rung HBW_Program#30
// Offset 198
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#31
// Offset 206
STR ST1
CALL HWB_Home_to_11 0x1 DST511 "3" "3"

// Rung HBW_Program#32
// Offset 214
STRN C250
ANDN C251
JMP HBW_Program.S4

// Rung HBW_Program#33
// Offset 217
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#34
// Offset 219
SG HBW_Program.S4

// Rung HBW_Program#35
// Offset 221
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#36
// Offset 229
STR ST1
CALL HBW_PickUp_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#37
// Offset 237
STR X10
ANDN C251
JMP HBW_Program.S5

// Rung HBW_Program#38
// Offset 240
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#39
// Offset 242
NOP

// Rung HBW_Program#40
// Offset 243
SG HBW_Program.S5

// Rung HBW_Program#41
// Offset 245
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#42
// Offset 253
STR ST1
CALL HWB_11_DropOff 0x1 DST511 "3" "3"

// Rung HBW_Program#43
// Offset 261
STRN C251
AND C250
JMP HBW_Program.S6

// Rung HBW_Program#44
// Offset 264
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#45
// Offset 266
SG HBW_Program.S6

// Rung HBW_Program#46
// Offset 268
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#47
// Offset 276
STR ST1
CALL HBW_Send_VGR 0x1 DST511 "3" "3"

// Rung HBW_Program#48
// Offset 284
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#49
// Offset 286
STRN X2
JMP HBW_Program.S7
INC N1

// Rung HBW_Program#50
// Offset 289
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#51
// Offset 291
NOP

// Rung HBW_Program#52
// Offset 292
SG HBW_Program.S7

// Rung HBW_Program#53
// Offset 294
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#54
// Offset 302
STR C300
MOVE 1 C299

// Rung HBW_Program#55
// Offset 305
STR ST1
CALL HBW_Return_VGR 0x1 DST511 "3" "3"

// Rung HBW_Program#56
// Offset 313
STR X11
JMP HBW_Program.S15
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#57
// Offset 322
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#58
// Offset 324
NOP

// Rung HBW_Program#59
// Offset 325
SG HBW_Program.S8

// Rung HBW_Program#60
// Offset 327
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#61
// Offset 335
STR ST1
CALL HBW_Conv_12 0x1 DST511 "3" "3"

// Rung HBW_Program#62
// Offset 343
STR ST1
MOVE 0 C299

// Rung HBW_Program#63
// Offset 346
STRN C250
JMP HBW_Program.S9

// Rung HBW_Program#64
// Offset 348
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#65
// Offset 350
NOP

// Rung HBW_Program#66
// Offset 351
SG HBW_Program.S9

// Rung HBW_Program#67
// Offset 353
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#68
// Offset 361
STR ST1
CALL HBW_Return_Top 0x1 DST511 "3" "3"

// Rung HBW_Program#69
// Offset 369
STR X10
ANDN C251
JMP HBW_Program.S10
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#70
// Offset 379
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#71
// Offset 381
NOP

// Rung HBW_Program#72
// Offset 382
SG HBW_Program.S10

// Rung HBW_Program#73
// Offset 384
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#74
// Offset 392
STR ST1
CALL HBW_MV_11_12 0x1 DST511 "3" "3"

// Rung HBW_Program#75
// Offset 400
STRN C250
JMP HBW_Program.S11

// Rung HBW_Program#76
// Offset 402
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#77
// Offset 404
NOP

// Rung HBW_Program#78
// Offset 405
SG HBW_Program.S11

// Rung HBW_Program#79
// Offset 407
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#80
// Offset 415
STRE N1 1
CALL HBW_PickUp_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#81
// Offset 426
STRE N1 2
CALL HBW_PickUp_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#82
// Offset 437
STRE N1 3
CALL HBW_Move_R1_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#83
// Offset 448
STRE N1 3
ANDLE 1650 $HBW_Encoder_Z.Acc
JMP HBW_Program.S51

// Rung HBW_Program#84
// Offset 457
STRE N1 4
CALL HBW_PickUp_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#85
// Offset 468
STRE N1 5
CALL HBW_PickUp_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#86
// Offset 479
STRE N1 6
CALL HBW_Move_R2_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#87
// Offset 490
STRE N1 6
ANDLE 3200 $HBW_Encoder_Z.Acc
JMP HBW_Program.S51

// Rung HBW_Program#88
// Offset 499
STRE N1 7
CALL HBW_PickUp_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#89
// Offset 510
STRE N1 8
CALL HBW_PickUp_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#90
// Offset 521
STRE N1 9
JMP HBW_Program.S18

// Rung HBW_Program#91
// Offset 526
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#92
// Offset 528
NOP

// Rung HBW_Program#93
// Offset 529
NOP

// Rung HBW_Program#94
// Offset 530
STR X10
ANDN C251
JMP HBW_Program.S12

// Rung HBW_Program#95
// Offset 533
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#96
// Offset 535
SG HBW_Program.S51

// Rung HBW_Program#97
// Offset 537
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#98
// Offset 545
STRE N1 3
CALL HBW_PickUp_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#99
// Offset 556
STRE N1 6
CALL HBW_PickUp_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#100
// Offset 567
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#101
// Offset 569
STR X10
ANDN C251
JMP HBW_Program.S12

// Rung HBW_Program#102
// Offset 572
SG HBW_Program.S12

// Rung HBW_Program#103
// Offset 574
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#104
// Offset 582
STR ST1
CALL HWB_11_DropOff 0x1 DST511 "3" "3"

// Rung HBW_Program#105
// Offset 590
STRN C251
AND C250
JMP HBW_Program.S13

// Rung HBW_Program#106
// Offset 593
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#107
// Offset 595
SG HBW_Program.S13

// Rung HBW_Program#108
// Offset 597
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#109
// Offset 605
STR ST1
CALL HBW_Send_VGR 0x1 DST511 "3" "3"

// Rung HBW_Program#110
// Offset 613
STR C300
MOVE 1 C299

// Rung HBW_Program#111
// Offset 616
STRN X2
AND C299
JMP HBW_Program.S14
INC N1

// Rung HBW_Program#112
// Offset 620
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#113
// Offset 622
SG HBW_Program.S14

// Rung HBW_Program#114
// Offset 624
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#115
// Offset 632
STR ST1
CALL HBW_Return_VGR 0x1 DST511 "3" "3"

// Rung HBW_Program#116
// Offset 640
STR X11
JMP HBW_Program.S15
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#117
// Offset 649
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#118
// Offset 651
SG HBW_Program.S15

// Rung HBW_Program#119
// Offset 653
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#120
// Offset 661
STR ST1
MOVE 0 C299

// Rung HBW_Program#121
// Offset 664
STRE N1 1
CALL HBW_Conv_12 0x1 DST511 "3" "3"

// Rung HBW_Program#122
// Offset 675
STRE N1 2
CALL HBW_Conv_12 0x1 DST511 "3" "3"

// Rung HBW_Program#123
// Offset 686
STRE N1 3
CALL HBW_Conv_12 0x1 DST511 "3" "3"

// Rung HBW_Program#124
// Offset 697
STRE N1 4
CALL HBW_Conv_2Row 0x1 DST511 "3" "3"

// Rung HBW_Program#125
// Offset 708
STRE N1 5
CALL HBW_Conv_2Row 0x1 DST511 "3" "3"

// Rung HBW_Program#126
// Offset 719
STRE N1 6
CALL HBW_Conv_2Row 0x1 DST511 "3" "3"

// Rung HBW_Program#127
// Offset 730
STRE N1 7
CALL HBW_Conv_3Row 0x1 DST511 "3" "3"

// Rung HBW_Program#128
// Offset 741
STRE N1 8
CALL HBW_Conv_3Row 0x1 DST511 "3" "3"

// Rung HBW_Program#129
// Offset 752
STRE N1 9
CALL HBW_Conv_3Row 0x1 DST511 "3" "3"

// Rung HBW_Program#130
// Offset 763
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#131
// Offset 765
STRN C251
JMP HBW_Program.S16
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#132
// Offset 774
SG HBW_Program.S16

// Rung HBW_Program#133
// Offset 776
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#134
// Offset 784
STRE N1 1
CALL HBW_Conv11_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#135
// Offset 795
STRE N1 2
CALL HBW_Conv_12_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#136
// Offset 806
STRE N1 3
CALL HBW_Conv13_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#137
// Offset 817
STRE N1 4
CALL HBW_Conv13_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#138
// Offset 828
STRE N1 5
CALL HBW_Conv_12_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#139
// Offset 839
STRE N1 6
CALL HBW_Conv11_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#140
// Offset 850
STRE N1 7
CALL HBW_Conv11_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#141
// Offset 861
STRE N1 8
CALL HBW_Conv_12_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#142
// Offset 872
STRE N1 9
CALL HBW_Conv13_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#143
// Offset 883
NOP

// Rung HBW_Program#144
// Offset 884
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#145
// Offset 886
STRN C250
AND X10
JMP HBW_Program.S17

// Rung HBW_Program#146
// Offset 889
SG HBW_Program.S17

// Rung HBW_Program#147
// Offset 891
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#148
// Offset 899
STRE N1 1
CALL HBW_Retract_12 0x1 DST511 "3" "3"

// Rung HBW_Program#149
// Offset 910
STRE N1 2
CALL HBW_RETRACT_13 0x1 DST511 "3" "3"

// Rung HBW_Program#150
// Offset 921
STRE N1 3
CALL HBW_Retract_23 0x1 DST511 "3" "3"

// Rung HBW_Program#151
// Offset 932
STRE N1 4
CALL HBW_Retract_22 0x1 DST511 "3" "3"

// Rung HBW_Program#152
// Offset 943
STRE N1 5
CALL HBW_Retract_21 0x1 DST511 "3" "3"

// Rung HBW_Program#153
// Offset 954
STRE N1 6
CALL HBW_Retract_21 0x1 DST511 "3" "3"

// Rung HBW_Program#154
// Offset 965
STRE N1 7
CALL HBW_Retract_32 0x1 DST511 "3" "3"

// Rung HBW_Program#155
// Offset 976
STRE N1 8
CALL HBW_Retract_33 0x1 DST511 "3" "3"

// Rung HBW_Program#156
// Offset 987
STRE N1 9
CALL HBW_Retract_33 0x1 DST511 "3" "3"

// Rung HBW_Program#157
// Offset 998
NOP

// Rung HBW_Program#158
// Offset 999
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#159
// Offset 1001
STR X11
ANDN C251
ANDN C250
JMP HBW_Program.S11

// Rung HBW_Program#160
// Offset 1005
STR X11
ANDE N1 1
JMP HBW_Program.S50

// Rung HBW_Program#161
// Offset 1011
SG HBW_Program.S18

// Rung HBW_Program#162
// Offset 1013
STR ST1
JMP HBW_Program.S0

// Rung HBW_Program#163
// Offset 1015
SG HBW_Program.S50

// Rung HBW_Program#164
// Offset 1017
STR ST1
CALL HBW_Shift_C1C2 0x1 DST511 "3" "3"

// Rung HBW_Program#165
// Offset 1025
STRN Y50
ANDN C250
JMP HBW_Program.S11

// Rung HBW_Program#166
// Offset 1028
STR C215
JMP HBW_Program.S0

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
DUPBOOL
STR C410
ANDN C409
STRN C410
AND C409
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 100
POPBOOL
DUPBOOL
AND C410
OUT Y27
POPBOOL
AND C409
OUT Y26

// Rung VGR_Program#4
// Offset 39
STR ST1
DUPBOOL
STR C408
ANDN C411
STRN C408
AND C411
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
POPBOOL
DUPBOOL
AND C408
OUT Y24
POPBOOL
AND C411
OUT Y25

// Rung VGR_Program#5
// Offset 68
STR ST1
DUPBOOL
STR C406
ANDN C407
STRN C406
AND C407
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 100
POPBOOL
DUPBOOL
AND C406
OUT Y23
POPBOOL
AND C407
OUT Y22

// Rung VGR_Program#6
// Offset 97
STR C452
JMP VGR_Program.S1

// Rung VGR_Program#7
// Offset 99
SG VGR_Program.S1

// Rung VGR_Program#8
// Offset 101
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#9
// Offset 103
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#10
// Offset 111
STRN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 100
OUT Y22

// Rung VGR_Program#11
// Offset 127
STRN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
OUT Y24

// Rung VGR_Program#12
// Offset 143
STRN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 100
OUT Y26

// Rung VGR_Program#13
// Offset 159
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_Program#14
// Offset 161
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_Program#15
// Offset 163
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_Program#16
// Offset 165
STR X25
AND X26
AND X27
JMP VGR_Program.S2

// Rung VGR_Program#17
// Offset 169
SG VGR_Program.S2

// Rung VGR_Program#18
// Offset 171
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#19
// Offset 179
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#20
// Offset 181
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_Program#21
// Offset 183
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_Program#22
// Offset 185
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_Program#23
// Offset 187
STRGE 5350 $VGR_Encoder_Rot.Acc
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 100
OUT Y27

// Rung VGR_Program#24
// Offset 206
STRGE 700 $VGR_Encoder_X.Acc
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
OUT Y25

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
STR C813
OUT Y18

// Rung MPO_Program#4
// Offset 12
STR C810
OUT Y17

// Rung MPO_Program#5
// Offset 14
STR C811
OUT Y52

// Rung MPO_Program#6
// Offset 16
STR ST1
DUPBOOL
STR C804
ANDN C805
STR C805
ANDN C804
ORSTR
ANDSTR
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 100
POPBOOL
DUPBOOL
AND C804
OUT Y53
POPBOOL
AND C805
OUT Y15

// Rung MPO_Program#7
// Offset 45
STR C814
OUT Y19

// Rung MPO_Program#8
// Offset 47
STR C809
JMP MPO_Program.S1

// Rung MPO_Program#9
// Offset 49
SG MPO_Program.S1

// Rung MPO_Program#10
// Offset 51
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#11
// Offset 59
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#12
// Offset 61
STRN X24
SET Y17

// Rung MPO_Program#13
// Offset 63
STR Y17
OUT Y20
ANDN X17
ONDTMR T105 1000 Y44

// Rung MPO_Program#14
// Offset 69
STR X17
JMP MPO_Program.S10

// Rung MPO_Program#15
// Offset 71
SG MPO_Program.S10

// Rung MPO_Program#16
// Offset 73
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#17
// Offset 81
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#18
// Offset 83
STR X17
RST Y20

// Rung MPO_Program#19
// Offset 85
STR X17
ONDTMR T106 1000 Y16

// Rung MPO_Program#20
// Offset 89
STR T106.Done
JMP MPO_Program.S11

// Rung MPO_Program#21
// Offset 91
SG MPO_Program.S11

// Rung MPO_Program#22
// Offset 93
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#23
// Offset 101
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#24
// Offset 103
STRN X18
OUT Y52

// Rung MPO_Program#25
// Offset 105
STR X18
RST Y20

// Rung MPO_Program#26
// Offset 107
STR X18
RST Y16

// Rung MPO_Program#27
// Offset 109
STRN Y16
ONDTMR T107 1000 C819

// Rung MPO_Program#28
// Offset 113
STR C819
JMP MPO_Program.S2

// Rung MPO_Program#29
// Offset 115
SG MPO_Program.S2

// Rung MPO_Program#30
// Offset 117
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#31
// Offset 125
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#32
// Offset 127
NOP

// Rung MPO_Program#33
// Offset 128
STRN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y53

// Rung MPO_Program#34
// Offset 144
STR X19
JMP MPO_Program.S3

// Rung MPO_Program#35
// Offset 146
SG MPO_Program.S3

// Rung MPO_Program#36
// Offset 148
STR ST1
SET Y17

// Rung MPO_Program#37
// Offset 150
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#38
// Offset 158
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#39
// Offset 160
STR X19
SET Y19

// Rung MPO_Program#40
// Offset 162
STR X19
ONDTMR T100 2000 Y18

// Rung MPO_Program#41
// Offset 166
STR T100.DN
JMP MPO_Program.S4

// Rung MPO_Program#42
// Offset 168
SG MPO_Program.S4

// Rung MPO_Program#43
// Offset 170
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#44
// Offset 178
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#45
// Offset 180
STR X19
RST Y19

// Rung MPO_Program#46
// Offset 182
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y15

// Rung MPO_Program#47
// Offset 198
STR X16
JMP MPO_Program.S5

// Rung MPO_Program#48
// Offset 200
SG MPO_Program.S5

// Rung MPO_Program#49
// Offset 202
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#50
// Offset 210
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#51
// Offset 212
STR X16
SET Y19

// Rung MPO_Program#52
// Offset 214
STR Y19
ONDTMR T101 1000 C815

// Rung MPO_Program#53
// Offset 218
STR C815
RST Y18

// Rung MPO_Program#54
// Offset 220
STRN Y18
JMP MPO_Program.S6

// Rung MPO_Program#55
// Offset 222
SG MPO_Program.S6

// Rung MPO_Program#56
// Offset 224
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#57
// Offset 232
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#58
// Offset 234
STR X16
RST Y19

// Rung MPO_Program#59
// Offset 236
STRN Y19
ONDTMR T102 1000 C818

// Rung MPO_Program#60
// Offset 240
STR C818
JMP MPO_Program.S7

// Rung MPO_Program#61
// Offset 242
SG MPO_Program.S7

// Rung MPO_Program#62
// Offset 244
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#63
// Offset 252
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#64
// Offset 254
STRN X15
OUT Y45

// Rung MPO_Program#65
// Offset 256
STR X15
TMRDOWN T102 1000
OUT Y43

// Rung MPO_Program#66
// Offset 260
STR T102.Done
JMP MPO_Program.S8

// Rung MPO_Program#67
// Offset 262
SG MPO_Program.S8

// Rung MPO_Program#68
// Offset 264
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#69
// Offset 272
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#70
// Offset 274
STRN X13
OUT Y45

// Rung MPO_Program#71
// Offset 276
STR X13
TMRDOWN T103 1000
OUT Y21

// Rung MPO_Program#72
// Offset 280
STR T103.Done
JMP MPO_Program.S9

// Rung MPO_Program#73
// Offset 282
SG MPO_Program.S9

// Rung MPO_Program#74
// Offset 284
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#75
// Offset 292
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#76
// Offset 294
STRN X12
ONDTMR T104 1000 Y46

// Rung MPO_Program#77
// Offset 298
STR X12
AND ST1
OUT Y47

// Rung MPO_Program#78
// Offset 301
STR X12
JMP MPO_Program.S12

// Rung MPO_Program#79
// Offset 303
SG MPO_Program.S12

// Rung MPO_Program#80
// Offset 305
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#81
// Offset 313
STRN C809
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#3
// Offset 10
STR C1600
OUT Y30

// Rung SLD_Program#4
// Offset 12
STR C1601
OUT Y31

// Rung SLD_Program#5
// Offset 14
STR C1602
OUT Y32

// Rung SLD_Program#6
// Offset 16
STR C1603
OUT Y33

// Rung SLD_Program#7
// Offset 18
STR C1604
OUT Y34

// Rung SLD_Program#8
// Offset 20
STR C1605
JMP SLD_Program.S1

// Rung SLD_Program#9
// Offset 22
SG SLD_Program.S1

// Rung SLD_Program#10
// Offset 24
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#11
// Offset 32
STRN C1605
JMP SLD_Program.S0

// Rung SLD_Program#12
// Offset 34
STRN X35
OFFDTMR T200 1750 C1651

// Rung SLD_Program#13
// Offset 38
STR C1651
OUT Y30

// Rung SLD_Program#14
// Offset 40
STRGE T200.Acc 1750
FLASHER 500 500 Y899

// Rung SLD_Program#15
// Offset 48
SG SLD_Program.S2

// Rung SLD_Program#16
// Offset 50
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#17
// Offset 58
STRN C1605
JMP SLD_Program.S0

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STR C1200
OUT Y39

// Rung SSC_Program#4
// Offset 12
STR C1201
OUT Y40

// Rung SSC_Program#5
// Offset 14
STR C1202
OUT Y41

// Rung SSC_Program#6
// Offset 16
STR C1215
PWMOUT @ssc_vertical $ssc_vertical Y11 500 100
OUT Y35

// Rung SSC_Program#7
// Offset 32
STR C1216
PWMOUT @ssc_vertical $ssc_vertical Y11 500 100
OUT Y36

// Rung SSC_Program#8
// Offset 48
STR C1217
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y37

// Rung SSC_Program#9
// Offset 64
STR C1218
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y38

// Rung SSC_Program#10
// Offset 80
STR ST2
ANDPD X47
ANDPDPF
STR ST2
AND CT150.Done
CNT CT150 100

// Rung SSC_Program#11
// Offset 88
STR C1203
JMP SSC_Program.S1

// Rung SSC_Program#12
// Offset 90
SG SSC_Program.S1

// Rung SSC_Program#13
// Offset 92
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#14
// Offset 100
STRN C1203
JMP SSC_Program.S0

// Rung SSC_Program#15
// Offset 102
STRN X41
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y37

// Rung SSC_Program#16
// Offset 118
STRN X40
PWMOUT @ssc_vertical $ssc_vertical Y11 60 100
OUT Y36

// Rung SSC_Program#17
// Offset 134
STR X40
AND X41
JMP SSC_Program.S2

// Rung SSC_Program#18
// Offset 137
SG SSC_Program.S2

// Rung SSC_Program#19
// Offset 139
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#20
// Offset 147
STRN C1203
JMP SSC_Program.S0

// Rung SSC_Program#21
// Offset 149
STR X44
ANDPDPF
STR ST2
CNT CT150 300

// Rung SSC_Program#22
// Offset 154
STRN CT150.Done
PWMOUT @ssc_vertical $ssc_vertical Y11 60 100
OUT Y35

// Rung SSC_Program#23
// Offset 170
STR X46
STR ST2
CNT CT151 1300

// Rung SSC_Program#24
// Offset 174
STRN CT151.Done
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y38

// Rung SSC_Program#25
// Offset 190
STR CT150.Done
AND CT151.Done
JMP SSC_Program.S3

// Rung SSC_Program#26
// Offset 193
SG SSC_Program.S3

// Rung SSC_Program#27
// Offset 195
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#28
// Offset 203
STRN C1203
JMP SSC_Program.S0

// Rung SSC_Program#29
// Offset 205
STR X46
STR ST2
CNT CT152 300

// Rung SSC_Program#30
// Offset 209
STRN CT152.Done
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y37

// Rung SSC_Program#31
// Offset 225
STR CT152.Done
JMP SSC_Program.S4

// Rung SSC_Program#32
// Offset 227
SG SSC_Program.S4

// Rung SSC_Program#33
// Offset 229
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#34
// Offset 237
STRN C1203
JMP SSC_Program.S0

// Rung SSC_Program#35
// Offset 239
STR X46
STR ST2
CNT CT153 135

// Rung SSC_Program#36
// Offset 243
STRN CT153.Done
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y37

// Rung SSC_Program#37
// Offset 259
STR X44
STR ST2
CNT CT154 210

// Rung SSC_Program#38
// Offset 263
STRN CT154.Done
PWMOUT @ssc_vertical $ssc_vertical Y11 60 100
OUT Y36

// Rung SSC_Program#39
// Offset 279
STR CT153.Done
AND CT154.Done
JMP SSC_Program.S5

// Rung SSC_Program#40
// Offset 282
SG SSC_Program.S5

// Rung SSC_Program#41
// Offset 284
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#42
// Offset 292
STRN C1203
JMP SSC_Program.S0

// Rung SSC_Program#43
// Offset 294
STR X46
STR ST2
CNT CT155 1100

// Rung SSC_Program#44
// Offset 298
STRN CT155.Done
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y37

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block hunt_exp_light
$PRGRM hunt_exp_light

// Rung hunt_exp_light#1
// Offset 0
STR ST2
COPY 0x1 "4 0x0 MC402 Y39 1"

// End of Code Block hunt_exp_light
$PGMEND hunt_exp_light

// Beginning of Code Block HWB_PickUp
$TSK HWB_PickUp

// Rung HWB_PickUp#1
// Offset 0
NOP

// End of Code Block HWB_PickUp
$TSKEND HWB_PickUp

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C1","copy","",""
"C11","C11_Interlock","","Used to delay logic by one scan"
"C12","C12_Interlock_2","","Used to delay logic by one scan"
"C20","HBW_Has_Pallet","","True when carrying a pallet"
"C51","X_Direction","","True: Left False: Right"
"C52","Z_Direction","","True: Down False: Up"
"C80","Conveyor_Timeout","","Bit high when Conveyor Timeout timer active"
"C90","HBW_XY_PID_EN","","Enables PID control in HBW_Move_XZ"
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C150","HBW_MoveComplete","","HBW_Move_XZ completion interlock."
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"C182","Fault_X_Target","","Active when X target out of range"
"C183","Fault_Z_target","","Active when Z target out of range"
"C400","VGR_T0","",""
"C410","VGR_T1","",""
"C420","VGR_T2","",""
"C430","VGR_T3","",""
"C440","VGR_T4","",""
"C500","VGR_Man_Control","",""
"C799","VGR_RESET","",""
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"V801","VGR_Fault_Code","",""
"N810","VGR_Rot_Target","",""
"N811","VGR_X_Target","",""
"N812","VGR_Y_Target","",""
"D0","MC","",""
"D1","Feeder_Extend","",""
"D140","X_Start_Position","","Distance to target"
"D142","Y_Start_Position","","Distance to target"
"D143","HBW_PWM_Cur_X","","PWM value for X for XZ movement task"
"D144","HBW_PWM_Cur_Z","","PWM value for Z for XZ movement task"
"T3","T_HBW_S6","",""
"T4","T_Conveyor_Timer","","Used to detect conveyor faults"
"MPO_Program.S2","Vaccum_MO","",""
"MPO_Program.S3","Vaccum","",""
"MPO_Program.S4","Vacumm_MO","",""
"MPO_Program.S5","Vaccum_Load","",""
"US0","_CP_Strogram_A","","CP_State_Program"
"US1","_VGR_Movement","","VGR_Movement"
"US2","_SSC_Check_InOut","","SSC_Check_InOut"
"UB0","_VGR_MisScan_A","","VGR_Movement.Done ThisScan"
#END

