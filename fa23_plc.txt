// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\brent\Desktop\factory\ui_cda_mini_factory_fa23\fa23_plc.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
2fb5ad0c7c45b7ad7b37d2342cb66f43bd36cba635a0d85cfc555d77b962f7a932e1a6399e7c578c
0711cd27090e1d84f4c22db1e16d80bb1cbf15a8d0b31ba1acd5c36da82d642b852497b40eee3f1a
e1607f072ae77085f527e2e103b0f122de644c22caebe840376f115ac26dbb0c683af4b3aec1a80a
e3210ec9a56e09756533d948bc47094fc4071b7f26634b1863aec14f4e03a041c0b80e3a24fc7462
51bbae3bfb362e6a3a33f2fb6d4661447f16ca542ba1a4a866d5bcaf4925b8da848adad875d480ac
f1fab411dca5c0a400da7318d4159d1daa4859c1ed533a5df99d4cb8f6a4a0ee683ffadc6d13e0f1
90661cdc7bd5dbdb1bdca97074dbc7fa455fe7200ac65682027e04c72d349ba2dad3ec0570c88f38
ccd55e35c1d6e62153cc0fe6355e74ad230be002fdba2658f950aa1649e11f85cebe9d4f43ace7d5
e7ae568ee00900f7cc1630765d57fdd18e91205545b32f0c187b51829e3137e85de68b0ece8bdc2a
968b44fa4ba700a81c802f9bb3c9e79bfbcae4b4e8a6eeac71712cb4ddeb0e66d794c04048b6b4f3
32339cd5f075637a07796c98765025f15f94bee52fe66d5a3305d676fd4a48d3acd8ed2d3cf35110
2f6006a71c003a4e6573076c5ed8898ea6efd0f81189093e20e621dd43da7afd840293c9c6a03da5
cea0dbc548943f7a5f32e6bb2aa45b475e580f427591c40d3316bc0d3700909464e69e1d7765c4b0
c141b3a77eaf10ef4155771307693b80861ffa3f903c58c9d3c0c2b6666722c7cee27342761bea76
363a350318a93c386624355260089211ee129079ed6deda9904b8fa42cb8129cab4787e122286680
daab51a3763c5c7e8d503d3c5bec36383a9589b81963e20dcbccd01fb15a8c39b9b2f13097cb0f2a
9798ba72d7daffccb15f6673af7c1490812217da0902cb2fc985791e90457fbfd8498bb17b5ef52f
54504e437b04211671e881ec9b4b919ba92e8e798f94885ae93f2353e304d4b5f5fe77360657bafb
b247d20730c5216b55cb5df18f557e1f9452a1ce7a25833249407ff1065e4d4d4a7b706e4e1c422a
6875bdfb174d8b5fe578bc175e4a49cba0496ca20df88ad754e904cbf84ed2451e277d35276bd7d7
fd6fa7cc1178debbe96e86ff59085546654cd1c37eeba8afb4f10d9de4b3a7e0961be5a766db7896
54f1c9ff493413a273862cd7a581861a394e208235770e926751aebb3a19a152d26be491598c86fd
6d0f5df1d68d7eb10df6f09cebdbf1a0fa4b2a4513026b530ebc39cc5488fc312adbe62e2bdd06a5
e4a09dedc59f9be7f1cef71bb03c7e92fef7398b7c2bc055df4b0170a2717b12ea89a3aa5531dca5
a43f98fe152dd6418ccb22b696c6608f32240ab16af6c973474074320f81a573390ed67bae772d60
058fd726f337569f9c9ff3b30824c84f6345bdea126665d0889dfe9de209f5f32866b0cf9d02e27e
c69fdfc0663948e8629fd47f8edc3190fbdcd0f028b24e903d106fda74e1c44e90309f1f048923a5
d799cc6ad961dd2d479b2151cd0835fede17b62e954c748af1456dcb061273cf8a1609febebbe550
46cb6d1838f9f2034da16757e675dd4b64e71534178bc8dc2cfa1b1643809ff1dbe2dd99285d28e5
4f2ee1b7d65bc656025d5dbba0e8633d5c8e5dd2a09316cbbe4c216082a3d2146d6b31630511d520
d3d0674ef77f211d0e039ee8f58b9cf04dee79bcf08005606765535f5d0fed9ad99beb12b46fe123
80673a94a36116e8e0f8994089fa6ab7542bbbdd0372d9089d63e8e00fe889ad4d29436e44d5d0cc
02a79caad33328564ad5b7e6490eaa12cd627abb4d499668fed5ac4c57a9b6294b1ab5f2566d07a2
d1310fc93eceaeea65c2f795a2a55bfd3e7ee255b9cca3da7cb7411943357c139b888bbff7602cbc
2097a3cb497256d0cbea9e6e7cab8186c003373f8db90724ba7dd3a0b92acb84a8949dd7443aaf93
3739de8dfcb0f03c653f77490aea4aa807c45636818a6f4dab824ff48afc83561a68cf95d5da54ce
3cc3ebb14e5c3c8d212a0247fcd56715048fa8eaea36350ad67e4104ba348510e20aca55f79ddd98
47cb28066e0479d0554eb34d94b20bbd606de7c8597b398f4837d51daf5eaead28eb54801c457e94
7744056277b59ff7ed492d50fe4467c801b3af3042c10b6c7871e41ee5613572f101d37dce9051e3
7f51a81bec782e9458d22b4677e66f26a36dc04e3f5b134d23428ab0e55d82bfb660a2ac45530ad7
e06b6204ddf14dce36995f2c26ea5c79f75757ab0fe9d1f5c16b4c120fea123f201430209afb2533
e6c8e44ec73bf9cf1a4a98d780e00af933bdcf767c80f58aa6103537f22224056aa7033897e3776c
513d6cfcb5203fc603ef64ac9444d498e45cc5fdd48c24e7414518dd868df078a25a346529087ce5
7e252544d6e0ceeb7f923405768b49a9049d15d15991bcafa1d53369e439d988ceb802fe2d415147
9158c4b5d02b364ae66abaf38820d1f7094dd3e636a7385f55f0aa98d55d775c80805de9b9065b9f
35cf7a5b34bf9c29a056c0eb5d4c46726436ff0c4223c65c8668b5731e84ad862c1936b53f1df8b0
9c135e64e5b312ec19af64fe3e9aaacf1f18f5458ae18797b72568b506f156d69d1a8b8dfc538710
13f845bab5b1ca6184f6c03571cd8918b963c2c4adbc196148391930bc8b533b4fef09914910f12a
04621907dd10fa201300b4528a1add1e2dc3a1e758dd5eab5c67c3914f6ca5dd772300806d6da886
66ed2cdbbe28c16a375eaee711456df4c9564095dfcc28e67d01557f729cc7df3e0c3eee2d46ea9e
0418a35d2e093c76289a757f4301e7ef480bb465da669768d2431ada5605273869db75e56fc391aa
20bc47dd5c2a4bfb39cc330c5f8bdf200fb3eb86e579e44d8a0be950940df0951c4ee1921eb9dd22
82dd41b56119d6ba7e7c38d221d431a9ea5f85c7c7d45b80efc4fa95246ee06c573ae7d82c64ff59
0df7ba91880db0a763f3ab9e473e49fa21bb4118a40a1a4d58bd97be7968ef25de56c5cc3c819304
b23a275586642c678045dea064b7c6f27d46877650c1d63728edea5ac033f61dea25f809f485e4e5
dd679989c9cfc00a2fb0c89c98f232092c392f04c5419f37737bd1a4edb65e81392e4cd3ff418917
bd0ba297b0a0459c224b719dc5fe754b188f0529b8ef7008980ef2011f8354702ef5a604f71f27e9
5a61ff1096732bbf0f4d692f8bea3ec9ff2f60dbfd1dc8df695d1d195b7b69e64e9c2ba18afcb24b
03150cac11d3331d7f9f64b7782766c17f5fa720ba09970a6556c6f5ed745c84c4cdcacac5a5f9a0
7bdb7aa59259463d4a77a85a836c632ce001a36a73f8815266ea74b1642fe82a1755593de8cf5613
dabaacb30a11ac43d6ea633301f1e506ea081cc17a5a0da81bd214be0d8567afda455cc934ca1335
6fe1c1cc4669f86c5e12d6a94b835f9f318cac5417027e0c04da0461211451cba8f72a2d6b955c47
b6ab179ccc42222e24fb023a93ced42c899ec32ae13753b36989d508eef96e719031aa27e519f990
b37d4ebeea3a464aa3548764959ab75c6ec2047b78e165407cc643d85595b9405aec92e99346d61d
85d1b38d7f1cfe06a622d9cf35caf29a6bc308a5cfbc7d2a1c7233ecfeb64f93ae1e88434e27be75
a3c7d70de5ebc976b829586fffb33292977bcbdcd717f0dd9fcb7f9526b7b244648dc25945056ae2
33930d08f352c9449e62e28ba8669565a94b6259c7238456713d4b110a1e522dd766ae865f4f4d17
a045e468623ce68347f50afc002e6630a95aa4c7cdd2da0ff59003efeb7aba5e683e533b5503c59a
87bc97bd12000055faff81091ffcabb8b6a428855d547cf991582d2148ab0c161ddd3a0f4d6b8c13
d3f5b0d56d2efadaca708385e1693ca7ca0ffdd6d3b1439015b7cd93bcfe67757520f3b68b0117f4
c3d87809d60ea507ce39a8d5fcc799704d80dfc2f9c2e89327cd7ee7a2b7967f308b905d37bf6e4e
d4a5d8259b3ad8976248abe26e138634e280876fbc11b3c99783b16d33e67e1c9c799468d826fa76
00164cab9e6a22ab3ae47e893ff4ff7fe57823d27334e0677bf9b256e297de0056c765a2934bfe56
4274224f27493f363dfd1a07452e9a70c39adf222eef9bad4f9c88f7a4e58e228aba2a21144fc1d9
98294619e034a734f445cef2a52e988ebc0012e6ddb69fb993ac86fffd94d8ad8714b661107fafa3
447699e4fa710f96293a2e4897fb191a68f0e06a1ae9b9148be0160747b16992e85bd64c84f1465f
a5fcb4cf612711a6436aa2aa80c203d04fac647a6894e10bf42d28a420a9c5d098f1a82f04740d0f
d6516ee60e56337fc92270c2c29f6e457b366f8906c6d18c761e62e04a9088cc4497d7429d4a1367
20eac6372b6241a3df3e9109c6fc9b93edfa33c5a1419b73163ec6c50b308057b3650304e03334c7
e8c56614d326f27de102f1afd58aa09f44e434fe775f9262865bd96eb54d26ac37f850cc2b698ca7
e577155ba1e135d8b3c23a41dce14adc4d27fa34b884bc540e02ae92b5db93927911fca485b2a406
8397e17d0b986d959d8efb3902c16a49b60eb8754ecacbb798beb926f8a6189529e44f97ba9149b8
b9bd7215ca8555324fc995f63d81fe562b0eeb1afb52f94bc604567855fcb39cec33030d62597cf9
43318d8ebcbb94ff31e52fdfbe741369d00647753147bed82ae927b7fd808335d706736b89a22ffb
ba88e2896dfcd1ef2b356c5f6373739845721a786373b77fd62cd1616ec7fb61cae1f8a78cf3240c
b4e05b50a59701230d75a640d51acee0a57bb3cc123a0215991fbead69848fae696b760f51dbede9
0cf260c271d35e6549d47d6f3d60a4b513d618e505f89549aa96758d8a2697c3a198dca47a2ce428
d1d5413f93a580a692c683c0cc838ccc58d598bb8fa120d72ea2a7388dede14f8094d75fee15e8c1
2690362224564863960934fc0124edc0830b0af10c25a26bb7719c808406ad470fb3e869bb07f6f0
1ef8ea0223e3364bfa133bbc927af0e6e72b79b4b9a6b9c88796ff67d8fc34de463fc3418eda1e76
dbf8c7f61f5e457b69a7b88625fffc8bac0754279b35822d525b450782927b82ac54d1ff01b24a67
94439da9d33a443c95ce62745d0eb8bd4eb56125b7742f7d641dd470103b0412042a17bfee717564
ac9a1d3de0d1f3ba75d6c0ffd39b8e081cd8f8dc6ba258a4deb98d2e6bce1f1cb004d6029aba2dd5
594b8e35aaeab998de8dfd793b58138a5b1ce611f4ae22a753458f0ea532345883393fb1d1970528
94b5b9790ca2554b99eb6ed00d122dc6358c3a6cc7143f9aa91321559148068e8f7510de221ee9c0
a72b35e83941eb9385cb6e69fab63e6140566eed95da32def491b5e4c41e273434ccb41435f97045
9eaf347a1f44cb5f83da926d161467cb431c69599a452e2aaa042ca905e1fcb8789e83563bc64f70
6e85e7a5c59b7cdebe2df644540bdec4db5d2cfe202b0b8149e56a9c7f3ebeaecb9826c7788a8bce
83f02c60fc9a670b37005665f98c607ea408efcf7ee8bb478e12709e15d5ac176ad6a08a1fb785c9
08a79282fed3ea88e076a894aa61b846cab293c57b86d22762322baca1a518acd2f2c7421326643a
a3b026812c9a8ee26f6b4f0595300248170e9d1a6c65d730d3f1bfd7e7882a4753ebe76cd691f81c
30f70ff988d41118361d25c0ab3ee9f5deb88ee854f91b8bf46a63cf6e2a8136b1de0163ec4d86e6
d70cf971ea217a54d97e0ebf3114fdaaedbe20b1c0fd8d91eff73be3ae8645b548e93a80b97d9993
10bc63c21a03470e8711632f8851d71dd30f80e2ab79b807498fd2e1d2f25945cfbfb21467a54ce8
e7d61622018b30524e288e578eff405b11527505f12d646ff8edab42729cbffd217d2d3e6e39538d
7a31529b34c79a35acf34f92341e6151b4b8a4b2dd2e7dbdf8e106445235828375519733a1c9197c
e92dd54db972a5de1e4ad25a2a6b1344d4cb225e5e4c1cf8f9ac2041e144e8eaea2ca71f99e7029f
aa24df9fa8520cf24a73ef92f8405deffbaad47f657279b184c01fe1a50d71834288b6412585628b
d494a346b3857803ed7c5a835ef95e5d7275e3dda812eae1330cadcc8f2cd585948cf6278383c92a
e78da679ab7852dae97988afd8440bcf60e79d26b64758d6f86c9eb4ffb1ef7dd81f050a49b8c510
06ecf8ed2be16e814eb5017c12fbfc7a10bc2777fbdfd1b372e43b453c73c6f5c5214f7f30cd2845
302872d361bacd3e2ec0866f0586fcb51b6eaeb714414a7727b85808a8fc644ccf431807d29e37bf
70f81ea7839e57202e47781ed42f110d2dd3f2437314d1cf4b5bf23a5b88e3c9a0a582f00dcf7200
3590b024618d7bff8db23fbd45b5b9fd59b243af3f0302db6e1f9af17f5345cbb19bfc19e549153b
ab9d8d6c353d6ee8234fae677c41034a462f6148cd705148687a7440b4b50de4e53ce6ad7e976d2a
359fd4f2f8adf02b254c969acf18e415c962f8bb75bb5a429debe72e1a570a7c2f177b40084bfe67
d5e801859dcdd16f8b3e61a63543343887f899a9ba90cb65e4b6e9ddc930704b5b96ddd4c75f310a
40152690818efdb8b11bbd99e5685f5d89e25a28f949428e7f3d4431b1973ec1fad30ed86e800bb5
ca75cbddf2b01c0a39b6db5d952ea6d069dc9f882d255fa5e594f612f0696e8f5c2b78ae84c7f5b9
6bd9e43dd3a3dc669f1252fe72ca88f2645dffc581c1ed8ea4c32658232c34c059e0c7a45b819af2
ca3199a883d8787c2188c8074ec61c1cd7c4b88d22debf6fb04fedb701fb2172bb3b4fda418231da
1d9adf67e187b5c375a28e7b6d1793004da9ebcc1fbdb9e4e1f8772aa27818d2c1edbb2bf4d534b9
91fa5321e463db8c6fbf4ced7fc03178b72b5a1ce8654124e95afb87db1555a4f55c4aacbdca899b
6fb171acfe27b348d9a3b2ef1fc78baff46fc843756e81bc0966c4a1eb7fa919769f4e14f94e5076
1b9e1651771809f30150aa685b492377bf1eeb1c6593caf6afcea34a83cbe007a40e93c945ef3cb4
a350bc3c34d9aa2e9c5fa7c9def7c0b07d0abfd5c2f15db7878be839dcea1fc5abf3b0df85903972
93c4eefbaa45c5b3b83d77b86b30e272450598cefe1b53df2c94e80165e37b582c3f2bf9721d4da7
13124c5cb6440528d517aac7bf2155a4813fe15ad6932e40f66d9c682a4d2300b971c77b72e6a31e
372ea582ae86c3a1c1b42da9ef77aee76db8b2b6afc38b47329ed6be0d490030a892dd349bafef8b
605d1cf3868061f7577e32bdf3616b5859ed00657d6c15b8e12c50745f534d3fe23c0623d5d1ec57
8ed6f70889ede430de08e8cf030817ad0a282623b1f66a9a12c8c2565378c8ada18abe90e1f01bdb
7acc1539542543dfebd167105f195925d282589915d49fcd9e1a61c8522b1f5667c05eea81669c85
27b52c76a4565939d9c5876533ca59b87d23541c43ea7776cf95792d41e4c66dcf0b5d12142a6642
a789b6ccd0fd1003605452db3ab748b61f6f6a99f4d13abd9eb1ffe5d5c8682c260866841d904f12
1caefc3beda0a3dc28a28886aaeae4e498a206d15372a645afb78e4144ca60d0763ab367a356bcdf
9fe9708de805ccd1541c67efadd30577dc5eadf02b2a8953b4a137c0a4baac43316c214f434d9d99
609555cb1676dcb431fd9f25f08a7b77cfba47cf82080cbca52b7ef081deadb6b148bd7de33e5e3c
d36cc2d680fdfd670a54064696132b71c8c484fc52412b65c0acb452db2fde2d8a8cbc059d4690ea
b4350bc52d63bde3cc94aba9b20006915c1a5d790015cc70835a7b1f8daf9db17cc8d60c4853e884
11eae0a34e5672afba94396a3119964284451cdd4d4057c52d6147f43381f836bc4af4ea8d05f184
2705bd63e685709b8a5642fdee08439f78cb0791d936a6fa9bbcaeeeb6691a427308e12a99f8d5a6
61c63fc0f9ecf34577f06969e0144ab3c6071f8c01bd33f90deff5934514a5f045886344c09b40c9
01903a178f9003fb26a55db19b2637dec44c208e6a4bec94061de9b34a8e1689f6e68b0abad3cd8a
cf58de10a10b08457fdbd2b9ccb23a7e8874730e55b73aa76016a209beccffb4eda38ea34f920c7d
c87605df7ea7745e64a6f50f5ebb8738615299a5a04dacdcfd2d713f100ff95e15820ce3ca7714ea
7872967bba76a0296dbc643ebb3c88df804bc8cebde1a212e174b6b69a8b9cac389021cef36ad751
6a05fa769b79998c2b086a315442ce357d4645a998c064c3cf9b05f4fa3ed5ff530c99708d959f8e
d45c15ae69b95e90ea3c704fa8abc505ce4ed4f6f307c176cb952839b197205a7c084421c5452122
6e5c1501d08d0f07182d3754f7f3725f1e2411f24843e85e546a1d3da5f799930e4effb145f382e4
6d51f6bddeae93400df0c06768d4061dc3846decda8194877ddf16e02b2a2bf225bf673c232e2ebf
6639e00596ed2416c805fc44ec89e294406c76e6be2008cd34c07bf44230a74bd52f9f1f717ae3ab
8d2626a3979167bd4f4a669965e3d0ee2b9383c461ca9fed5a87895de51faa280a3f98bed0a2fce0
b0335a142eca4a27d1db307205fb1dc67f289c0ef387b3e8ea17334d3270b6bfea8f4da8d5ab8857
dc034b6cb447c975ff011f088f88670ef737e48c5c2e33014374beb45c70ef49d18ee7aef4d37336
77a78fef6e65b9865425ab904bceeb3dc8041a775e0c3ee4069d518df097d9edf56b8c7739481d00
c3c266b573fa84d84844631ee8598e6aa4c95530e1dcbf1858ccabe4dad96f40d98847519c652ea1
0e2ebb641b517ea1b6ce30fde075947c1acc57ec9aee6639050a45105789e4d85ef1022228cd55cf
48360395240eaa6762d3c979651b52ed492a45a73b693f1ec581f6418c95393682d212aa949568be
c53017ef0f73fc164c86a3fe3f6f323e3ecb85df48b4334a5be3e633bd570631b0b0b8e2b9287f2b
7e586f3fa2bd70fd8b15ad2056b5e4e54bac76a001db9086d85f9df36ac45b150ba4a78869241078
5c403a13cc9512713144382b0ac2a062c067fb9eaf5f4aff6f85116e6a37f4c3a8401e98b0d5c988
67f95f60fdc41d53c53bf8ac43c727a59968540fe6ddcb15d4c4fee839b8e0c5990651ccba81df7f
0ce714a2c0be1391a3924a1dc5fa247f3650ab0043b2dc6ac09d99bb1ea3ceff9519274be0d3db48
9b1df0074757d7ac6c5904e937671ad6a4dd8fec4264cafa80067a9049c12ae94e04b10574c12ce9
f88da78a55caa0ceb189832bd17d193e0203ca97c70dcf6ab560a937d3172f70fbe6d8eced405867
c28f0390fe6a5d04ab68083e8d387ada29271c67df4d98cebf37f20c383cd1b396537c131b48a088
bfc1b0a04fbb5125803acf76cc86320540216ced671fb31804c50e35b01612b7781c3c66d1fcae31
86ea5a7e86d1174af6ef51b22fccff64f70f994a2ed189341e54699cacfefbe5a6ce7c441f587ece
a62aa2ef7acbd483ef047d240caa9fa0e624f1727fd2c5eca80d28741b0e7de865eeb6614991850d
c5500de37a5c5ea3812ed0fa34c40e1d39b3c5fa5b3ff2e41f22310d2fef61f113c70f983fca0b27
6068e58da885c648c5cf9a4375ac8854e4dd69c4d24947fa30e25924610302df7c9baf32e256eb4d
5ab342c6846c925da041b089239299ad3f0d8e64bd4e60de414e6ea68b7e5f58adbcceb15741d643
a2df15067744c2143feb0e673b365ecda70b35dfbcad3f3c83c902c6de9e5408c07f35a0d2396cf2
99bd8d8cc4875e7a32479c2cc6d5b76747d1085316e8aed747009801ed4fd6919e90e063a6ced75a
bd3d8c4d1b1525970372257f5caf8dc6b8466dfdfc010ca25a8a55bdeea845ca52f02788d499fd43
983292a200db49bbcbe5e42f918f22f1c947d42cb896437b0cf8a82fb6d2125c885c8e7cbb9d018f
6c999fe677ac53a36b07d2b6c62162131f4c357ddfe2ba52ad27e8d95ffd719a4ac76087f1bf7cd5
54d368a37aa2dd9d5fe07cb38e910088b7db32f88a44031b87a4d0fad4686d8b599e7e7d442a47b6
8650d2719c5d42e7b4220eb3b70d25a41cf1c07ad396436d88bd285886448923b3476a28c75b5dc8
b85dc71dc38a5919e24358bceab5f56152d1085a5bce893eaaec968386a9eaeedf354bf34171a6f4
f79920fefe567bf3f74b7dc2311e198fbe0d13005b33165b24bf7a0206c180a22559a27ccfc62aee
fabe5299617403c4afd0baa86fe70e1cbe02546a4c4ca512b0342ddedcdb3f69d0e7358268339e6a
5275ee857b9d3a5439f052532306baa4f3064d8842e3dbe9990119cfa0d2727e53cdbc081bcb3fb4
79c10d15ea647800675800169334178649964e94ea19d254aabcb8827c87ac75790014a1ecd1eb15
c7b2d428eae3cd59a220de0bdb985e6cc3780f2fd0d189e5b226959cd7b67d41f778cd78cbb112e1
09b1faaeb466126f852fdba2687d6ec34cf993455bad62d91d88b5a97ffc2508ed2f16bd640c4d91
b8dedb152cfde8ea8578f65b0ca32e0b3223513f704665a717b70a32811d379ff916952aeed72e10
34719f72de88c3253bb20eb2700b801cb2eccbebe4dee82fcaba01607339d1579705e36bf17330bf
752de222cb345807786fe2b08c3a5174d33f591c3b6f87a300c7118a514fefc9ae5a2f9c8650c0fb
a996cbaeea558ebe05bf520b0cfa9abf9757cdfd0cc28b74f6fda4c9d5ccc493ed90952de034df64
b1fd294db715c94e093ffcdf4b317ec3593ee92ec64fcebe8619ba974908915c40c90d28d5c312e0
68c821979a9c447f8dbb38c955ad0601241f66a3d40743c971fdc3bd4168ae32f1cae2e0d9fa29c0
50c63e3d63b928634a46705d6948869c0029d7304e7641536d8196d8d3695d6103c0de3d70552c45
4c99cff8cc74bef00de8b1125c39abd17edb098e3d519aca7900abe8362a057efd6625c41fd68778
7098dd9ab85e21709322a5adac2d94a5443a449f01dd0ebe53b40d01690332f505488d3f534f5f9a
a3c6e684301547a6687b6bd85756cda52267c83f2246a68c0a3abacf27edf021b4cd959b54e1a970
d6a79f027409d7f8b8e8c0ffe5cc48c88cfe1353c3fe9d92dc34dc0895388cff8bb86f8efae4b191
d233de49e544d9bb7cf1bed909a568d2b5b67c88dd2542eaa750536acb102dd01f5aafb5c072c682
7501fe2fe35b13e64dea9bafa1881bb5cbfea9e15042b52db1ea6dbd60d6fdccf62024403839b3e7
6e4f7843aeb6da787d334397ab5ff42c24e3a04e99a0f51ea241507ab8eff13d3db053edb4440820
47964138111fedc3d02411e93781c87544cf460650f0ac9c5270ebf685ec5d07b1e7196129868a02
d4530079750c04101f2092ab1b7d39d95276917db054929a63819507dd907b178f7c64dbbc12ba3a
6a9830874e023921329d87caad773730edaa4281b3bdb663d219a65a987fc95ab1fc6b4479269b3d
da6cb79814282d4ce05193fb9413b7eb4a79fce355052fc6814297c23d8c888a9e32a7e684ea5885
6856300f7962a736bf270348756d54d9d69d927fafa67b82867fbd4a55beff2e100c94e7caf9baa4
828aff10f568e66de11c7583a3e827341d68d7b4c6e4ea3dca2036115ba7a9f5f0fe83e50964ff27
40ad815f2d0aed75caabdbfa07e84d91c3818a2722e76e8103581443a98ad2e1f923cf8dbad154d5
a92e6a88731def1294f05015bb6b86291d68e989c1b23b009b6274d6d63d91b4b5ccd77dcf5c7571
5ede96c3ff553f1a048aeccb831934f75343a97051b12bd8987e9d1383334a22e4a8be3936491e6b
7fe5bf5cf11f527b521612a76503c967f518317254539659738468a4bd60b94a5e803a3d4388ec42
f7a148a9487c7d3a887fc2a53d9bdf75849269f176763bb2adb1ed633afa294ab645fd4b6e0ab00b
d7d24aa31517704bda6f777972ae93c74c23b8be84ea6887bcf18ecd7dde89f3d5c324a706bd1f32
c8deb3da2da4f3aa646fc289f978b6fde0ee17d0d94859b0427532f683a62b04a5b800fef8232936
60f94e7c4f932b4a12ad086ccc21d0c224ba3444efe9217544f2987d1477d11f098e8b52c9d44312
7c101b4d4305399be705e6ce23e1a66d0a3902e3a1f94d70fc207a1638ce57831dc1228f91a05fa3
c853bf513d692cbcf5b42b50a5e416ef99b4ba00c753e737f4f5247ae9ef94e1a355c07700a45eac
2f0b8eb5ae34c8989fcd05eb360385e64ff6514176e80059e49634e422d9184601d6a5030190d133
d2bcf832fdcee29daa64c3adacbf293fa1ead269d4b5cefde90b4c85685dc91a43314b52bf3d6bec
55677377bc6511cede52a37fcac9bdc6837d98535350ab9884f1c32f2c21564e4a4870acd8062227
a8b9a14509bffca83a546bb42e1f74e05be2c6afc3fe32d540999877e6f13d4679373ef1c46724fb
feec675453c1f68c3855cf5b6fa765478960a48f0d5b43e1c1abd6f5127154bbc359c5ffad41a857
d8e7f4adb73f0c75d898880915e1e68c44f0b436dbf5f26b6f5c746bb6c550a58d3049a73c0ff076
a955ba45a01340520e585d70422905c029b87aa77a1472f0ffca22c1a0d1d563aafb754923c45a8e
d5f79b52e1da189b61902d665d932672dec8f4128bef2ec9cf05b29d747bea2586aa4601751e09a1
9c093d387eea381b9514083f4e4bb31b9f15d411c3455af4850c79615c9d7c233a096e00051d1af2
7b21f756acd9465b8d681cd4851a1985c30cbe8e343b1658f012b4c96641bc030c47ee2ac28f8836
15394f25b7052e1d95d71a94c33d0d92fd5a88c72108df23d0b1eba02cd7c21a2b98b9bde7c6eec3
3e16d41c3dc84aa0ea8bd51a2b823e0ae353128e70cf27bb786a90876d2207be9133a0e3d7e7f796
f7bee5ac113459963b8c8b311f6d15e370921982749e46c502bf71a95239b4af0976eb610d9b0681
89acc62e5e6072f08f450108daeb47641c980f74fe99f0a5d55b2e6ec07cb55bc5ccb53bb6442642
c450a5967c8c7e7e1a1a64916aebaf81d74f797a82e03da4c9ca10b5e017622842935ac6f3b92afe
71155c075ee35e4a1b9586f985da7eafe6eb0ba19b71b989ff06c84fb878dcbf0c627e62647b2792
7c5a0dd2055ebe848bcf58bb7df3eed2bcce137e3c2e22c9f9b3ea8880fe3c34ca0747e4f21fef10
67187612254d98fe248fe72d547706da35220235a71d11ddaa43a2fb6a5aad963a75e2ccd7aa823b
e11e49fb9c281a6e9841b3bf9bedbd979d7ab7e7140b1c89dff22c35d388162b62d7f3a64fa70133
b1dbb02d3f64b7dfe84bcc493a334ea3d2d4e07e7a39c87594b42265ebde33d5c0bd556a0a1aba6e
e3b59a595be1682c5599427ce96f3c2b8081e28349bb00cae337beeac7551e6802c7d126d445f070
22b7097e3537d02e8235df65e10f3bff7d820655bd738c0775a471df0d08ece4e39014668f7fab23
a2df26b51573ca7a81044fa6a47b99e42df62b291a9a44e157fc64b1f0c8d8a5ee915aae68219d89
7c07add09446fd244842bc7d6fcac731aa6f02fafb2d64ef168fb56e09df36d740050bfd6d7d7fb2
a71704d5926acd0fe6dbc6a57015a9b19dc8b71a115fdb4132fc4d2f423564a85e0f28f9b30e4bf1
7d4339f146f73555b2fd0d873970825037821a30df12cca720013f5eff732b427e09b77eb0c5f93a
1f40a81a313116007bfc24f94e00a56ab2bbed089ff420eeb0751d9bb67a600a15e5a95c83e96f52
7e1b98b4e0e2d4547b4c75bfb605e89286babd9922d0ca0231
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Pick TASK  0 -1
 HBW_Copy_State <Virtual>  0
 PID_10 PID  0
 PID_11 PID  0
 hunt_exp_light PROGRAM  0 -1
 HBW_Home <Virtual>  0
 HBW_Pick_Sto <Virtual>  0
 test TASK  0 -1
 HBW_Pickup_ST PROGRAM  0 -1
 HWB_Extend_Arm <Virtual>  0
 HBW_Retract_Arm <Virtual>  0
 HWB_PickUp TASK  0 -1
 HBW_HTO1POS <Virtual>  0
 HBW_Left_1Block <Virtual>  0
 HBW_HomeTo2_Col <Virtual>  0
 HWB_HomeTo3_Col <Virtual>  0
 HWB_HomeTo2_Row <Virtual>  0
 HWB_HomeTo3_Row <Virtual>  0
 HWB_HomeTo1_Col <Virtual>  0
 HBW_move_left_1 <Virtual>  0
 HWB_Home_to_11 <Virtual>  0
 HWB_11_DropOff <Virtual>  0
 HBW_Pickup <Virtual>  0
 HBW_PickUp_R1 <Virtual>  0
 HBW_Send_VGR <Virtual>  0
 HBW_PickUp_VGR <Virtual>  0
 HBW_Return_VGR <Virtual>  0
 HBW_MotorsOff <Virtual>  0
 HBW_ConvTo11 <Virtual>  0
 HBW_Return_Top <Virtual>  0
 HBW_MV_11_12 <Virtual>  0
 HBW_Conv_12 <Virtual>  0
 HBW_Conv_12_Lat <Virtual>  0
 HBW_RETRACT_13 <Virtual>  0
 HBW_Retract_23 <Virtual>  0
 HBW_Conv13_Lat <Virtual>  0
 HBW_Conv_2Row <Virtual>  0
 HBW_PickUp_R2 <Virtual>  0
 HBW_Conv11_Lat <Virtual>  0
 HBW_Retract_12 <Virtual>  0
 HBW_Shift_C1C2 <Virtual>  0
 HBW_Move_R1_R2 <Virtual>  0
 HBW_Retract_22 <Virtual>  0
 HBW_Retract_21 <Virtual>  0
 HBW_Retract_31 <Virtual>  0
 HBW_Move_R2_R3 <Virtual>  0
 HBW_PickUp_R3 <Virtual>  0
 HBW_Conv_3Row <Virtual>  0
 HBW_Retract_32 <Virtual>  0
 HBW_Retract_33 <Virtual>  0
 HBW_Retract_Done PROGRAM  0 -1
 HBW_Retract_DN <Virtual>  0
 oneOperation <Virtual>  0
 HBW_Check1Puck <Virtual>  0
 HBW_OneTime_R1 <Virtual>  0
 HBW_OneTime_R2 <Virtual>  0
 HBW_OneTime_R3 <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
#BEGIN FMT_COMMENT 
"VGR Program"
#END

STR ST1
COPY 0x1 "4 0x0 MC410 C410 1 0x0 MC409 C409 1 0x0 MC412 Y28 1 0x0 MC412 MC450 1 0x0 MC411 C411 1 0x0 MC408 C408 1 0x0 MC406 C406 1 0x0 MC407 C407 1 0x0 MC413 Y29 1 0x0 MC413 MC451 1 0x0 X27 MI200 1 0x0 X26 MI454 1 0x0 X25 MI453 1 0x0 MC452 C452 1"

// Rung VGR_Copy_State#2
// Offset 33
NOP

// Rung VGR_Copy_State#3
// Offset 34
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR ST1
COPY 0x1 "4 0x0 MC800 Y41 1 0x0 Y41 MI801 1 0x0 MC802 Y43 1 0x0 Y43 MI803 1 0x0 MC804 C804 1 0x0 MC805 C805 1 0x0 MC806 Y44 1 0x0 MC807 Y20 1 0x0 MC808 C811 1 0x0 MC809 C809 1 0x0 MC810 C810 1 0x0 MC812 C812 1 0x0 MC813 C813 1 0x0 MC814 C814 1 0x0 MC816 Y45 1 0x0 MC817 Y46 1 0x0 MC818 Y21 1 0x0 MC819 Y20 1 0x0 MC820 Y44 1 0x0 MC822 Y52 1"

// Rung MPO_Copy_State#2
// Offset 45
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC800 C1600 1 0x0 MC801 C1601 1 0x0 MC802 C1602 1 0x0 MC803 C1603 1 0x0 MC804 C1604 1 0x0 Y31 MI800 1 0x0 MC850 C1605 1 0x0 MC805 C1610 1"

// Rung SLD_Copy_State#2
// Offset 21
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
#BEGIN FMT_COMMENT 
"SSC Program"
#END

STR ST1
COPY 0x1 "4 0x0 MC606 C1200 1 0x0 MC607 C1201 1 0x0 MC608 C1202 1 0x0 MC609 C1203 1 0x0 MC615 C1215 1 0x0 MC616 C1216 1 0x0 MC617 C1217 1 0x0 MC618 C1218 1 0x0 MC619 C1219 1 0x0 MC620 C1220 1"

// Rung SSC_Copy_State#2
// Offset 25
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_Home
$LGCMOD HBW_Home

// Rung HBW_Home#1
// Offset 0
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Home#2
// Offset 8
STRN C215
ANDN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 60 60
OUT Y51

// Rung HBW_Home#3
// Offset 26
STRN C215
ANDN X3
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y5

// Rung HBW_Home#4
// Offset 43
STRN C215
DUPBOOL
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y76

// Rung HBW_Home#5
// Offset 64
NOP

// Rung HBW_Home#6
// Offset 65
RET

// End of Code Block HBW_Home
$LGCEND HBW_Home

// Beginning of Code Block HBW_Copy_State
$LGCMOD HBW_Copy_State

// Rung HBW_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC600 Y40 1 0x0 Y80 MHR102 1 0x0 MC101 C205 1 0x0 MC102 C206 1 0x0 MC103 C207 1 0x0 MC104 C208 1 0x0 MC105 C209 1 0x0 MC106 C210 1 0x0 MC107 C211 1 0x0 MC108 C212 1 0x0 MC109 C213 1 0x0 MC110 C214 1 0x0 MC111 C215 1 0x0 MC112 C216 1 0x0 MC113 C300 1 0x0 MC114 C217 1 0x0 MC115 C218 1 0x0 MC116 C219 1 0x0 MC117 C220 1 0x0 MC118 C221 1 0x0 MC119 C222 1 0x0 MC120 C223 1 0x0 MC121 C224 1 0x0 MC122 C225 1 0x0 X2 MI101 1 0x0 X10 MI102 1 0x0 X11 MI103 1 0x0 X3 MI104 1 0x0 X0 MI105 1 0x0 X6 MI106 1 0x0 X7 MI107 1 0x0 X8 MI108 1 0x0 X9 MI109 1 0x0 $HBW_Encoder_X.Acc MHR1 1 0x0 $HBW_Encoder_Z.Acc MHR2 1"

// Rung HBW_Copy_State#2
// Offset 75
RET

// End of Code Block HBW_Copy_State
$LGCEND HBW_Copy_State

// Beginning of Code Block HBW_HomeTo2_Col
$LGCMOD HBW_HomeTo2_Col

// Rung HBW_HomeTo2_Col#1
// Offset 0
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50

// Rung HBW_HomeTo2_Col#2
// Offset 17
STRGE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_HomeTo2_Col#3
// Offset 22
NOP

// Rung HBW_HomeTo2_Col#4
// Offset 23
NOP

// Rung HBW_HomeTo2_Col#5
// Offset 24
NOP

// Rung HBW_HomeTo2_Col#6
// Offset 25
RET

// End of Code Block HBW_HomeTo2_Col
$LGCEND HBW_HomeTo2_Col

// Beginning of Code Block HWB_HomeTo1_Col
$LGCMOD HWB_HomeTo1_Col

// Rung HWB_HomeTo1_Col#1
// Offset 0
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50

// Rung HWB_HomeTo1_Col#2
// Offset 17
STRGE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HWB_HomeTo1_Col#3
// Offset 22
NOP

// Rung HWB_HomeTo1_Col#4
// Offset 23
NOP

// Rung HWB_HomeTo1_Col#5
// Offset 24
RET

// End of Code Block HWB_HomeTo1_Col
$LGCEND HWB_HomeTo1_Col

// Beginning of Code Block HWB_Home_to_11
$LGCMOD HWB_Home_to_11

// Rung HWB_Home_to_11#1
// Offset 0
STRN C215
AND C250
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HWB_Home_to_11#2
// Offset 22
STRGE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HWB_Home_to_11#3
// Offset 27
STRN C215
AND C251
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
POPBOOL
AND ST2
OUT Y5

// Rung HWB_Home_to_11#4
// Offset 49
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HWB_Home_to_11#5
// Offset 54
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HWB_Home_to_11#6
// Offset 73
NOP

// Rung HWB_Home_to_11#7
// Offset 74
NOP

// Rung HWB_Home_to_11#8
// Offset 75
RET

// End of Code Block HWB_Home_to_11
$LGCEND HWB_Home_to_11

// Beginning of Code Block HWB_11_DropOff
$LGCMOD HWB_11_DropOff

// Rung HWB_11_DropOff#1
// Offset 0
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HWB_11_DropOff#2
// Offset 8
STRGE 80 $HBW_Encoder_X.Acc
OUT C250

// Rung HWB_11_DropOff#3
// Offset 13
STRN C215
ANDN C250
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51

// Rung HWB_11_DropOff#4
// Offset 31
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y4
AND ST2
OUT Y5

// Rung HWB_11_DropOff#5
// Offset 51
STRGE 2730 $HBW_Encoder_Z.Acc
OUT C251

// Rung HWB_11_DropOff#6
// Offset 56
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 60
OUT Y7

// Rung HWB_11_DropOff#7
// Offset 73
RET

// End of Code Block HWB_11_DropOff
$LGCEND HWB_11_DropOff

// Beginning of Code Block HBW_PickUp_R1
$LGCMOD HBW_PickUp_R1

// Rung HBW_PickUp_R1#1
// Offset 0
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_PickUp_R1#2
// Offset 19
STRN C215
AND C251
DUPBOOL
AND X10
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_PickUp_R1#3
// Offset 41
STRLE 80 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_PickUp_R1#4
// Offset 46
STRN C215
AND ST2
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
OUT Y50

// Rung HBW_PickUp_R1#5
// Offset 64
STRLE 80 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_PickUp_R1#6
// Offset 69
NOP

// Rung HBW_PickUp_R1#7
// Offset 70
NOP

// Rung HBW_PickUp_R1#8
// Offset 71
NOP

// Rung HBW_PickUp_R1#9
// Offset 72
NOP

// Rung HBW_PickUp_R1#10
// Offset 73
RET

// End of Code Block HBW_PickUp_R1
$LGCEND HBW_PickUp_R1

// Beginning of Code Block HBW_Send_VGR
$LGCMOD HBW_Send_VGR

// Rung HBW_Send_VGR#1
// Offset 0
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_Send_VGR#2
// Offset 19
STRN C215
AND ST2
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y5
OUT Y4

// Rung HBW_Send_VGR#3
// Offset 37
STRN C215
AND X2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 60 60
OUT Y48
AND ST2
OUT Y49

// Rung HBW_Send_VGR#4
// Offset 56
NOP

// Rung HBW_Send_VGR#5
// Offset 57
NOP

// Rung HBW_Send_VGR#6
// Offset 58
RET

// End of Code Block HBW_Send_VGR
$LGCEND HBW_Send_VGR

// Beginning of Code Block HBW_PickUp_VGR
$LGCMOD HBW_PickUp_VGR

// Rung HBW_PickUp_VGR#1
// Offset 0
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_PickUp_VGR#2
// Offset 19
STRN C215
AND ST2
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y5
OUT Y4

// Rung HBW_PickUp_VGR#3
// Offset 37
STRN C215
AND X11
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 60 60
OUT Y49
AND ST2
OUT Y48

// Rung HBW_PickUp_VGR#4
// Offset 56
NOP

// Rung HBW_PickUp_VGR#5
// Offset 57
NOP

// Rung HBW_PickUp_VGR#6
// Offset 58
RET

// End of Code Block HBW_PickUp_VGR
$LGCEND HBW_PickUp_VGR

// Beginning of Code Block HBW_Return_VGR
$LGCMOD HBW_Return_VGR

// Rung HBW_Return_VGR#1
// Offset 0
STRN C215
ANDN C251
DUPBOOL
AND C299
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y6

// Rung HBW_Return_VGR#2
// Offset 22
STRN C215
AND X1
DUPBOOL
AND C299
AND C251
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 60 60
OUT Y49
POPBOOL
AND ST2
OUT Y48

// Rung HBW_Return_VGR#3
// Offset 45
STRN C215
DUPBOOL
AND C299
ANDN X1
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_Return_VGR#4
// Offset 68
STRLE 2550 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Return_VGR#5
// Offset 73
NOP

// Rung HBW_Return_VGR#6
// Offset 74
NOP

// Rung HBW_Return_VGR#7
// Offset 75
RET

// End of Code Block HBW_Return_VGR
$LGCEND HBW_Return_VGR

// Beginning of Code Block HBW_MotorsOff
$LGCMOD HBW_MotorsOff

// Rung HBW_MotorsOff#1
// Offset 0
STRN C215
ANDN ST2
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
OUT Y6

// Rung HBW_MotorsOff#2
// Offset 18
STRN C215
AND ST2
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y5
OUT Y4

// Rung HBW_MotorsOff#3
// Offset 36
STRN C215
AND ST2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 60 60
OUT Y49
OUT Y48

// Rung HBW_MotorsOff#4
// Offset 54
NOP

// Rung HBW_MotorsOff#5
// Offset 55
NOP

// Rung HBW_MotorsOff#6
// Offset 56
NOP

// Rung HBW_MotorsOff#7
// Offset 57
RET

// End of Code Block HBW_MotorsOff
$LGCEND HBW_MotorsOff

// Beginning of Code Block HBW_ConvTo11
$LGCMOD HBW_ConvTo11

// Rung HBW_ConvTo11#1
// Offset 0
STRN C215
AND C250
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HBW_ConvTo11#2
// Offset 22
NOP

// Rung HBW_ConvTo11#3
// Offset 23
STRGE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_ConvTo11#4
// Offset 28
STRN C215
AND C251
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_ConvTo11#5
// Offset 50
STRLE 80 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_ConvTo11#6
// Offset 55
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_ConvTo11#7
// Offset 74
NOP

// Rung HBW_ConvTo11#8
// Offset 75
NOP

// Rung HBW_ConvTo11#9
// Offset 76
RET

// End of Code Block HBW_ConvTo11
$LGCEND HBW_ConvTo11

// Beginning of Code Block HBW_Return_Top
$LGCMOD HBW_Return_Top

// Rung HBW_Return_Top#1
// Offset 0
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_Return_Top#2
// Offset 19
STRN C215
AND C251
DUPBOOL
AND X10
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
POPBOOL
AND ST2
OUT Y5

// Rung HBW_Return_Top#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Return_Top#4
// Offset 46
STRN C215
AND ST2
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
OUT Y50

// Rung HBW_Return_Top#5
// Offset 64
STRLE 80 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Return_Top#6
// Offset 69
NOP

// Rung HBW_Return_Top#7
// Offset 70
NOP

// Rung HBW_Return_Top#8
// Offset 71
RET

// End of Code Block HBW_Return_Top
$LGCEND HBW_Return_Top

// Beginning of Code Block HBW_MV_11_12
$LGCMOD HBW_MV_11_12

// Rung HBW_MV_11_12#1
// Offset 0
STRN C215
DUPBOOL
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_MV_11_12#2
// Offset 21
NOP

// Rung HBW_MV_11_12#3
// Offset 22
NOP

// Rung HBW_MV_11_12#4
// Offset 23
NOP

// Rung HBW_MV_11_12#5
// Offset 24
RET

// End of Code Block HBW_MV_11_12
$LGCEND HBW_MV_11_12

// Beginning of Code Block HBW_Conv_12
$LGCMOD HBW_Conv_12

// Rung HBW_Conv_12#1
// Offset 0
NOP

// Rung HBW_Conv_12#2
// Offset 1
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_Conv_12#3
// Offset 20
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
AND ST2
OUT Y4

// Rung HBW_Conv_12#4
// Offset 40
STRGE $HBW_Encoder_Z.Acc 80
OUT C251

// Rung HBW_Conv_12#5
// Offset 45
NOP

// Rung HBW_Conv_12#6
// Offset 46
RET

// End of Code Block HBW_Conv_12
$LGCEND HBW_Conv_12

// Beginning of Code Block HBW_Conv_12_Lat
$LGCMOD HBW_Conv_12_Lat

// Rung HBW_Conv_12_Lat#1
// Offset 0
NOP

// Rung HBW_Conv_12_Lat#2
// Offset 1
STRN C215
ANDN C250
DUPBOOL
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
POPBOOL
AND ST2
OUT Y7

// Rung HBW_Conv_12_Lat#3
// Offset 23
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Conv_12_Lat#4
// Offset 42
STRGE 5290 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Conv_12_Lat#5
// Offset 47
NOP

// Rung HBW_Conv_12_Lat#6
// Offset 48
RET

// End of Code Block HBW_Conv_12_Lat
$LGCEND HBW_Conv_12_Lat

// Beginning of Code Block HBW_RETRACT_13
$LGCMOD HBW_RETRACT_13

// Rung HBW_RETRACT_13#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_RETRACT_13#2
// Offset 22
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_RETRACT_13#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_RETRACT_13#4
// Offset 46
STRN C215
AND C250
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HBW_RETRACT_13#5
// Offset 68
STRGE 7650 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_RETRACT_13#6
// Offset 73
RET

// End of Code Block HBW_RETRACT_13
$LGCEND HBW_RETRACT_13

// Beginning of Code Block HBW_Retract_23
$LGCMOD HBW_Retract_23

// Rung HBW_Retract_23#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_23#2
// Offset 22
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_23#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_23#4
// Offset 46
STRN C215
AND ST2
OUT Y51
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50

// Rung HBW_Retract_23#5
// Offset 65
STRGE 7640 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_23#6
// Offset 70
RET

// End of Code Block HBW_Retract_23
$LGCEND HBW_Retract_23

// Beginning of Code Block HBW_Conv13_Lat
$LGCMOD HBW_Conv13_Lat

// Rung HBW_Conv13_Lat#1
// Offset 0
NOP

// Rung HBW_Conv13_Lat#2
// Offset 1
STRN C215
ANDN C250
DUPBOOL
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
POPBOOL
AND ST2
OUT Y7

// Rung HBW_Conv13_Lat#3
// Offset 23
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Conv13_Lat#4
// Offset 42
STRGE 7640 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Conv13_Lat#5
// Offset 47
NOP

// Rung HBW_Conv13_Lat#6
// Offset 48
RET

// End of Code Block HBW_Conv13_Lat
$LGCEND HBW_Conv13_Lat

// Beginning of Code Block HBW_Conv_2Row
$LGCMOD HBW_Conv_2Row

// Rung HBW_Conv_2Row#1
// Offset 0
NOP

// Rung HBW_Conv_2Row#2
// Offset 1
NOP

// Rung HBW_Conv_2Row#3
// Offset 2
NOP

// Rung HBW_Conv_2Row#4
// Offset 3
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_Conv_2Row#5
// Offset 22
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
AND ST2
OUT Y4

// Rung HBW_Conv_2Row#6
// Offset 42
STRGE $HBW_Encoder_Z.Acc 1380
OUT C251

// Rung HBW_Conv_2Row#7
// Offset 47
NOP

// Rung HBW_Conv_2Row#8
// Offset 48
RET

// End of Code Block HBW_Conv_2Row
$LGCEND HBW_Conv_2Row

// Beginning of Code Block HBW_PickUp_R2
$LGCMOD HBW_PickUp_R2

// Rung HBW_PickUp_R2#1
// Offset 0
NOP

// Rung HBW_PickUp_R2#2
// Offset 1
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_PickUp_R2#3
// Offset 20
STRN C215
AND ST2
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
OUT Y50

// Rung HBW_PickUp_R2#4
// Offset 38
NOP

// Rung HBW_PickUp_R2#5
// Offset 39
STRN C215
AND C251
DUPBOOL
AND X10
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_PickUp_R2#6
// Offset 61
STRLE 1400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_PickUp_R2#7
// Offset 66
NOP

// Rung HBW_PickUp_R2#8
// Offset 67
NOP

// Rung HBW_PickUp_R2#9
// Offset 68
NOP

// Rung HBW_PickUp_R2#10
// Offset 69
RET

// End of Code Block HBW_PickUp_R2
$LGCEND HBW_PickUp_R2

// Beginning of Code Block HBW_Conv11_Lat
$LGCMOD HBW_Conv11_Lat

// Rung HBW_Conv11_Lat#1
// Offset 0
NOP

// Rung HBW_Conv11_Lat#2
// Offset 1
STRN C215
ANDN C250
DUPBOOL
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
POPBOOL
AND ST2
OUT Y7

// Rung HBW_Conv11_Lat#3
// Offset 23
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Conv11_Lat#4
// Offset 42
STRGE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Conv11_Lat#5
// Offset 47
NOP

// Rung HBW_Conv11_Lat#6
// Offset 48
RET

// End of Code Block HBW_Conv11_Lat
$LGCEND HBW_Conv11_Lat

// Beginning of Code Block HBW_Retract_12
$LGCMOD HBW_Retract_12

// Rung HBW_Retract_12#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_12#2
// Offset 22
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_12#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_12#4
// Offset 46
RET

// End of Code Block HBW_Retract_12
$LGCEND HBW_Retract_12

// Beginning of Code Block HBW_Shift_C1C2
$LGCMOD HBW_Shift_C1C2

// Rung HBW_Shift_C1C2#1
// Offset 0
STRGE 5290 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Shift_C1C2#2
// Offset 5
NOP

// Rung HBW_Shift_C1C2#3
// Offset 6
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Shift_C1C2#4
// Offset 25
NOP

// Rung HBW_Shift_C1C2#5
// Offset 26
STRN C215
AND ST2
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
OUT Y6

// Rung HBW_Shift_C1C2#6
// Offset 44
NOP

// Rung HBW_Shift_C1C2#7
// Offset 45
RET

// End of Code Block HBW_Shift_C1C2
$LGCEND HBW_Shift_C1C2

// Beginning of Code Block HBW_Move_R1_R2
$LGCMOD HBW_Move_R1_R2

// Rung HBW_Move_R1_R2#1
// Offset 0
STRGE 1760 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Move_R1_R2#2
// Offset 5
NOP

// Rung HBW_Move_R1_R2#3
// Offset 6
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Move_R1_R2#4
// Offset 25
NOP

// Rung HBW_Move_R1_R2#5
// Offset 26
NOP

// Rung HBW_Move_R1_R2#6
// Offset 27
RET

// End of Code Block HBW_Move_R1_R2
$LGCEND HBW_Move_R1_R2

// Beginning of Code Block HBW_Retract_22
$LGCMOD HBW_Retract_22

// Rung HBW_Retract_22#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_22#2
// Offset 22
STRGE 1730 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_22#3
// Offset 27
NOP

// Rung HBW_Retract_22#4
// Offset 28
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_22#5
// Offset 47
STRLE 5290 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_22#6
// Offset 52
STRN C215
AND C250
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
AND ST2
OUT Y50

// Rung HBW_Retract_22#7
// Offset 72
NOP

// Rung HBW_Retract_22#8
// Offset 73
RET

// End of Code Block HBW_Retract_22
$LGCEND HBW_Retract_22

// Beginning of Code Block HBW_Retract_21
$LGCMOD HBW_Retract_21

// Rung HBW_Retract_21#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_21#2
// Offset 22
STRGE 1730 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_21#3
// Offset 27
NOP

// Rung HBW_Retract_21#4
// Offset 28
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_21#5
// Offset 47
STRLE 2975 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_21#6
// Offset 52
STRN C215
AND C250
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
AND ST2
OUT Y50

// Rung HBW_Retract_21#7
// Offset 72
NOP

// Rung HBW_Retract_21#8
// Offset 73
RET

// End of Code Block HBW_Retract_21
$LGCEND HBW_Retract_21

// Beginning of Code Block HBW_Retract_31
$LGCMOD HBW_Retract_31

// Rung HBW_Retract_31#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_31#2
// Offset 22
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_31#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_31#4
// Offset 46
STRN C215
AND ST2
OUT Y51
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50

// Rung HBW_Retract_31#5
// Offset 65
STRGE 7640 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_31#6
// Offset 70
RET

// End of Code Block HBW_Retract_31
$LGCEND HBW_Retract_31

// Beginning of Code Block HBW_Move_R2_R3
$LGCMOD HBW_Move_R2_R3

// Rung HBW_Move_R2_R3#1
// Offset 0
STRGE 3600 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Move_R2_R3#2
// Offset 5
NOP

// Rung HBW_Move_R2_R3#3
// Offset 6
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Move_R2_R3#4
// Offset 25
NOP

// Rung HBW_Move_R2_R3#5
// Offset 26
NOP

// Rung HBW_Move_R2_R3#6
// Offset 27
RET

// End of Code Block HBW_Move_R2_R3
$LGCEND HBW_Move_R2_R3

// Beginning of Code Block HBW_PickUp_R3
$LGCMOD HBW_PickUp_R3

// Rung HBW_PickUp_R3#1
// Offset 0
NOP

// Rung HBW_PickUp_R3#2
// Offset 1
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_PickUp_R3#3
// Offset 20
STRN C215
AND ST2
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
OUT Y50

// Rung HBW_PickUp_R3#4
// Offset 38
NOP

// Rung HBW_PickUp_R3#5
// Offset 39
STRN C215
AND C251
DUPBOOL
AND X10
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_PickUp_R3#6
// Offset 61
STRLE 2920 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_PickUp_R3#7
// Offset 66
NOP

// Rung HBW_PickUp_R3#8
// Offset 67
NOP

// Rung HBW_PickUp_R3#9
// Offset 68
NOP

// Rung HBW_PickUp_R3#10
// Offset 69
RET

// End of Code Block HBW_PickUp_R3
$LGCEND HBW_PickUp_R3

// Beginning of Code Block HBW_Conv_3Row
$LGCMOD HBW_Conv_3Row

// Rung HBW_Conv_3Row#1
// Offset 0
NOP

// Rung HBW_Conv_3Row#2
// Offset 1
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_Conv_3Row#3
// Offset 20
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Conv_3Row#4
// Offset 40
STRLE $HBW_Encoder_Z.Acc 2950
OUT C251

// Rung HBW_Conv_3Row#5
// Offset 45
NOP

// Rung HBW_Conv_3Row#6
// Offset 46
RET

// End of Code Block HBW_Conv_3Row
$LGCEND HBW_Conv_3Row

// Beginning of Code Block HBW_Retract_32
$LGCMOD HBW_Retract_32

// Rung HBW_Retract_32#1
// Offset 0
STRGE 3300 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_32#2
// Offset 5
NOP

// Rung HBW_Retract_32#3
// Offset 6
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_32#4
// Offset 28
NOP

// Rung HBW_Retract_32#5
// Offset 29
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_32#6
// Offset 48
STRGE 5290 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_32#7
// Offset 53
NOP

// Rung HBW_Retract_32#8
// Offset 54
STRN C215
AND C250
DUPBOOL
ANDN C251
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HBW_Retract_32#9
// Offset 77
NOP

// Rung HBW_Retract_32#10
// Offset 78
RET

// End of Code Block HBW_Retract_32
$LGCEND HBW_Retract_32

// Beginning of Code Block HBW_Retract_33
$LGCMOD HBW_Retract_33

// Rung HBW_Retract_33#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_33#2
// Offset 22
STRGE 3300 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_33#3
// Offset 27
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_33#4
// Offset 46
STRGE 7640 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_33#5
// Offset 51
NOP

// Rung HBW_Retract_33#6
// Offset 52
STRN C215
AND C250
DUPBOOL
ANDN C251
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HBW_Retract_33#7
// Offset 75
NOP

// Rung HBW_Retract_33#8
// Offset 76
RET

// End of Code Block HBW_Retract_33
$LGCEND HBW_Retract_33

// Beginning of Code Block HBW_Retract_DN
$LGCMOD HBW_Retract_DN

// Rung HBW_Retract_DN#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_DN#2
// Offset 22
STRGE 3200 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_DN#3
// Offset 27
NOP

// Rung HBW_Retract_DN#4
// Offset 28
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_DN#5
// Offset 47
STRLE 80 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_DN#6
// Offset 52
STRN C215
AND C250
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
AND ST2
OUT Y50

// Rung HBW_Retract_DN#7
// Offset 72
NOP

// Rung HBW_Retract_DN#8
// Offset 73
RET

// End of Code Block HBW_Retract_DN
$LGCEND HBW_Retract_DN

// Beginning of Code Block oneOperation
$LGCMOD oneOperation

// Rung oneOperation#1
// Offset 0
NOP

// Rung oneOperation#2
// Offset 1
NOP

// Rung oneOperation#3
// Offset 2
RET

// End of Code Block oneOperation
$LGCEND oneOperation

// Beginning of Code Block HBW_Check1Puck
$LGCMOD HBW_Check1Puck

// Rung HBW_Check1Puck#1
// Offset 0
STR C217
MOVE 1 C300
MOVE 1 N2

// Rung HBW_Check1Puck#2
// Offset 5
STR C218
MOVE 1 C300
MOVE 2 N2

// Rung HBW_Check1Puck#3
// Offset 10
STR C219
MOVE 1 C300
MOVE 3 N2

// Rung HBW_Check1Puck#4
// Offset 15
STR C220
MOVE 1 C300
MOVE 4 N2

// Rung HBW_Check1Puck#5
// Offset 20
STR C221
MOVE 1 C300
MOVE 5 N2

// Rung HBW_Check1Puck#6
// Offset 25
STR C222
MOVE 1 C300
MOVE 6 N2

// Rung HBW_Check1Puck#7
// Offset 30
STR C223
MOVE 1 C300
MOVE 7 N2

// Rung HBW_Check1Puck#8
// Offset 35
STR C224
MOVE 1 C300
MOVE 8 N2

// Rung HBW_Check1Puck#9
// Offset 40
STR C225
MOVE 1 C300
MOVE 9 N2

// Rung HBW_Check1Puck#10
// Offset 45
RET

// End of Code Block HBW_Check1Puck
$LGCEND HBW_Check1Puck

// Beginning of Code Block HBW_OneTime_R1
$LGCMOD HBW_OneTime_R1

// Rung HBW_OneTime_R1#1
// Offset 0
NOP

// Rung HBW_OneTime_R1#2
// Offset 1
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_OneTime_R1#3
// Offset 20
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_OneTime_R1#4
// Offset 40
STRGE 375 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_OneTime_R1#5
// Offset 45
NOP

// Rung HBW_OneTime_R1#6
// Offset 46
RET

// Rung HBW_OneTime_R1#7
// Offset 47
NOP

// Rung HBW_OneTime_R1#8
// Offset 48
NOP

// End of Code Block HBW_OneTime_R1
$LGCEND HBW_OneTime_R1

// Beginning of Code Block HBW_OneTime_R2
$LGCMOD HBW_OneTime_R2

// Rung HBW_OneTime_R2#1
// Offset 0
NOP

// Rung HBW_OneTime_R2#2
// Offset 1
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_OneTime_R2#3
// Offset 20
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_OneTime_R2#4
// Offset 40
STRGE 1650 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_OneTime_R2#5
// Offset 45
NOP

// Rung HBW_OneTime_R2#6
// Offset 46
RET

// Rung HBW_OneTime_R2#7
// Offset 47
NOP

// Rung HBW_OneTime_R2#8
// Offset 48
NOP

// End of Code Block HBW_OneTime_R2
$LGCEND HBW_OneTime_R2

// Beginning of Code Block HBW_OneTime_R3
$LGCMOD HBW_OneTime_R3

// Rung HBW_OneTime_R3#1
// Offset 0
NOP

// Rung HBW_OneTime_R3#2
// Offset 1
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_OneTime_R3#3
// Offset 20
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_OneTime_R3#4
// Offset 40
STRGE 3200 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_OneTime_R3#5
// Offset 45
NOP

// Rung HBW_OneTime_R3#6
// Offset 46
RET

// Rung HBW_OneTime_R3#7
// Offset 47
NOP

// Rung HBW_OneTime_R3#8
// Offset 48
NOP

// End of Code Block HBW_OneTime_R3
$LGCEND HBW_OneTime_R3

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#2
// Offset 3
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#3
// Offset 6
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#4
// Offset 9
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#5
// Offset 12
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// Rung $Main#6
// Offset 15
#BEGIN FMT_COMMENT 
"Hunter Demo Light<br>"
#END

STR ST1
RUN hunt_exp_light

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
SG HBW_Program.S0

// Rung HBW_Program#2
// Offset 2
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#3
// Offset 10
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#4
// Offset 12
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#5
// Offset 14
STR ST1
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#6
// Offset 22
STR ST1
CALL HBW_Check1Puck 0x1 DST511 "3" "3"

// Rung HBW_Program#7
// Offset 30
STR C300
JMP HBW_Program.S19

// Rung HBW_Program#8
// Offset 32
NOP

// Rung HBW_Program#9
// Offset 33
STR C216
JMP HBW_Program.S1

// Rung HBW_Program#10
// Offset 35
STR C213
JMP HBW_Program.S1

// Rung HBW_Program#11
// Offset 37
SG HBW_Program.S1

// Rung HBW_Program#12
// Offset 39
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#13
// Offset 47
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#14
// Offset 49
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#15
// Offset 51
STR ST1
MOVE 0 N1

// Rung HBW_Program#16
// Offset 54
STR ST1
MOVE 0 C299

// Rung HBW_Program#17
// Offset 57
NOP

// Rung HBW_Program#18
// Offset 58
STR ST1
DUPBOOL
STR C205
ANDN C206
STR C206
ANDN C205
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 500 60
POPBOOL
DUPBOOL
AND C205
OUT Y48
POPBOOL
AND C206
OUT Y49

// Rung HBW_Program#19
// Offset 87
STR ST1
DUPBOOL
STR C207
ANDN C208
STRN C207
AND C208
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
POPBOOL
DUPBOOL
AND C207
OUT Y50
POPBOOL
AND C208
OUT Y51

// Rung HBW_Program#20
// Offset 116
STR ST1
DUPBOOL
STR C209
ANDN C210
STRN C209
AND C210
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
POPBOOL
DUPBOOL
AND C209
OUT Y4
POPBOOL
AND C210
OUT Y5

// Rung HBW_Program#21
// Offset 145
STR ST1
DUPBOOL
STR C211
ANDN C212
STRN C211
AND C212
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
POPBOOL
DUPBOOL
AND C211
OUT Y6
POPBOOL
AND C212
OUT Y7

// Rung HBW_Program#22
// Offset 174
STR C213
JMP HBW_Program.S2

// Rung HBW_Program#23
// Offset 176
SG HBW_Program.S2

// Rung HBW_Program#24
// Offset 178
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#25
// Offset 186
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#26
// Offset 188
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#27
// Offset 190
STR ST1
CALL HBW_Home 0x1 DST511 "3" "3"

// Rung HBW_Program#28
// Offset 198
STR X0
AND X11
AND X3
JMP HBW_Program.S3

// Rung HBW_Program#29
// Offset 202
STR C212
JMP HBW_Program.S3

// Rung HBW_Program#30
// Offset 204
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#31
// Offset 206
SG HBW_Program.S3

// Rung HBW_Program#32
// Offset 208
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#33
// Offset 216
STR ST1
CALL HWB_Home_to_11 0x1 DST511 "3" "3"

// Rung HBW_Program#34
// Offset 224
STRN C250
ANDN C251
JMP HBW_Program.S4

// Rung HBW_Program#35
// Offset 227
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#36
// Offset 229
SG HBW_Program.S4

// Rung HBW_Program#37
// Offset 231
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#38
// Offset 239
STR ST1
CALL HBW_PickUp_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#39
// Offset 247
STR X10
ANDN C251
JMP HBW_Program.S5

// Rung HBW_Program#40
// Offset 250
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#41
// Offset 252
NOP

// Rung HBW_Program#42
// Offset 253
SG HBW_Program.S5

// Rung HBW_Program#43
// Offset 255
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#44
// Offset 263
STR ST1
CALL HWB_11_DropOff 0x1 DST511 "3" "3"

// Rung HBW_Program#45
// Offset 271
STRN C251
AND C250
JMP HBW_Program.S6

// Rung HBW_Program#46
// Offset 274
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#47
// Offset 276
SG HBW_Program.S6

// Rung HBW_Program#48
// Offset 278
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#49
// Offset 286
STR ST1
CALL HBW_Send_VGR 0x1 DST511 "3" "3"

// Rung HBW_Program#50
// Offset 294
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#51
// Offset 296
STRN X2
JMP HBW_Program.S7
INC N1

// Rung HBW_Program#52
// Offset 299
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#53
// Offset 301
NOP

// Rung HBW_Program#54
// Offset 302
SG HBW_Program.S7

// Rung HBW_Program#55
// Offset 304
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#56
// Offset 312
STR C300
MOVE 1 C299

// Rung HBW_Program#57
// Offset 315
STR ST1
CALL HBW_Return_VGR 0x1 DST511 "3" "3"

// Rung HBW_Program#58
// Offset 323
STR X11
JMP HBW_Program.S15
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#59
// Offset 332
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#60
// Offset 334
NOP

// Rung HBW_Program#61
// Offset 335
SG HBW_Program.S8

// Rung HBW_Program#62
// Offset 337
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#63
// Offset 345
STR ST1
CALL HBW_Conv_12 0x1 DST511 "3" "3"

// Rung HBW_Program#64
// Offset 353
STR ST1
MOVE 0 C299

// Rung HBW_Program#65
// Offset 356
STRN C250
JMP HBW_Program.S9

// Rung HBW_Program#66
// Offset 358
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#67
// Offset 360
NOP

// Rung HBW_Program#68
// Offset 361
SG HBW_Program.S9

// Rung HBW_Program#69
// Offset 363
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#70
// Offset 371
STR ST1
CALL HBW_Return_Top 0x1 DST511 "3" "3"

// Rung HBW_Program#71
// Offset 379
STR X10
ANDN C251
JMP HBW_Program.S10
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#72
// Offset 389
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#73
// Offset 391
NOP

// Rung HBW_Program#74
// Offset 392
SG HBW_Program.S10

// Rung HBW_Program#75
// Offset 394
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#76
// Offset 402
STR ST1
CALL HBW_MV_11_12 0x1 DST511 "3" "3"

// Rung HBW_Program#77
// Offset 410
STRN C250
JMP HBW_Program.S11

// Rung HBW_Program#78
// Offset 412
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#79
// Offset 414
NOP

// Rung HBW_Program#80
// Offset 415
SG HBW_Program.S11

// Rung HBW_Program#81
// Offset 417
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#82
// Offset 425
STRE N1 1
CALL HBW_PickUp_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#83
// Offset 436
STRE N1 2
CALL HBW_PickUp_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#84
// Offset 447
STRE N1 3
CALL HBW_Move_R1_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#85
// Offset 458
STRE N1 3
ANDLE 1650 $HBW_Encoder_Z.Acc
JMP HBW_Program.S51

// Rung HBW_Program#86
// Offset 467
STRE N1 4
CALL HBW_PickUp_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#87
// Offset 478
STRE N1 5
CALL HBW_PickUp_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#88
// Offset 489
STRE N1 6
CALL HBW_Move_R2_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#89
// Offset 500
STRE N1 6
ANDLE 3200 $HBW_Encoder_Z.Acc
JMP HBW_Program.S51

// Rung HBW_Program#90
// Offset 509
STRE N1 7
CALL HBW_PickUp_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#91
// Offset 520
STRE N1 8
CALL HBW_PickUp_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#92
// Offset 531
STRE N1 9
JMP HBW_Program.S18

// Rung HBW_Program#93
// Offset 536
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#94
// Offset 538
NOP

// Rung HBW_Program#95
// Offset 539
NOP

// Rung HBW_Program#96
// Offset 540
STR X10
ANDN C251
JMP HBW_Program.S12

// Rung HBW_Program#97
// Offset 543
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#98
// Offset 545
SG HBW_Program.S51

// Rung HBW_Program#99
// Offset 547
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#100
// Offset 555
STRE N1 3
CALL HBW_PickUp_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#101
// Offset 566
STRE N1 6
CALL HBW_PickUp_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#102
// Offset 577
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#103
// Offset 579
STR X10
ANDN C251
JMP HBW_Program.S12

// Rung HBW_Program#104
// Offset 582
SG HBW_Program.S12

// Rung HBW_Program#105
// Offset 584
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#106
// Offset 592
STR ST1
CALL HWB_11_DropOff 0x1 DST511 "3" "3"

// Rung HBW_Program#107
// Offset 600
STRN C251
AND C250
JMP HBW_Program.S13

// Rung HBW_Program#108
// Offset 603
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#109
// Offset 605
SG HBW_Program.S13

// Rung HBW_Program#110
// Offset 607
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#111
// Offset 615
STR ST1
CALL HBW_Send_VGR 0x1 DST511 "3" "3"

// Rung HBW_Program#112
// Offset 623
STR C300
MOVE 1 C299

// Rung HBW_Program#113
// Offset 626
STRN X2
AND C299
JMP HBW_Program.S14
INC N1

// Rung HBW_Program#114
// Offset 630
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#115
// Offset 632
SG HBW_Program.S14

// Rung HBW_Program#116
// Offset 634
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#117
// Offset 642
STR ST1
CALL HBW_Return_VGR 0x1 DST511 "3" "3"

// Rung HBW_Program#118
// Offset 650
STR X11
JMP HBW_Program.S15
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#119
// Offset 659
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#120
// Offset 661
SG HBW_Program.S15

// Rung HBW_Program#121
// Offset 663
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#122
// Offset 671
STR ST1
MOVE 0 C299

// Rung HBW_Program#123
// Offset 674
STRE N1 1
CALL HBW_Conv_12 0x1 DST511 "3" "3"

// Rung HBW_Program#124
// Offset 685
STRE N1 2
CALL HBW_Conv_12 0x1 DST511 "3" "3"

// Rung HBW_Program#125
// Offset 696
STRE N1 3
CALL HBW_Conv_12 0x1 DST511 "3" "3"

// Rung HBW_Program#126
// Offset 707
STRE N1 4
CALL HBW_Conv_2Row 0x1 DST511 "3" "3"

// Rung HBW_Program#127
// Offset 718
STRE N1 5
CALL HBW_Conv_2Row 0x1 DST511 "3" "3"

// Rung HBW_Program#128
// Offset 729
STRE N1 6
CALL HBW_Conv_2Row 0x1 DST511 "3" "3"

// Rung HBW_Program#129
// Offset 740
STRE N1 7
CALL HBW_Conv_3Row 0x1 DST511 "3" "3"

// Rung HBW_Program#130
// Offset 751
STRE N1 8
CALL HBW_Conv_3Row 0x1 DST511 "3" "3"

// Rung HBW_Program#131
// Offset 762
STRE N1 9
CALL HBW_Conv_3Row 0x1 DST511 "3" "3"

// Rung HBW_Program#132
// Offset 773
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#133
// Offset 775
STRN C251
JMP HBW_Program.S16
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#134
// Offset 784
SG HBW_Program.S16

// Rung HBW_Program#135
// Offset 786
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#136
// Offset 794
STRE N1 1
CALL HBW_Conv11_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#137
// Offset 805
STRE N1 2
CALL HBW_Conv_12_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#138
// Offset 816
STRE N1 3
CALL HBW_Conv13_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#139
// Offset 827
STRE N1 4
CALL HBW_Conv13_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#140
// Offset 838
STRE N1 5
CALL HBW_Conv_12_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#141
// Offset 849
STRE N1 6
CALL HBW_Conv11_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#142
// Offset 860
STRE N1 7
CALL HBW_Conv11_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#143
// Offset 871
STRE N1 8
CALL HBW_Conv_12_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#144
// Offset 882
STRE N1 9
CALL HBW_Conv13_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#145
// Offset 893
NOP

// Rung HBW_Program#146
// Offset 894
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#147
// Offset 896
STRN C250
AND X10
JMP HBW_Program.S17

// Rung HBW_Program#148
// Offset 899
SG HBW_Program.S17

// Rung HBW_Program#149
// Offset 901
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#150
// Offset 909
STRE N1 1
CALL HBW_Retract_12 0x1 DST511 "3" "3"

// Rung HBW_Program#151
// Offset 920
STRE N1 2
CALL HBW_RETRACT_13 0x1 DST511 "3" "3"

// Rung HBW_Program#152
// Offset 931
STRE N1 3
CALL HBW_Retract_23 0x1 DST511 "3" "3"

// Rung HBW_Program#153
// Offset 942
STRE N1 4
CALL HBW_Retract_22 0x1 DST511 "3" "3"

// Rung HBW_Program#154
// Offset 953
STRE N1 5
CALL HBW_Retract_21 0x1 DST511 "3" "3"

// Rung HBW_Program#155
// Offset 964
STRE N1 6
CALL HBW_Retract_21 0x1 DST511 "3" "3"

// Rung HBW_Program#156
// Offset 975
STRE N1 7
CALL HBW_Retract_32 0x1 DST511 "3" "3"

// Rung HBW_Program#157
// Offset 986
STRE N1 8
CALL HBW_Retract_33 0x1 DST511 "3" "3"

// Rung HBW_Program#158
// Offset 997
STRE N1 9
CALL HBW_Retract_33 0x1 DST511 "3" "3"

// Rung HBW_Program#159
// Offset 1008
NOP

// Rung HBW_Program#160
// Offset 1009
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#161
// Offset 1011
STR X11
ANDN C251
ANDN C250
JMP HBW_Program.S11

// Rung HBW_Program#162
// Offset 1015
STR X11
ANDE N1 1
JMP HBW_Program.S50

// Rung HBW_Program#163
// Offset 1021
SG HBW_Program.S18

// Rung HBW_Program#164
// Offset 1023
STR ST1
JMP HBW_Program.S0

// Rung HBW_Program#165
// Offset 1025
SG HBW_Program.S50

// Rung HBW_Program#166
// Offset 1027
STR ST1
CALL HBW_Shift_C1C2 0x1 DST511 "3" "3"

// Rung HBW_Program#167
// Offset 1035
STRN Y50
ANDN C250
JMP HBW_Program.S11

// Rung HBW_Program#168
// Offset 1038
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#169
// Offset 1040
NOP

// Rung HBW_Program#170
// Offset 1041
SG HBW_Program.S19

// Rung HBW_Program#171
// Offset 1043
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#172
// Offset 1051
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#173
// Offset 1053
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#174
// Offset 1055
NOP

// Rung HBW_Program#175
// Offset 1056
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#176
// Offset 1058
STR ST1
CALL HBW_Home 0x1 DST511 "3" "3"

// Rung HBW_Program#177
// Offset 1066
STR X0
AND X11
AND X3
JMP HBW_Program.S20

// Rung HBW_Program#178
// Offset 1070
SG HBW_Program.S20

// Rung HBW_Program#179
// Offset 1072
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#180
// Offset 1080
NOP

// Rung HBW_Program#181
// Offset 1081
STRE N2 1
CALL HBW_OneTime_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#182
// Offset 1092
STRE N2 2
CALL HBW_OneTime_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#183
// Offset 1103
STRE N2 3
CALL HBW_OneTime_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#184
// Offset 1114
STRE N2 4
CALL HBW_OneTime_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#185
// Offset 1125
STRE N2 5
CALL HBW_OneTime_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#186
// Offset 1136
STRE N2 6
CALL HBW_OneTime_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#187
// Offset 1147
STRE N2 7
CALL HBW_OneTime_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#188
// Offset 1158
STRE N2 8
CALL HBW_OneTime_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#189
// Offset 1169
STRE N2 9
CALL HBW_OneTime_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#190
// Offset 1180
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#191
// Offset 1182
SG HBW_Program.S21

// Rung HBW_Program#192
// Offset 1184
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#193
// Offset 1192
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#194
// Offset 1194
NOP

// Rung HBW_Program#195
// Offset 1195
NOP

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
DUPBOOL
STR C410
ANDN C409
STRN C410
AND C409
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 100
POPBOOL
DUPBOOL
AND C410
OUT Y27
POPBOOL
AND C409
OUT Y26

// Rung VGR_Program#4
// Offset 39
STR ST1
DUPBOOL
STR C408
ANDN C411
STRN C408
AND C411
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
POPBOOL
DUPBOOL
AND C408
OUT Y24
POPBOOL
AND C411
OUT Y25

// Rung VGR_Program#5
// Offset 68
STR ST1
DUPBOOL
STR C406
ANDN C407
STRN C406
AND C407
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 100
POPBOOL
DUPBOOL
AND C406
OUT Y23
POPBOOL
AND C407
OUT Y22

// Rung VGR_Program#6
// Offset 97
STR C452
JMP VGR_Program.S1

// Rung VGR_Program#7
// Offset 99
SG VGR_Program.S1

// Rung VGR_Program#8
// Offset 101
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#9
// Offset 103
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#10
// Offset 111
STRN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 100
OUT Y22

// Rung VGR_Program#11
// Offset 127
STRN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
OUT Y24

// Rung VGR_Program#12
// Offset 143
STRN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 100
OUT Y26

// Rung VGR_Program#13
// Offset 159
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_Program#14
// Offset 161
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_Program#15
// Offset 163
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_Program#16
// Offset 165
STR X25
AND X26
AND X27
JMP VGR_Program.S2

// Rung VGR_Program#17
// Offset 169
SG VGR_Program.S2

// Rung VGR_Program#18
// Offset 171
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#19
// Offset 179
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#20
// Offset 181
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_Program#21
// Offset 183
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_Program#22
// Offset 185
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_Program#23
// Offset 187
STRGE 5350 $VGR_Encoder_Rot.Acc
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 100
OUT Y27

// Rung VGR_Program#24
// Offset 206
STRGE 700 $VGR_Encoder_X.Acc
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
OUT Y25

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
STR C813
OUT Y18

// Rung MPO_Program#4
// Offset 12
STR C810
OUT Y17

// Rung MPO_Program#5
// Offset 14
STR C811
OUT Y52

// Rung MPO_Program#6
// Offset 16
STR ST1
DUPBOOL
STR C804
ANDN C805
STR C805
ANDN C804
ORSTR
ANDSTR
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 100
POPBOOL
DUPBOOL
AND C804
OUT Y53
POPBOOL
AND C805
OUT Y15

// Rung MPO_Program#7
// Offset 45
STR C814
OUT Y19

// Rung MPO_Program#8
// Offset 47
STR C809
JMP MPO_Program.S1

// Rung MPO_Program#9
// Offset 49
SG MPO_Program.S1

// Rung MPO_Program#10
// Offset 51
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#11
// Offset 59
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#12
// Offset 61
STRN X24
SET Y17

// Rung MPO_Program#13
// Offset 63
STR Y17
OUT Y20
ANDN X17
ONDTMR T105 1000 Y44

// Rung MPO_Program#14
// Offset 69
STR X17
JMP MPO_Program.S10

// Rung MPO_Program#15
// Offset 71
SG MPO_Program.S10

// Rung MPO_Program#16
// Offset 73
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#17
// Offset 81
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#18
// Offset 83
STR X17
RST Y20

// Rung MPO_Program#19
// Offset 85
STR X17
ONDTMR T106 1000 Y16

// Rung MPO_Program#20
// Offset 89
STR T106.Done
JMP MPO_Program.S11

// Rung MPO_Program#21
// Offset 91
SG MPO_Program.S11

// Rung MPO_Program#22
// Offset 93
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#23
// Offset 101
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#24
// Offset 103
STRN X18
OUT Y52

// Rung MPO_Program#25
// Offset 105
STR X18
RST Y20

// Rung MPO_Program#26
// Offset 107
STR X18
RST Y16

// Rung MPO_Program#27
// Offset 109
STRN Y16
ONDTMR T107 1000 C819

// Rung MPO_Program#28
// Offset 113
STR C819
JMP MPO_Program.S2

// Rung MPO_Program#29
// Offset 115
SG MPO_Program.S2

// Rung MPO_Program#30
// Offset 117
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#31
// Offset 125
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#32
// Offset 127
NOP

// Rung MPO_Program#33
// Offset 128
STRN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y53

// Rung MPO_Program#34
// Offset 144
STR X19
JMP MPO_Program.S3

// Rung MPO_Program#35
// Offset 146
SG MPO_Program.S3

// Rung MPO_Program#36
// Offset 148
STR ST1
SET Y17

// Rung MPO_Program#37
// Offset 150
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#38
// Offset 158
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#39
// Offset 160
STR X19
SET Y19

// Rung MPO_Program#40
// Offset 162
STR X19
ONDTMR T100 2000 Y18

// Rung MPO_Program#41
// Offset 166
STR T100.DN
JMP MPO_Program.S4

// Rung MPO_Program#42
// Offset 168
SG MPO_Program.S4

// Rung MPO_Program#43
// Offset 170
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#44
// Offset 178
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#45
// Offset 180
STR X19
RST Y19

// Rung MPO_Program#46
// Offset 182
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y15

// Rung MPO_Program#47
// Offset 198
STR X16
JMP MPO_Program.S5

// Rung MPO_Program#48
// Offset 200
SG MPO_Program.S5

// Rung MPO_Program#49
// Offset 202
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#50
// Offset 210
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#51
// Offset 212
STR X16
SET Y19

// Rung MPO_Program#52
// Offset 214
STR Y19
ONDTMR T101 1000 C815

// Rung MPO_Program#53
// Offset 218
STR C815
RST Y18

// Rung MPO_Program#54
// Offset 220
STRN Y18
JMP MPO_Program.S6

// Rung MPO_Program#55
// Offset 222
SG MPO_Program.S6

// Rung MPO_Program#56
// Offset 224
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#57
// Offset 232
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#58
// Offset 234
STR X16
RST Y19

// Rung MPO_Program#59
// Offset 236
STRN Y19
ONDTMR T102 1000 C818

// Rung MPO_Program#60
// Offset 240
STR C818
JMP MPO_Program.S7

// Rung MPO_Program#61
// Offset 242
SG MPO_Program.S7

// Rung MPO_Program#62
// Offset 244
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#63
// Offset 252
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#64
// Offset 254
STRN X15
OUT Y45

// Rung MPO_Program#65
// Offset 256
STR X15
TMRDOWN T102 1000
OUT Y43

// Rung MPO_Program#66
// Offset 260
STR T102.Done
JMP MPO_Program.S8

// Rung MPO_Program#67
// Offset 262
SG MPO_Program.S8

// Rung MPO_Program#68
// Offset 264
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#69
// Offset 272
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#70
// Offset 274
STRN X13
OUT Y45

// Rung MPO_Program#71
// Offset 276
STR X13
TMRDOWN T103 1000
OUT Y21

// Rung MPO_Program#72
// Offset 280
STR T103.Done
JMP MPO_Program.S9

// Rung MPO_Program#73
// Offset 282
SG MPO_Program.S9

// Rung MPO_Program#74
// Offset 284
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#75
// Offset 292
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#76
// Offset 294
STRN X12
ONDTMR T104 1000 Y46

// Rung MPO_Program#77
// Offset 298
STR X12
AND ST1
OUT Y47

// Rung MPO_Program#78
// Offset 301
STR X12
JMP MPO_Program.S12

// Rung MPO_Program#79
// Offset 303
SG MPO_Program.S12

// Rung MPO_Program#80
// Offset 305
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#81
// Offset 313
STRN C809
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#3
// Offset 10
STR C1600
OUT Y30

// Rung SLD_Program#4
// Offset 12
STR C1601
OUT Y31

// Rung SLD_Program#5
// Offset 14
STR C1602
OUT Y32

// Rung SLD_Program#6
// Offset 16
STR C1603
OUT Y33

// Rung SLD_Program#7
// Offset 18
STR C1604
OUT Y34

// Rung SLD_Program#8
// Offset 20
STR C1605
JMP SLD_Program.S1

// Rung SLD_Program#9
// Offset 22
SG SLD_Program.S1

// Rung SLD_Program#10
// Offset 24
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#11
// Offset 32
STRN C1605
JMP SLD_Program.S0

// Rung SLD_Program#12
// Offset 34
STRN X35
OFFDTMR T200 1750 C1651

// Rung SLD_Program#13
// Offset 38
STR C1651
OUT Y30

// Rung SLD_Program#14
// Offset 40
STRGE T200.Acc 1750
FLASHER 500 500 Y899

// Rung SLD_Program#15
// Offset 48
SG SLD_Program.S2

// Rung SLD_Program#16
// Offset 50
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#17
// Offset 58
STRN C1605
JMP SLD_Program.S0

// Rung SLD_Program#18
// Offset 60
STR ST1
SGSET SLD_Program.S3

// Rung SLD_Program#19
// Offset 62
SG SLD_Program.S3

// Rung SLD_Program#20
// Offset 64
STR C1610
OUT Y30

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STR C1200
OUT Y39

// Rung SSC_Program#4
// Offset 12
STR C1201
OUT Y40

// Rung SSC_Program#5
// Offset 14
STR C1202
OUT Y41

// Rung SSC_Program#6
// Offset 16
STR C1215
PWMOUT @ssc_vertical $ssc_vertical Y11 500 100
OUT Y35

// Rung SSC_Program#7
// Offset 32
STR C1216
PWMOUT @ssc_vertical $ssc_vertical Y11 500 100
OUT Y36

// Rung SSC_Program#8
// Offset 48
STR C1217
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y37

// Rung SSC_Program#9
// Offset 64
STR C1218
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y38

// Rung SSC_Program#10
// Offset 80
STR ST2
ANDPD X47
ANDPDPF
STR ST2
AND CT150.Done
CNT CT150 100

// Rung SSC_Program#11
// Offset 88
STR C1203
JMP SSC_Program.S1

// Rung SSC_Program#12
// Offset 90
SG SSC_Program.S1

// Rung SSC_Program#13
// Offset 92
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#14
// Offset 100
STRN C1203
JMP SSC_Program.S0

// Rung SSC_Program#15
// Offset 102
STRN X41
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y37

// Rung SSC_Program#16
// Offset 118
STRN X40
PWMOUT @ssc_vertical $ssc_vertical Y11 60 100
OUT Y36

// Rung SSC_Program#17
// Offset 134
STR X40
AND X41
JMP SSC_Program.S2

// Rung SSC_Program#18
// Offset 137
SG SSC_Program.S2

// Rung SSC_Program#19
// Offset 139
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#20
// Offset 147
STRN C1203
JMP SSC_Program.S0

// Rung SSC_Program#21
// Offset 149
STR X44
ANDPDPF
STR ST2
CNT CT150 300

// Rung SSC_Program#22
// Offset 154
STRN CT150.Done
PWMOUT @ssc_vertical $ssc_vertical Y11 60 100
OUT Y35

// Rung SSC_Program#23
// Offset 170
STR X46
STR ST2
CNT CT151 1300

// Rung SSC_Program#24
// Offset 174
STRN CT151.Done
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y38

// Rung SSC_Program#25
// Offset 190
STR CT150.Done
AND CT151.Done
JMP SSC_Program.S3

// Rung SSC_Program#26
// Offset 193
SG SSC_Program.S3

// Rung SSC_Program#27
// Offset 195
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#28
// Offset 203
STRN C1203
JMP SSC_Program.S0

// Rung SSC_Program#29
// Offset 205
STR X46
STR ST2
CNT CT152 300

// Rung SSC_Program#30
// Offset 209
STRN CT152.Done
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y37

// Rung SSC_Program#31
// Offset 225
STR CT152.Done
JMP SSC_Program.S4

// Rung SSC_Program#32
// Offset 227
SG SSC_Program.S4

// Rung SSC_Program#33
// Offset 229
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#34
// Offset 237
STRN C1203
JMP SSC_Program.S0

// Rung SSC_Program#35
// Offset 239
STR X46
STR ST2
CNT CT153 135

// Rung SSC_Program#36
// Offset 243
STRN CT153.Done
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y37

// Rung SSC_Program#37
// Offset 259
STR X44
STR ST2
CNT CT154 210

// Rung SSC_Program#38
// Offset 263
STRN CT154.Done
PWMOUT @ssc_vertical $ssc_vertical Y11 60 100
OUT Y36

// Rung SSC_Program#39
// Offset 279
STR CT153.Done
AND CT154.Done
JMP SSC_Program.S5

// Rung SSC_Program#40
// Offset 282
SG SSC_Program.S5

// Rung SSC_Program#41
// Offset 284
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#42
// Offset 292
STRN C1203
JMP SSC_Program.S0

// Rung SSC_Program#43
// Offset 294
STR X46
STR ST2
CNT CT155 1100

// Rung SSC_Program#44
// Offset 298
STRN CT155.Done
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y37

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block hunt_exp_light
$PRGRM hunt_exp_light

// Rung hunt_exp_light#1
// Offset 0
STR ST2
COPY 0x1 "4 0x0 MC402 Y39 1"

// End of Code Block hunt_exp_light
$PGMEND hunt_exp_light

// Beginning of Code Block HWB_PickUp
$TSK HWB_PickUp

// Rung HWB_PickUp#1
// Offset 0
NOP

// End of Code Block HWB_PickUp
$TSKEND HWB_PickUp

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C1","copy","",""
"C11","C11_Interlock","","Used to delay logic by one scan"
"C12","C12_Interlock_2","","Used to delay logic by one scan"
"C20","HBW_Has_Pallet","","True when carrying a pallet"
"C51","X_Direction","","True: Left False: Right"
"C52","Z_Direction","","True: Down False: Up"
"C80","Conveyor_Timeout","","Bit high when Conveyor Timeout timer active"
"C90","HBW_XY_PID_EN","","Enables PID control in HBW_Move_XZ"
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C150","HBW_MoveComplete","","HBW_Move_XZ completion interlock."
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"C182","Fault_X_Target","","Active when X target out of range"
"C183","Fault_Z_target","","Active when Z target out of range"
"C400","VGR_T0","",""
"C410","VGR_T1","",""
"C420","VGR_T2","",""
"C430","VGR_T3","",""
"C440","VGR_T4","",""
"C500","VGR_Man_Control","",""
"C799","VGR_RESET","",""
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"V801","VGR_Fault_Code","",""
"N810","VGR_Rot_Target","",""
"N811","VGR_X_Target","",""
"N812","VGR_Y_Target","",""
"D0","MC","",""
"D1","Feeder_Extend","",""
"D140","X_Start_Position","","Distance to target"
"D142","Y_Start_Position","","Distance to target"
"D143","HBW_PWM_Cur_X","","PWM value for X for XZ movement task"
"D144","HBW_PWM_Cur_Z","","PWM value for Z for XZ movement task"
"T3","T_HBW_S6","",""
"T4","T_Conveyor_Timer","","Used to detect conveyor faults"
"MPO_Program.S2","Vaccum_MO","",""
"MPO_Program.S3","Vaccum","",""
"MPO_Program.S4","Vacumm_MO","",""
"MPO_Program.S5","Vaccum_Load","",""
"US0","_CP_Strogram_A","","CP_State_Program"
"US1","_VGR_Movement","","VGR_Movement"
"US2","_SSC_Check_InOut","","SSC_Check_InOut"
"UB0","_VGR_MisScan_A","","VGR_Movement.Done ThisScan"
#END

