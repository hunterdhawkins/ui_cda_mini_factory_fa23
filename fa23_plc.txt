// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\aaron\Documents\classes\uidaho\2023-spring-and-fall\466\ui_cda_mini_factory_fa23\fa23_plc.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
a32f0d754cbea4723ed0d0b8b6161673462514e3d2a254c65c2c6d8caabdb24e306d3c99e74cac9f
d8542a258594bdfdc4393e6ea48a8237b62f5ca81b90f4943b970157a49f28c70ab227d20cb3b5b1
95106b9388021ad78c8ab66cf1e197f335661c40484d1798f9c9c22ccc2d3e1563e428a1143900d1
924177b479abbc16c0e4f00c662276b82e33c7e63eb0376f852330466b8db7be39e495e679cf17ba
2215de83d5dc74b232787a9758efd64bafe4d2cceb7f8a730f1f1baffaadb4a9957744a08d1922e3
d7e2a66c0919338c1334fea71c47d629a580d433f81d40ad3a732f25588b545acfee47d2303336f5
407b1c05c4ba7fff81ede623fd31916538d52554e29accb221413b9e932080100065cc8cfe00ac1a
73be4b7ce31b293d564b14471e2a9e5b91521d568add6566c774f65875bccfd996f64e09f05919ef
120eddb4e9c5353b3b5887924a7df12868b537ab5c229d84496382b9695cf8c2f954036fe668d7ed
cb745e6ec91f719097e380ae24bb1b71d33b5cc773f123c3fb753e1cacd3fd7d00d92f4acc24049a
12d89f1aa58271e68dc905b0955be2aca08e2a67d7c705f97882cbc9d7eefa5bfdc03e16cb9e9e3a
8bd28ef604d301b908bc2dc8ec50d89675d42795dea3ad8ca8b7390e782d1732aea6214197b8ee9e
39cd14efec26b72b47e1dd4c476b71e3ecd05e5aa6aa3362fe3e1abdbd538a455d13f1d05fc3743a
925b629e8bc0ddc7e7e5fd401db80275e9d2d29920b60bd302f937d9ab4f847744b169934fee85bb
1e9c85894bb3ed01934bf87ac6b81842f4c3a98c82a0c50f20cdd0b2f18debff6a632d5da477705d
ef5232625296e0f8d246e009a28ff71c90290fe70fbed7f4a80df4b58d5c53afe40788d3d66f2516
91472c2fe2229d0c94f4dbfcf963c0ac7148dff7aab74479d6515df6e2954a0475dec5b6b79afcbc
6584140f0dabc73bb4e112d54719d5e50ec0abb48e6fd1e6db1b3d946d417dd00aa3cf00264d7971
f3eeb7f86d610b575314cbac3a2c9d5e30789dc8e5f39ec770e37e156c426bb2fc06e5378d5de600
5473626d4af8f2bca42ecc480ca2220ddbf481ae85ff17d93c637bff3d414770dd90dddd559da07b
49c8d065da8e79ca8dad829982d678a051e12e49f4e56328597b54fc64ceaaea8aeb5c01e16e5f0c
6cd0af6f93e58a52ebf100fc2bda02ebb27542c2f97cc1e1f8b860221e0f829b7f220b526d206dac
e484cd3fcd8e14a851e41badc7bf0ea7e45f3424473307ca84793aae8134a987f60e41c5e3999a28
d3568044522e4c565c2d527f0d835ed03753f0a8bd755b36bb0da0c9400d09d34ca61468eb59fe22
86ca57d8ff5d04763564b7fa9308466542f63d08c563857689669e42ddb69c5f2fc150360b1ede31
b1b5fb303cb11bba59bf1047a3633519985c521e0e9041b99135d0ceb098826faee4dabc968b922b
a4f494dd466b10dee8cbdc7474319c084d9a0c6f07b2b5eb505c758d49ec844875ca7697d71add49
229d6fa33aa831a7a58f630c1744bfd7750733d5301ae53a15fd52fd86d8cd2735839fa9a85c0389
d31ec1b37ddc137112294452e7529a39459bfe4326fe0ef183377b433137f6c97d88213bc0a56c2e
fbc6bbf6438e279fb825fdb1f88b7db7a294aa3bfd43c98c84802c792ff599361995df98b4ebb4cd
c34a078c7e91cf5706cb6317e33cca9216b47b87c9bb286d20fc10f61155e6decad7b968fdca294f
e8503cf2040ec2e677b998ca2e1eac8ec71be3aeecec5a8e721d930cf1e6a5133019ba37f14acfd4
905bd25d4ff81876d76781fb2554ff6ea62e8d96f5dfb9c417a3b106e6882e9e7802dcad069132af
da8370dfe889b6dd231ba7f1068659cccbb46fe04e723e5517a396a7ede29035f247d83e8d7b924c
961907009678be917ebcaaa96c35b62a3f377db571e679de950dc2bc00051e01a732c023d2bd0ef9
925719484931c689a8859bc49ada6543fc2cde8d7ae30a97db760f981229457661a630057b867a38
0a67af9548b5f569d324035eba709a5ca63081e606c919f5d40b5705f91a9a51c3c5d670bb4d151f
5fa582a8afe98a567e91ebe8b81510aa83019be71dd8a22d42cad9da264b8956dca539703e5abef3
bafea4ea3e59ec4ba8722256298443e3931658b1c65942ae5ecc180e196719059af573f6115233b6
f87212ec8d87f206619784289d2da7ba93d60deeeec6214a045f41176595d44cbe6537b8f350c1a3
4ca45478bd33d947384411769ce76a569d4ed6a0cadf2e9813a79ff45c0f7008ee06b073e7533887
b4671c90030462efd2a49294b49fcd15ec6ab48c144e1e046340c11b723349dc9093540086ef39ed
77d8ad1f15b1ad878cab5f2e285fecec9ac922d37f2c9c6cf66d4e4ade106a84d2c36d1812c9afbe
5126d8f93d27ac74c396f843252147664aae2d3da2109339dbd0fc3ef3da022f80b44047033a7d86
b8b205c53741849f27493f38578949dca0d7088354a00157cda4c92d49a613325dceed0a882e1563
d5c0dc48048b420bc0ad7eca4612d12b9eb4053a271b32e7252f06124750db0da72f91e022f5a6b9
c2041f9574390c265fabb2a4fd34ab82c2bab744520be41cdc067e26360ed34b527f840915a8e1b9
692dcfbe8252248ca4a1ba879c7d7a78e3d66b85b7e27310dbb7d45ec6570435aa3d62caf5657f48
ebc4d299faf3bf84c03ed6e5b7768ede2b6e258ad49bf0c9a43d7ca068716150318d627837d299a1
7b29a19d104a3938806781f2ddc02352a3a61222e6e33d2af84ff31582ce70e61119f26b63e0806e
56af9a723bc5b9388ef0852df438c8fa848efac3b096c5dfeb6c0f16d34b81529989c2dc40d65d2f
6e1a2d1536a54aec14388e7ac1d9174a80b2fcab11c492d3d8c383df15995ee222bbfc435550d1a0
1673368b940407f19770ba468fa30f5cf78ece2ecb56cf2e98fa0f88f5250f66d3a84fa91497e48e
4018b0151aa5c19f90e87cd3a834cc6988cb78eabedc56a35338041709511d3f081a2fc3bd163e70
8fcc3987ce8e23e617e8aa9d92a914ba974906e1fdb5ebc1363fa1b3ccb162b39d1b0d3405ee2d39
8e22e6afa964838d320f92485a0a13618f72a8197a1b4bf58b5ab907a631433e63fa8e2bde292a5c
3a161dcd6462bdbd4ae83a1ad8412f9fda7724411ba4f715275426c3e7a23cd36572bbbbadcbe511
7b095c5b116e94e5db8f910ee349754ee2903a0f3fe5e9b7ca169a04e421bd24b6bd4302c17baff4
59c1ce5430bb9056f882dbedace59ee017fceca7a7b6cddea7aee79d4e3fdb997b971e083d849103
305c671ac88d84c56b1f0b110471dc7634c35b4b1b5bcad57b552e65a6d7c942b41ede20579582d1
229bc4104196b1fc8c3ea1cb2099464d6d15a39bae98f58973715f39103a3d7b18bd7da197819428
d0bb150ebe4890cf1595cb1611579d6710e40f1f901fc156d018fc4049b71a4cb54870f9a96d7d2f
15e090817318f6ecdcda6a99d849c993d34a01d2c05ff0f8ee946a523a3b9650f892e1a0f8a6a344
71856fd64971c1571c0e53a66dbbdfff254519c42235a7b85daee093d288061a8f2f6bc9fae4bcbb
b94fc8789cc53e8fe488bf336b71c7b9720381eb69d68d78ab0b5cb97273417586ac98b6354ad1c3
5cf30b1d6fc00736ee45edf3a80c417bdcd5ebe4d5cc62842eb698d086998a46bf1f9be838e22f42
1dab0fd3610b7839792742a590644ef7f0fa1fbe8283aa6e73e6d948bb63b5687748968484dd14a6
dda2a1c84c04e458d5acbb81c74be63eb1785f74b54286c991110cf6c8800926f862955fd40cdabf
7b09e92b28a002b29380c495cae25d8216a6cfec2211e02c8fae17814a4c65695841ef11bb512c11
349ccf90f1fbe42cf0d081628816793b1f110bec73b3a4f96af25146a2085dd577c79ac9ce9fc0e8
37e0da192375c85040fea431d475898536ed884c3ece0cbb95dd8b9ccfe018b83c6fb8ef274a1523
832b6751076a12ffef4bbecd98acf2a8b24aefe2bf049c3f28f72d3df98ef31f895662d7acbaaabc
689b4fbeb19c9ddfa6b4b4e1b2f7ea5013c7574e23f187e577e392ef12ac0d1fd3e0a3eacd2f43a2
1dc359ae64ef170e3f26885ef4537d3563b4e720f67ec11f3178ce5489de8ffa1be0985ff00962f4
a3289e88ba86d9d0b2e6e3c9a4f609d40e7ef6a07e9ba4b84b3ddc4d83709e0eaa2fb7b981251ddd
a0303ac9d160c717639840bc090751cfa5b64fdbc4c180ad450075d87b4f7e7761e78b696a18f8e8
c4f7998c30ca718ddf02b178acd6b7f2baaaa90da77c4f1b1a4aa1ce1091d175c6ccfe0ebaba3fec
cc5aab9891a094ef63c3b244dce829a65a3e537f1741fcdf25d7f773d88e5fa760554de975427167
0a7e5065cdc60ee9c88aab7807051c9efb4bfacf86b8ee7fb4790f1aee0cf5e9e5ff03a6a7faeb22
d4b0d8424926503a28dd1493a034f60544467337a8baae17380d436e170aef73d2c425727df38c05
a2becabe5d544b4ee90258c6d5fe6f20f8596c6e78e63b5d11dfacb34e1a65c27f3741bc4c73f9c6
e7362aaceb220915b5bd69ebad6b761b6469d2108ca0c3a696cdb2e5db946fa8981d935806ef03aa
ca6c0a57db27e8935112ed3c7d22f3442194aeaa5adfea17d05f1559e8f4afb8515e62643dc38aef
7aaf7121d87f69b2b6074575b95c3ec3bbd11f659c02b67980b0b7dbffafcd4d9bbb7d71d124462d
e399f7e5dfebfdb3b11a37c0bd6fc8f5e7fc99487df478ff70aa1c38bfbac42d7902ed992b5ccbdf
d218e1e5710b9bad72325bf95310fb82c377b443d0c4096200427c162ffeb31f7dad435bf55e267f
2a9d28f9f140a23e46eb644a2bf91b42f1b7d141d2f7e6c04dd3f36f481fa9e08ab15a9af58f8b49
b4587195e4b7594a01cb4ded85419d9a98a204443e8dccd9c7da7f78deeeb90e4d46892e2df7c1a9
dad0e3cd4f98743ae7e002e649bb7b6ca3045f85b3db182d23e413f39288fa479f41bd9dd08f1979
d581404858e963f9a03acd5565d960ebbabc31563ed28619760236ab94a247dc7394cdc45ff5c511
e3f3827956d1f4171ea8c77cacaf4d2d997c29101fa857015037e365ef9b6f4235ed2ed74bc9124c
49221c66ff0adb040b019fe87c04bf1961f2fb02ecc514bd60bcfc2f7187436facc7d95c94fffc1a
1d5d3961736bab6fac7c1965a82be9565c6f1fa9f37967c258a3c514e7559919a1982a67e38fc42b
0aa7c4f7dba02ef6a980e9cb4e7e359aa9ad989fed913751aa4fc9d220a35cead6ebcc0ad49486b7
a14d4bfaa053a9484220455240cf0194499421e9e729745a434f36284bc98d92b5804e2906f82732
efca9e57f737620f641f4c210bf615729e95587de543d9cc8297cd1909b54964e5772823143a0298
24deb791cd039ff2d404a00e53f64ef651253868759afe7c18ceb49518cd0bd5b517f9370010b77b
d36ea382e32c7babf55fe997d784ee325dba038408d6e16cf42234af7adb759ef7f9eea2fd55b533
14c3ce335a21a3955a21ae36164fe2ca6f4536f7cf2088986ffaecd36a8a67dac01fca3cadde0f55
b53349655a225db7a427b4aa64e1a957ff20ebe7f072d87331bdb07d1b423ba96afa31931f844b87
90bebde0c3634df83cf33fb9b3b463a7eecd8749f4156b165790502e249279df2357c1e8b77e01df
2aa4978934f29579d9e4e4d8faa49b4bfa3eed05af3803da6e18ddebe8496ccd70c650f99ef3a260
3466853775f767a1e0dd0f5b5b68bb353ba3d58863fca93c547663f274b4bbd18eca973b38258849
2242070439aefc8fdf00399df6b591befe34813a3a2b0271a5c179c4e1fb89dc9d05c4f8290e69db
ee068f70bbfddc1ce70fbf5c5c6410e365bc39acd61c6fbd63bd13369cd016da1076fda73c832561
349a77a83d1703671685a3dc9f3b52586421f608abc23316dd92d17783cd5dbdb18fd40fb3ee6d7e
d4a3b160febe83ede36981100f6e7ea750fdb6c122defec828620d19cb19cee8303cd547aa203d94
66f42079979dc3dfd97dd7b6ecbf5cb86f2e3213f14dc2dc94c4faf99323ad9e8f8370bdac6c5d6d
32c57c2456b56c431fc26c3ef26ab729f9d420ddc95e4f2f5cb16a27821c6f30f121a2d70c948e6b
287dd588cd1d9f1de34d8d1a74b2cea68e5631de71b156ca69a2a785c4caef452d7acf2f4a48c4b9
064bece5b1a4457906863851144864b0e54397d6b927a9f49896f18c80fd7767d08ace209dbff4d1
d808cb5eaf81e025dc80f3c28bfad8d81d78db30f6a356cc1bf2a199971cf425dd277039444f841b
a76e43927afd960484fbde61e2d204d46e0acef1d78a96c18e7e1b498abc596535e9873e2b258252
82a99f31ad380569d7725d3a4cd2e47994b4ad8da739dd8a29623e1c599d41558d42ab589ee9fc19
619b11522ea9ec5042674dec3b9c7cd0522d39c90573ba6fd545ae14f6cdac0cc6f7e130d158a557
38c96d9472038a2f54605cba34deced5e092974a2d9b8b23cd18fd42ff9143f880fc6ef2b87a7b10
016317046864eb5acbca4269dc670deb102ef00bd96b8ea5e51d526c67f536f05f7128acf4d84bd7
9c55976b2b50e91a7e0fdd21fce1dd1402373ae3aff61d983bbdc90f4f8d39e2fe848939457ac31c
f2cdb6bc45078a26774c7a68ec955005babb3d7ed0d4b8a5219847567c97dcd039d39ad5c10e7489
c7d6b4d8fe263d617356addc52f2d3bf142cfc0f4eb504fd942704db42c426bfa85308453a86ebfb
e675c28133d67af80733b7d11b3c8a2d00f54b80b76ddcda56f28461c6bb07ce8e4f1bb2a462737a
990b4931f32e54b448eb81fba1fc1a529a8bf145e449cb34d67e38f8df697e53a6b0ca62a9b0ae8b
c456ca8f6d7fc34cbcba20ab435450f4c26c70d2c6e3aa3f1134670846052432f9765a6115aedeb7
e9050b06743f3d044ca04842bb397c35bfba95d01af7243b0f5b5144a91f74fd2afa1350c5456d36
7c3eabe85f698f91b3bc09140dd5808eebd54c6c7744940bf626b4f973b4fa2eb79ed0ac8a7b93b9
51d3820a7284ecce33d34195c576c66d5976169636464b2055eb43f03bbb5c8fe89818fad1644565
509fb089fb9049e95b3d9da30dfeb6f4a9805abf347fa0194012eb816f3325ea458c53c05ee32764
74c2e14086dd627269c4b59f26915c79d818d605a1df2f9426f7f2c9364f6657d628c8dbb9905d71
e1c622705281ed02357efa9fd3f51876b1cfad16f0ead62bb0735d46f43fadce8ad8b55d1e3fc189
d76be64c37539a5e4dbe734193a4d24185264d66333579d7199fa585150266be41f9c564edf8dbf9
3438aab1c275915c346a83d18f187f6ba405b346f06da891b6c9ab828795965e2a7998cbc140c69b
58db04b44fa45ee94c10837a064ad7eed7ebf48f253866b97712eb99dc77b20083406654ac263e0b
7baa624c015a1f064c2816ee27c3943f52fbe0dfd31007c408e66857beff4d3fdd5d5406a3330fef
2615758c2b6d8b8c176400244e98312adce9ec455d7d9533f0432ecef39516eb6ebe253efb2e7626
02431c802f9057aed46638ecfe83c653ca6ae896455a450ea6c1335cbb9cad9897db5d728ec56e45
fbf1a1854c666a8d88371f38d4f8353e7cb9433dd097b56a356cfb720b8c7bf079a449277d29a431
cac1cf5b365ed8ee1b55ac5f10e95026b5f87ca8f6d296b3a6308c9994646f8b1ee5eee07419714e
289a186f819b0d99224da437e8ef1d72f02708b1e04117db58e0674e091018c2f3682b2bed723d24
288e6d97d17db1efae50c18ebb494a63df201d7fc5318d8c964e51783dcc0ebef100358a01f90bb1
766d19675da8287029e98b541bebac511f03cb489f699cca425d1e9ee2376367a1ba29df05b37b31
8619ab07c22a41aa0ee325b1e8f16f21199a95a03f0677c74e1daae618b59cc1834fa9b5948dac57
796ae3f8bcc56322710503f543ebe4b80d700403d614932d057d5d0a556a6987248b51a3f77fdfab
85629383a6e2861d850ef4beaeddea6145a24b3de263609aac3ab2be576b7b1379cc5400203bff21
eddc97cb8a4aaed28390870e23b7439cb70cb9006ca63323608beaaab8c3737dc04d0b15cd01876d
ae0f662b3ba3624212dfd1fb873cadbe36cb378792ebe21c3fd33c3648ee07c66bac8b9142113ef4
c3555c25a8a7ba5d51a868a64164d62994ca6c2845b5d8b9b2a4a9fffd694f2aa3f3121a204ea416
507317ffab0b8450dd7ec22291fb73869c7e0ba2a0ef203fd4016223b2bba2e111f1bdc877ac1262
527dc8b60fa7e27e630025e36a0b070ed7d4cde50bb57c107aa50b5f9cde0fc65527c40307fa1972
668f65a5cd5f56ac483ea4a2922c258291437a610f144e9fd173c1f45cb3a0a50723b258e648988f
4d8be47b4de07d7110a85aaadf2137e6e1db14c9cd192236ccfda1645697b27e52d1d9f983b3d9ee
c2e208b70421d8907d9bbae00f0ee9a4dcab01b8270083aa526c9d40be629b0f08d66837009a46f6
efd5ff19ab7e66ca9feacda9f6b4f97b42fe0e505fd05e19b8fb6a524e90b12cab7329b1390f7fc9
7defbccd251bb9710f0a93668b513a0c4778fffb31c1f3c3a63c74b3ee24698c6ec91f7b49559750
065998ad110c710f449b904f66a38d9a9f2870ddc26fe012d3c7ea601b3cfe44c7fcbbaa68ebbb1a
cbeddfb3a5b4fc68f419147284ecf407194026311989ff79f744262ae8b97cf5a10d18c7a95054d0
7bba8a521b58afd0b71671a13f4eb68df204279f9315d45f11ddfeb1b2a8fdbe1250bd664f257ab2
c23e165e4e3bc30b5f13fc5aa56d568f68dfd36d892eacc7e5a043b75931222ae2a2037095ad85f6
ab29e1c819f5bed7705a512f1b27e3d24661f28b234cec8b6d2924511c6825e4e5550c4c6fc50468
8a4241443f1d1e805fadae0eb5e12e9b1e5acec9be103d9d9dcc2911123c338e576275415e72e31d
4840ede995f3aecc9ec2421a57e72376bb94f35b243266fd26df86a7cfbfe4d58f850fb3bc4d79be
76e2a7fe535cca1eff8f392215ec7e6262068e2d99471ca2de3bf2cfb1559c989f7babf60ff992c8
f72b6634a781b976afea082cd768c705a3b9a104c00d3d952e0e67c30b284df5ae0666b88e67d730
2c2237b285e77ad33205ad834ed7e4a071704e7edfe528b313f809ee83d9c5d3c08370bc287aff71
9d4f845ef1c002ab265e3c53543426a1065bc0f7287d16be6c717dd32432dd1409dc9d33b1c1afc9
364027621ebdeecde172888c9c63a2e1f8ddd47ae1b7456e86acc182792078fd5f10822443c832d4
dbb4bc2fc76f490bb0865533c3d8a6320c090d0b2a368f3186a4e6689eb9164aad84dd6b210a5592
c6505d198185fbd6d258726e440ac442fd1b767021535e150e076e96cefe006b9223017d13e4baf3
42ea70478f6bbdc593999236a14e48c6ceab27bfe25ff0f380e1058ba24277ed590520428251d253
207d0e0a693c9cecedf26f5fe819dac349c44c23720226b14e249cc740c4247ccef35375c7f0df86
6f016571bdf3c0b2206ead81e227a85c12c2d2c78aaf3aacab19eda5dfa2db1a5ecd6ff3e76a9d24
f8e0a6806ff41d0350d5f2895e0c79e8d4a3b3e8ea3eb045923af2fd153080b02adec98bc308f767
5fd52efd20c05a558ca4a152c8e393d32d84588422e7110e2e5f9ab29c9df3e2e61f336ba0a89797
93aa083594e89017d0ffe3857427845db7db261311f0680ef15a15d415f70845d201f500a5a2c7e4
8c485e3b956305755a7786586fb1cc84aa9f103b5a2201d26c1802826978e3c286f7e6dc88ae4efd
bda03c4baca2753c255f9a3580ccc32371d4bba3650af0a6685b1e29e7db5cd92ebf37ec7c1d49fc
2f79f72bba1145b949cf558251b00b46b5a64509617020922944e6da0cd210cea171b9e30272a8bb
04cb4743c248d1bdf6d015cb65515b229d6f21cadf38e96113abbd4f4830aaed694dd6a2a5121ed2
62fa69fb0a8e5d9702511033b98357720f799a4d9dc889f66c94ce32f4c125e0b3d2536e108ca554
8252ce002ba29881d285037591c32f5f484e329b831ff0dadf3401e42eaeda02ebcc228e13e4dc84
285682f9d4672f5977e69dd4c6a37ec168745c5861f9d832e5b9bd9d204d1d25541fc71bfa6cbc14
32392e6494354ca3f83283ca66d428bdb66862fcb7917efd5b408158eb579d306d14fa74658e176c
7598f25ea5526a35aec52b522f09e1e766678a3b1bd8be8d0e0b2d6650f75d53479a05468e61e129
e9fbac82c851928ae3af4d6ab212265e91f8e4f8d41676062cdc841b41fa2a9e8d9d6537d7d6cd6b
c714182dd53215196e0cd0c713728158d7e8b0f0fa93ff6ba1f592237864db251329cf6c1373c2b9
e0b52c64e96cfc5820861de405a8e7b48567bf7c3511798f881c5653f0c701d7798ae1a0a543ccf4
7bca3f37bdc0ede39c634b4d1b9f9bcaa273bb87531b26678e82eabb1c2a25c2dbc67f5008b541a6
6aedc8e7164b7fb9f733e7055aab0ffdfdc9212f7d7e2d80d273aaea0a7d9bd55d2bb73c1d2af10e
8063d5b47ad3e70e3877a8c0425129eb3c4d14a7413f3534c0464de9cb894a1656357e11ed68c4c1
a30c42c2ffb2a42d972e2b6b9d0da7a9f28407b306b4de6ebbfac85c277ab702bd9004d5a349df9c
1208239c1d8bc0fc95893fb155d42a7300cd1b905ee068b22ecaec8eb44257b022274351c4a12233
f6226531dd901b5c9d29a45cce63f50083a6f495968959823e1426c8c30533794391271c6e71a0e0
645c9f8ffc3abefd1bb3af3542c552e36d51c063db93a4d6815f20f8f5b259db57fb2118ab932068
017ee519280e93bc46023dfbec01ce625526a7ee368aca147cfbd85ba0f30e268cf16c715ef1ffdc
e3a6b4cb0bff2867be972673d08e584b7ab63e7905a7a88c2488af65f74c21af36ad0d323688067c
02de5fb7424bd375c076320ceada4d7c3068c5bec35119d378782bd4a941402b321d720e6c16a2f4
c81ec8b5a48b8f4ec03437a9079dde78bf3eadaa5d83490e751c00bb515a60e4c6abf069ffad59bf
afce70103f6dc0aec270ea1c27dd3b6935336d01c758f907e41951e9d49a15af2297af87ddef37a5
9094c9bcaebbecf3f0de572b63ae4cdb7f0ffaf52d89f5e3963b0231a91825173e0acb2b16431332
c867d5bbedbf4b66f5e5094371768846650e5b70a1956f3b119dd9dd4cf1c2334d7f0fdbdf3a6093
a110a01ae692c4f014fb412452d20bfa4a76bc222bfb6230260b0347c6c9c74eadb0e6f121591e2a
3d5550ef2000b1dad378025ab48146c37c71c9e993a3a930b95b4da4d599c1bd868977a562eecf43
54976f33912cc62f734b5a9ac2a062b6720e1e3372c857d3feefc109721734fec4d244edb0c7266d
d5ebd9cca0624f61ab4d9c3992d436d487d6041e65a0435a71194331e538578dad0853e679c3f040
9d72e10581c2679fb5eddd099a58e42b209e94673c45b060424dc48de9fa1b9795034f47ee681651
1ec52d0444a62a701155eb02da4c63d40200c4c1dd4e31ad26c929075171d8c561dfa25f646df7a0
49a9d0a5e29a9a07b195b58840c79223ef14b9e04b20e5dae19125e723c9fd7834f165cfb57a0452
23f401962fe0cbc9d4906e599ea84453e967f6f616dd4194dfcd4af5d36a9046501ccd46b8187528
ceeb4a26cb812a9ed35f33240f7930f611db01402e2bd9d91879b72ff65433fe33d069261a9f8c51
3778d049efe768c3cb7fc0ae2d5fbee7e114708f94ad7e46eec4bd91e4dabd130c8b5936f510e575
ef630339dd18bc51e224c5fe227e6d8ad3d633ea6e8c875e4e60c5c23322e1b14c7cd0ed4ac87731
4884cfcba486bd23d8e4f91073e836e3ca217835987f02e124d6f86e22e68e51cc6e1507e91b96ad
67e4c6d151f78ced252e42e1656d10e1027ecfcc80d7324434f1959383ae85ebb817654a991fe937
b63dda0ed196cb84b89a835ae2f374f57a138cb41717630f27dcdba8fc0d10a0b84a7658bbf2f619
d1c6baeb0e60edb93dabc64e225507f09810a40def22029a3125aac19ec7b8fe2c430a48718990d7
8336f4690dfbc25b9a6b4bbfed8dc0462e98cd41601d87bd7afab459695a2a405cd207d08ce6890f
a87e420bddd6b2aa5ede4063eeb9b7c4c31d9ad2b3efbfbb0c3e47ca07ba428f666673593652b62f
739c2d9a61b74fe9a5eb3c3bea37af8a1039626bbcfee030cf2a7f3b0d017cf145ccf60f362f4ff0
3aec27b03c8e15b343402e070ad4146d2c6ed94a1159d5c8ef0499e44d1b4e026dc072b4fe9b3510
d17084c0fe0582d0a86d010f9f6ff5d985c05c12f4984293e1db9325399ffe5e0f7704c399dc58c3
c5be1e779d0ded5f889e0bd9c3a9e37f6cb2bcd46286686127093f2511d3524194a21cc9cc7a8137
f059b62d7974dc05b7864b584fa486614c6962e2b0ee2f4dbd13cc66c2b21bfe9457cfa06f561712
c936eec018c00a1315e90ffd0ffd90dcebdd56aac124fb52394ffea6ec17830e2510c1d0473d3264
38f3f893793c27df680db07e9b1e6925bfe71d998e6aee600fe3b7831e17c58ecf7a5e1471921767
cd85403753796a5da2e4cd7b8f17414eff165b0bf861c6e19d0d8bbc9bd8d046ac0aad08a1bc717c
badfa4abdeaab99dc0fc33cd17ba8879861359c20ea2466726c1b651a17977b031d5f0434ac62c66
0f510897e1b8425198aa5598ff3c2f6c8f7f1244253133a4d297e155c2d0ab4be3cf10e4a6903745
d4fa0df383ea1108a9f34f8d001a539763bd7f99816604ff54cfd147056288802c38659d8931cf21
64300b735fa5da9faba2b856e35ad9d880d6b08fbea6e84c4505246d102a8096d72bf3ca9a448cb2
d9169d42333df5e7cf40356fad9f478cb91352071a5c7ab68c65584e1ea615601d622a0a4b0e031b
38c801f40a7a1be035a83d9000b1483d2e0e8f02658dfa967c23820926c0304728f3b30ab3e6985f
d405654bf204610b2149860141b767caddcdbd5e4db3b735bc7406ba186e30f25b7a0e7f6270e21a
a50046b1a38265dcb53986385687758ad8b3ab71ac68a871f12ec4b052679c47335e42129be7ef6c
457a8eff23bf71e31fd13dacbfa03c4032da9741ac1357b220e40844569244e23a19d79488654bc2
5965af0d0521b192bc52342dcb822c15c12e98dc9c2e64e0935a97ed3fea6bab201bb401e2603f2e
f05d4117480c864cb57d58301adf6863efef2d10cbe209b7b0a874bb74c962c1fd48ba82f4479bd8
9568abf8a9552a56edb7eaa66e5902fba69ea215f2503369fca0973808a283a45dcef0a3f8cffcde
49453004ef1b218b59c6615e336268105c8875163fe40088429b57bf19ea441fcd8ee37997faa4ea
ada914735badaac802d38f93e2c51639f7296f9a11879efb18878602badcf8ae30d99cf9a422a08d
8776b1038cea8e48e6cf1e0bb2be3e15c58e421562911f2fd077573e21ca81d2df32dfca334269f0
8828a6109951e65795f5125dad2799d022107bce567c935886ed6a4b75d472fea6cf83f44a834db8
90537629c17358587f6912954d902769cc03dbd28461f69d4987d91c74f2df170d677888a0febbdf
98f58232e18c38b36b915f7a1ea5cc7f8a67b0d1ee12aa58428bbb
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Pick TASK  0 -1
 HBW_Copy_State <Virtual>  0
 PID_10 PID  0
 PID_11 PID  0
 hunt_exp_light PROGRAM  0 -1
 HBW_Home <Virtual>  0
 HBW_Pick_Sto <Virtual>  0
 test TASK  0 -1
 HBW_Pickup_ST PROGRAM  0 -1
 HWB_Extend_Arm <Virtual>  0
 HBW_Retract_Arm <Virtual>  0
 HWB_PickUp TASK  0 -1
 HBW_HTO1POS <Virtual>  0
 HBW_Left_1Block <Virtual>  0
 HBW_HomeTo2_Col <Virtual>  0
 HWB_HomeTo3_Col <Virtual>  0
 HWB_HomeTo2_Row <Virtual>  0
 HWB_HomeTo3_Row <Virtual>  0
 HWB_HomeTo1_Col <Virtual>  0
 HBW_move_left_1 <Virtual>  0
 HWB_Home_to_11 <Virtual>  0
 HWB_11_DropOff <Virtual>  0
 HBW_Pickup <Virtual>  0
 HBW_PickUp_R1 <Virtual>  0
 HBW_Send_VGR <Virtual>  0
 HBW_PickUp_VGR <Virtual>  0
 HBW_Return_VGR <Virtual>  0
 HBW_MotorsOff <Virtual>  0
 HBW_ConvTo11 <Virtual>  0
 HBW_Return_Top <Virtual>  0
 HBW_MV_11_12 <Virtual>  0
 HBW_Conv_12 <Virtual>  0
 HBW_Conv_12_Lat <Virtual>  0
 HBW_RETRACT_13 <Virtual>  0
 HBW_Retract_23 <Virtual>  0
 HBW_Conv13_Lat <Virtual>  0
 HBW_Conv_2Row <Virtual>  0
 HBW_PickUp_R2 <Virtual>  0
 HBW_Conv11_Lat <Virtual>  0
 HBW_Retract_12 <Virtual>  0
 HBW_Shift_C1C2 <Virtual>  0
 HBW_Move_R1_R2 <Virtual>  0
 HBW_Retract_22 <Virtual>  0
 HBW_Retract_21 <Virtual>  0
 HBW_Retract_31 <Virtual>  0
 HBW_Move_R2_R3 <Virtual>  0
 HBW_PickUp_R3 <Virtual>  0
 HBW_Conv_3Row <Virtual>  0
 HBW_Retract_32 <Virtual>  0
 HBW_Retract_33 <Virtual>  0
 HBW_Retract_Done PROGRAM  0 -1
 HBW_Retract_DN <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
#BEGIN FMT_COMMENT 
"VGR Program"
#END

STR ST1
COPY 0x1 "4 0x0 MC410 C410 1 0x0 MC409 C409 1 0x0 MC412 Y28 1 0x0 MC412 MC450 1 0x0 MC411 C411 1 0x0 MC408 C408 1 0x0 MC406 C406 1 0x0 MC407 C407 1 0x0 MC413 Y29 1 0x0 MC413 MC451 1 0x0 X27 MI200 1"

// Rung VGR_Copy_State#2
// Offset 27
NOP

// Rung VGR_Copy_State#3
// Offset 28
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR ST1
COPY 0x1 "4 0x0 MC800 Y41 1 0x0 Y41 MI801 1 0x0 MC802 Y43 1 0x0 Y43 MI803 1 0x0 MC804 C804 1 0x0 MC805 C805 1 0x0 MC806 Y44 1 0x0 MC807 Y20 1 0x0 MC808 C811 1 0x0 MC809 C809 1 0x0 MC810 C810 1 0x0 MC812 C812 1 0x0 MC813 C813 1 0x0 MC814 C814 1 0x0 MC816 Y45 1 0x0 MC817 Y46 1 0x0 MC818 Y21 1"

// Rung MPO_Copy_State#2
// Offset 39
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC800 C1600 1 0x0 MC801 C1601 1 0x0 MC802 C1602 1 0x0 MC803 C1603 1 0x0 MC804 C1604 1 0x0 Y31 MI800 1 0x0 MC850 C1605 1"

// Rung SLD_Copy_State#2
// Offset 19
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
#BEGIN FMT_COMMENT 
"SSC Program"
#END

STR ST1
COPY 0x1 "4 0x0 MC606 C1200 1 0x0 MC607 C1201 1 0x0 MC608 C1202 1 0x0 MC609 C1203 1 0x0 MC615 C1215 1 0x0 MC616 C1216 1 0x0 MC617 C1217 1 0x0 MC618 C1218 1 0x0 MC619 C1219 1 0x0 MC620 C1220 1"

// Rung SSC_Copy_State#2
// Offset 25
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_Home
$LGCMOD HBW_Home

// Rung HBW_Home#1
// Offset 0
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Home#2
// Offset 8
STRN C215
ANDN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 60 60
OUT Y51

// Rung HBW_Home#3
// Offset 26
STRN C215
ANDN X3
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y5

// Rung HBW_Home#4
// Offset 43
STRN C215
DUPBOOL
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y76

// Rung HBW_Home#5
// Offset 64
NOP

// Rung HBW_Home#6
// Offset 65
RET

// End of Code Block HBW_Home
$LGCEND HBW_Home

// Beginning of Code Block HBW_Copy_State
$LGCMOD HBW_Copy_State

// Rung HBW_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC600 Y40 1 0x0 Y80 MHR102 1 0x0 MC101 C205 1 0x0 MC102 C206 1 0x0 MC103 C207 1 0x0 MC104 C208 1 0x0 MC105 C209 1 0x0 MC106 C210 1 0x0 MC107 C211 1 0x0 MC108 C212 1 0x0 MC109 C213 1 0x0 MC110 C214 1 0x0 MC111 C215 1 0x0 MC112 C216 1 0x0 MC113 C300 1 0x0 X2 MI101 1 0x0 X10 MI102 1 0x0 X11 MI103 1 0x0 X3 MI104 1 0x0 X0 MI105 1 0x0 X6 MI106 1 0x0 X7 MI107 1 0x0 X8 MI108 1 0x0 X9 MI109 1 0x0 $HBW_Encoder_X.Acc MHR1 1 0x0 $HBW_Encoder_Z.Acc MHR2 1"

// Rung HBW_Copy_State#2
// Offset 57
RET

// End of Code Block HBW_Copy_State
$LGCEND HBW_Copy_State

// Beginning of Code Block HBW_HomeTo2_Col
$LGCMOD HBW_HomeTo2_Col

// Rung HBW_HomeTo2_Col#1
// Offset 0
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50

// Rung HBW_HomeTo2_Col#2
// Offset 17
STRGE -2775 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_HomeTo2_Col#3
// Offset 22
NOP

// Rung HBW_HomeTo2_Col#4
// Offset 23
NOP

// Rung HBW_HomeTo2_Col#5
// Offset 24
NOP

// Rung HBW_HomeTo2_Col#6
// Offset 25
RET

// End of Code Block HBW_HomeTo2_Col
$LGCEND HBW_HomeTo2_Col

// Beginning of Code Block HWB_HomeTo1_Col
$LGCMOD HWB_HomeTo1_Col

// Rung HWB_HomeTo1_Col#1
// Offset 0
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50

// Rung HWB_HomeTo1_Col#2
// Offset 17
STRGE 3020 $HBW_Encoder_X.Acc
OUT C250

// Rung HWB_HomeTo1_Col#3
// Offset 22
NOP

// Rung HWB_HomeTo1_Col#4
// Offset 23
NOP

// Rung HWB_HomeTo1_Col#5
// Offset 24
RET

// End of Code Block HWB_HomeTo1_Col
$LGCEND HWB_HomeTo1_Col

// Beginning of Code Block HWB_Home_to_11
$LGCMOD HWB_Home_to_11

// Rung HWB_Home_to_11#1
// Offset 0
STRN C215
AND C250
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HWB_Home_to_11#2
// Offset 22
STRGE 3020 $HBW_Encoder_X.Acc
OUT C250

// Rung HWB_Home_to_11#3
// Offset 27
STRN C215
AND C251
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
POPBOOL
AND ST2
OUT Y5

// Rung HWB_Home_to_11#4
// Offset 49
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HWB_Home_to_11#5
// Offset 54
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HWB_Home_to_11#6
// Offset 73
NOP

// Rung HWB_Home_to_11#7
// Offset 74
NOP

// Rung HWB_Home_to_11#8
// Offset 75
RET

// End of Code Block HWB_Home_to_11
$LGCEND HWB_Home_to_11

// Beginning of Code Block HWB_11_DropOff
$LGCMOD HWB_11_DropOff

// Rung HWB_11_DropOff#1
// Offset 0
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HWB_11_DropOff#2
// Offset 8
STRGE 80 $HBW_Encoder_X.Acc
OUT C250

// Rung HWB_11_DropOff#3
// Offset 13
STRN C215
ANDN C250
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51

// Rung HWB_11_DropOff#4
// Offset 31
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y4
AND ST2
OUT Y5

// Rung HWB_11_DropOff#5
// Offset 51
STRGE 2850 $HBW_Encoder_Z.Acc
OUT C251

// Rung HWB_11_DropOff#6
// Offset 56
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 60
OUT Y7

// Rung HWB_11_DropOff#7
// Offset 73
RET

// End of Code Block HWB_11_DropOff
$LGCEND HWB_11_DropOff

// Beginning of Code Block HBW_PickUp_R1
$LGCMOD HBW_PickUp_R1

// Rung HBW_PickUp_R1#1
// Offset 0
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_PickUp_R1#2
// Offset 19
STRN C215
AND C251
DUPBOOL
AND X10
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_PickUp_R1#3
// Offset 41
STRLE 80 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_PickUp_R1#4
// Offset 46
STRN C215
AND ST2
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
OUT Y50

// Rung HBW_PickUp_R1#5
// Offset 64
STRLE 80 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_PickUp_R1#6
// Offset 69
NOP

// Rung HBW_PickUp_R1#7
// Offset 70
NOP

// Rung HBW_PickUp_R1#8
// Offset 71
NOP

// Rung HBW_PickUp_R1#9
// Offset 72
NOP

// Rung HBW_PickUp_R1#10
// Offset 73
RET

// End of Code Block HBW_PickUp_R1
$LGCEND HBW_PickUp_R1

// Beginning of Code Block HBW_Send_VGR
$LGCMOD HBW_Send_VGR

// Rung HBW_Send_VGR#1
// Offset 0
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_Send_VGR#2
// Offset 19
STRN C215
AND ST2
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y5
OUT Y4

// Rung HBW_Send_VGR#3
// Offset 37
STRN C215
AND X2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 60 60
OUT Y48
AND ST2
OUT Y49

// Rung HBW_Send_VGR#4
// Offset 56
NOP

// Rung HBW_Send_VGR#5
// Offset 57
NOP

// Rung HBW_Send_VGR#6
// Offset 58
RET

// End of Code Block HBW_Send_VGR
$LGCEND HBW_Send_VGR

// Beginning of Code Block HBW_PickUp_VGR
$LGCMOD HBW_PickUp_VGR

// Rung HBW_PickUp_VGR#1
// Offset 0
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_PickUp_VGR#2
// Offset 19
STRN C215
AND ST2
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y5
OUT Y4

// Rung HBW_PickUp_VGR#3
// Offset 37
STRN C215
AND X11
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 60 60
OUT Y49
AND ST2
OUT Y48

// Rung HBW_PickUp_VGR#4
// Offset 56
NOP

// Rung HBW_PickUp_VGR#5
// Offset 57
NOP

// Rung HBW_PickUp_VGR#6
// Offset 58
RET

// End of Code Block HBW_PickUp_VGR
$LGCEND HBW_PickUp_VGR

// Beginning of Code Block HBW_Return_VGR
$LGCMOD HBW_Return_VGR

// Rung HBW_Return_VGR#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C253
AND C299
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y6

// Rung HBW_Return_VGR#2
// Offset 23
STRN C215
AND X1
DUPBOOL
AND C299
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 60 60
OUT Y49
POPBOOL
AND ST2
OUT Y48

// Rung HBW_Return_VGR#3
// Offset 45
STRN C215
AND C251
DUPBOOL
ANDN X1
AND C299
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_Return_VGR#4
// Offset 68
STRLE 2575 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Return_VGR#5
// Offset 73
NOP

// Rung HBW_Return_VGR#6
// Offset 74
NOP

// Rung HBW_Return_VGR#7
// Offset 75
RET

// End of Code Block HBW_Return_VGR
$LGCEND HBW_Return_VGR

// Beginning of Code Block HBW_MotorsOff
$LGCMOD HBW_MotorsOff

// Rung HBW_MotorsOff#1
// Offset 0
STRN C215
ANDN ST2
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
OUT Y6

// Rung HBW_MotorsOff#2
// Offset 18
STRN C215
AND ST2
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 60 60
OUT Y5
OUT Y4

// Rung HBW_MotorsOff#3
// Offset 36
STRN C215
AND ST2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 60 60
OUT Y49
OUT Y48

// Rung HBW_MotorsOff#4
// Offset 54
NOP

// Rung HBW_MotorsOff#5
// Offset 55
NOP

// Rung HBW_MotorsOff#6
// Offset 56
NOP

// Rung HBW_MotorsOff#7
// Offset 57
RET

// End of Code Block HBW_MotorsOff
$LGCEND HBW_MotorsOff

// Beginning of Code Block HBW_ConvTo11
$LGCMOD HBW_ConvTo11

// Rung HBW_ConvTo11#1
// Offset 0
STRN C215
AND C250
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HBW_ConvTo11#2
// Offset 22
NOP

// Rung HBW_ConvTo11#3
// Offset 23
STRGE 3020 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_ConvTo11#4
// Offset 28
STRN C215
AND C251
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_ConvTo11#5
// Offset 50
STRLE 80 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_ConvTo11#6
// Offset 55
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_ConvTo11#7
// Offset 74
NOP

// Rung HBW_ConvTo11#8
// Offset 75
NOP

// Rung HBW_ConvTo11#9
// Offset 76
RET

// End of Code Block HBW_ConvTo11
$LGCEND HBW_ConvTo11

// Beginning of Code Block HBW_Return_Top
$LGCMOD HBW_Return_Top

// Rung HBW_Return_Top#1
// Offset 0
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_Return_Top#2
// Offset 19
STRN C215
AND C251
DUPBOOL
AND X10
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
POPBOOL
AND ST2
OUT Y5

// Rung HBW_Return_Top#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Return_Top#4
// Offset 46
STRN C215
AND ST2
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
OUT Y50

// Rung HBW_Return_Top#5
// Offset 64
STRLE 80 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Return_Top#6
// Offset 69
NOP

// Rung HBW_Return_Top#7
// Offset 70
NOP

// Rung HBW_Return_Top#8
// Offset 71
RET

// End of Code Block HBW_Return_Top
$LGCEND HBW_Return_Top

// Beginning of Code Block HBW_MV_11_12
$LGCMOD HBW_MV_11_12

// Rung HBW_MV_11_12#1
// Offset 0
STRN C215
DUPBOOL
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_MV_11_12#2
// Offset 21
NOP

// Rung HBW_MV_11_12#3
// Offset 22
NOP

// Rung HBW_MV_11_12#4
// Offset 23
NOP

// Rung HBW_MV_11_12#5
// Offset 24
RET

// End of Code Block HBW_MV_11_12
$LGCEND HBW_MV_11_12

// Beginning of Code Block HBW_Conv_12
$LGCMOD HBW_Conv_12

// Rung HBW_Conv_12#1
// Offset 0
NOP

// Rung HBW_Conv_12#2
// Offset 1
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_Conv_12#3
// Offset 20
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
AND ST2
OUT Y4

// Rung HBW_Conv_12#4
// Offset 40
STRGE $HBW_Encoder_Z.Acc 80
OUT C251

// Rung HBW_Conv_12#5
// Offset 45
NOP

// Rung HBW_Conv_12#6
// Offset 46
RET

// End of Code Block HBW_Conv_12
$LGCEND HBW_Conv_12

// Beginning of Code Block HBW_Conv_12_Lat
$LGCMOD HBW_Conv_12_Lat

// Rung HBW_Conv_12_Lat#1
// Offset 0
NOP

// Rung HBW_Conv_12_Lat#2
// Offset 1
STRN C215
ANDN C250
DUPBOOL
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
POPBOOL
AND ST2
OUT Y7

// Rung HBW_Conv_12_Lat#3
// Offset 23
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Conv_12_Lat#4
// Offset 42
STRGE 5325 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Conv_12_Lat#5
// Offset 47
NOP

// Rung HBW_Conv_12_Lat#6
// Offset 48
RET

// End of Code Block HBW_Conv_12_Lat
$LGCEND HBW_Conv_12_Lat

// Beginning of Code Block HBW_RETRACT_13
$LGCMOD HBW_RETRACT_13

// Rung HBW_RETRACT_13#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_RETRACT_13#2
// Offset 22
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_RETRACT_13#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_RETRACT_13#4
// Offset 46
STRN C215
AND C250
DUPBOOL
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HBW_RETRACT_13#5
// Offset 68
STRGE 7685 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_RETRACT_13#6
// Offset 73
RET

// End of Code Block HBW_RETRACT_13
$LGCEND HBW_RETRACT_13

// Beginning of Code Block HBW_Retract_23
$LGCMOD HBW_Retract_23

// Rung HBW_Retract_23#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_23#2
// Offset 22
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_23#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_23#4
// Offset 46
STRN C215
AND ST2
OUT Y51
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50

// Rung HBW_Retract_23#5
// Offset 65
STRGE 7685 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_23#6
// Offset 70
RET

// End of Code Block HBW_Retract_23
$LGCEND HBW_Retract_23

// Beginning of Code Block HBW_Conv13_Lat
$LGCMOD HBW_Conv13_Lat

// Rung HBW_Conv13_Lat#1
// Offset 0
NOP

// Rung HBW_Conv13_Lat#2
// Offset 1
STRN C215
ANDN C250
DUPBOOL
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
POPBOOL
AND ST2
OUT Y7

// Rung HBW_Conv13_Lat#3
// Offset 23
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Conv13_Lat#4
// Offset 42
STRGE 7685 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Conv13_Lat#5
// Offset 47
NOP

// Rung HBW_Conv13_Lat#6
// Offset 48
RET

// End of Code Block HBW_Conv13_Lat
$LGCEND HBW_Conv13_Lat

// Beginning of Code Block HBW_Conv_2Row
$LGCMOD HBW_Conv_2Row

// Rung HBW_Conv_2Row#1
// Offset 0
NOP

// Rung HBW_Conv_2Row#2
// Offset 1
NOP

// Rung HBW_Conv_2Row#3
// Offset 2
NOP

// Rung HBW_Conv_2Row#4
// Offset 3
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_Conv_2Row#5
// Offset 22
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
AND ST2
OUT Y4

// Rung HBW_Conv_2Row#6
// Offset 42
STRGE $HBW_Encoder_Z.Acc 1380
OUT C251

// Rung HBW_Conv_2Row#7
// Offset 47
NOP

// Rung HBW_Conv_2Row#8
// Offset 48
RET

// End of Code Block HBW_Conv_2Row
$LGCEND HBW_Conv_2Row

// Beginning of Code Block HBW_PickUp_R2
$LGCMOD HBW_PickUp_R2

// Rung HBW_PickUp_R2#1
// Offset 0
NOP

// Rung HBW_PickUp_R2#2
// Offset 1
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_PickUp_R2#3
// Offset 20
STRN C215
AND ST2
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
OUT Y50

// Rung HBW_PickUp_R2#4
// Offset 38
NOP

// Rung HBW_PickUp_R2#5
// Offset 39
STRN C215
AND C251
DUPBOOL
AND X10
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_PickUp_R2#6
// Offset 61
STRLE 1400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_PickUp_R2#7
// Offset 66
NOP

// Rung HBW_PickUp_R2#8
// Offset 67
NOP

// Rung HBW_PickUp_R2#9
// Offset 68
NOP

// Rung HBW_PickUp_R2#10
// Offset 69
RET

// End of Code Block HBW_PickUp_R2
$LGCEND HBW_PickUp_R2

// Beginning of Code Block HBW_Conv11_Lat
$LGCMOD HBW_Conv11_Lat

// Rung HBW_Conv11_Lat#1
// Offset 0
NOP

// Rung HBW_Conv11_Lat#2
// Offset 1
STRN C215
ANDN C250
DUPBOOL
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
POPBOOL
AND ST2
OUT Y7

// Rung HBW_Conv11_Lat#3
// Offset 23
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Conv11_Lat#4
// Offset 42
STRGE 3020 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Conv11_Lat#5
// Offset 47
NOP

// Rung HBW_Conv11_Lat#6
// Offset 48
RET

// End of Code Block HBW_Conv11_Lat
$LGCEND HBW_Conv11_Lat

// Beginning of Code Block HBW_Retract_12
$LGCMOD HBW_Retract_12

// Rung HBW_Retract_12#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_12#2
// Offset 22
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_12#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_12#4
// Offset 46
RET

// End of Code Block HBW_Retract_12
$LGCEND HBW_Retract_12

// Beginning of Code Block HBW_Shift_C1C2
$LGCMOD HBW_Shift_C1C2

// Rung HBW_Shift_C1C2#1
// Offset 0
STRGE 5320 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Shift_C1C2#2
// Offset 5
NOP

// Rung HBW_Shift_C1C2#3
// Offset 6
STRN C215
AND C250
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
AND ST2
OUT Y51

// Rung HBW_Shift_C1C2#4
// Offset 25
NOP

// Rung HBW_Shift_C1C2#5
// Offset 26
STRN C215
AND ST2
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
OUT Y6

// Rung HBW_Shift_C1C2#6
// Offset 44
NOP

// Rung HBW_Shift_C1C2#7
// Offset 45
RET

// End of Code Block HBW_Shift_C1C2
$LGCEND HBW_Shift_C1C2

// Beginning of Code Block HBW_Move_R1_R2
$LGCMOD HBW_Move_R1_R2

// Rung HBW_Move_R1_R2#1
// Offset 0
STRGE 1700 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Move_R1_R2#2
// Offset 5
NOP

// Rung HBW_Move_R1_R2#3
// Offset 6
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Move_R1_R2#4
// Offset 25
NOP

// Rung HBW_Move_R1_R2#5
// Offset 26
NOP

// Rung HBW_Move_R1_R2#6
// Offset 27
RET

// End of Code Block HBW_Move_R1_R2
$LGCEND HBW_Move_R1_R2

// Beginning of Code Block HBW_Retract_22
$LGCMOD HBW_Retract_22

// Rung HBW_Retract_22#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_22#2
// Offset 22
STRGE 1700 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_22#3
// Offset 27
NOP

// Rung HBW_Retract_22#4
// Offset 28
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_22#5
// Offset 47
STRLE 5300 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_22#6
// Offset 52
STRN C215
AND C250
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
AND ST2
OUT Y50

// Rung HBW_Retract_22#7
// Offset 72
NOP

// Rung HBW_Retract_22#8
// Offset 73
RET

// End of Code Block HBW_Retract_22
$LGCEND HBW_Retract_22

// Beginning of Code Block HBW_Retract_21
$LGCMOD HBW_Retract_21

// Rung HBW_Retract_21#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_21#2
// Offset 22
STRGE 1700 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_21#3
// Offset 27
NOP

// Rung HBW_Retract_21#4
// Offset 28
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_21#5
// Offset 47
STRLE 3020 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_21#6
// Offset 52
STRN C215
AND C250
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
AND ST2
OUT Y50

// Rung HBW_Retract_21#7
// Offset 72
NOP

// Rung HBW_Retract_21#8
// Offset 73
RET

// End of Code Block HBW_Retract_21
$LGCEND HBW_Retract_21

// Beginning of Code Block HBW_Retract_31
$LGCMOD HBW_Retract_31

// Rung HBW_Retract_31#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_31#2
// Offset 22
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_31#3
// Offset 41
STRGE 400 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_31#4
// Offset 46
STRN C215
AND ST2
OUT Y51
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50

// Rung HBW_Retract_31#5
// Offset 65
STRGE 7685 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_31#6
// Offset 70
RET

// End of Code Block HBW_Retract_31
$LGCEND HBW_Retract_31

// Beginning of Code Block HBW_Move_R2_R3
$LGCMOD HBW_Move_R2_R3

// Rung HBW_Move_R2_R3#1
// Offset 0
STRGE 3600 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Move_R2_R3#2
// Offset 5
NOP

// Rung HBW_Move_R2_R3#3
// Offset 6
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Move_R2_R3#4
// Offset 25
NOP

// Rung HBW_Move_R2_R3#5
// Offset 26
NOP

// Rung HBW_Move_R2_R3#6
// Offset 27
RET

// End of Code Block HBW_Move_R2_R3
$LGCEND HBW_Move_R2_R3

// Beginning of Code Block HBW_PickUp_R3
$LGCMOD HBW_PickUp_R3

// Rung HBW_PickUp_R3#1
// Offset 0
NOP

// Rung HBW_PickUp_R3#2
// Offset 1
STRN C215
ANDN X10
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y6
AND ST2
OUT Y7

// Rung HBW_PickUp_R3#3
// Offset 20
STRN C215
AND ST2
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
OUT Y50

// Rung HBW_PickUp_R3#4
// Offset 38
NOP

// Rung HBW_PickUp_R3#5
// Offset 39
STRN C215
AND C251
DUPBOOL
AND X10
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y5
POPBOOL
AND ST2
OUT Y4

// Rung HBW_PickUp_R3#6
// Offset 61
STRLE 2800 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_PickUp_R3#7
// Offset 66
NOP

// Rung HBW_PickUp_R3#8
// Offset 67
NOP

// Rung HBW_PickUp_R3#9
// Offset 68
NOP

// Rung HBW_PickUp_R3#10
// Offset 69
RET

// End of Code Block HBW_PickUp_R3
$LGCEND HBW_PickUp_R3

// Beginning of Code Block HBW_Conv_3Row
$LGCMOD HBW_Conv_3Row

// Rung HBW_Conv_3Row#1
// Offset 0
NOP

// Rung HBW_Conv_3Row#2
// Offset 1
STRN C215
ANDN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
AND ST2
OUT Y6

// Rung HBW_Conv_3Row#3
// Offset 20
STRN C215
AND C251
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Conv_3Row#4
// Offset 40
STRLE $HBW_Encoder_Z.Acc 2950
OUT C251

// Rung HBW_Conv_3Row#5
// Offset 45
NOP

// Rung HBW_Conv_3Row#6
// Offset 46
RET

// End of Code Block HBW_Conv_3Row
$LGCEND HBW_Conv_3Row

// Beginning of Code Block HBW_Retract_32
$LGCMOD HBW_Retract_32

// Rung HBW_Retract_32#1
// Offset 0
STRGE 3300 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_32#2
// Offset 5
NOP

// Rung HBW_Retract_32#3
// Offset 6
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_32#4
// Offset 28
NOP

// Rung HBW_Retract_32#5
// Offset 29
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_32#6
// Offset 48
STRGE 5400 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_32#7
// Offset 53
NOP

// Rung HBW_Retract_32#8
// Offset 54
STRN C215
AND C250
DUPBOOL
ANDN C251
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HBW_Retract_32#9
// Offset 77
NOP

// Rung HBW_Retract_32#10
// Offset 78
RET

// End of Code Block HBW_Retract_32
$LGCEND HBW_Retract_32

// Beginning of Code Block HBW_Retract_33
$LGCMOD HBW_Retract_33

// Rung HBW_Retract_33#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_33#2
// Offset 22
STRGE 3300 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_33#3
// Offset 27
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_33#4
// Offset 46
STRGE 7685 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_33#5
// Offset 51
NOP

// Rung HBW_Retract_33#6
// Offset 52
STRN C215
AND C250
DUPBOOL
ANDN C251
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y50
POPBOOL
AND ST2
OUT Y51

// Rung HBW_Retract_33#7
// Offset 75
NOP

// Rung HBW_Retract_33#8
// Offset 76
RET

// End of Code Block HBW_Retract_33
$LGCEND HBW_Retract_33

// Beginning of Code Block HBW_Retract_DN
$LGCMOD HBW_Retract_DN

// Rung HBW_Retract_DN#1
// Offset 0
STRN C215
ANDN X11
DUPBOOL
ANDN C251
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
OUT Y7
POPBOOL
AND ST2
OUT Y8

// Rung HBW_Retract_DN#2
// Offset 22
STRGE 3200 $HBW_Encoder_Z.Acc
OUT C251

// Rung HBW_Retract_DN#3
// Offset 27
NOP

// Rung HBW_Retract_DN#4
// Offset 28
STRN C215
AND C251
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
OUT Y4
AND ST2
OUT Y5

// Rung HBW_Retract_DN#5
// Offset 47
STRLE 80 $HBW_Encoder_X.Acc
OUT C250

// Rung HBW_Retract_DN#6
// Offset 52
STRN C215
AND C250
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
OUT Y51
AND ST2
OUT Y50

// Rung HBW_Retract_DN#7
// Offset 72
NOP

// Rung HBW_Retract_DN#8
// Offset 73
RET

// End of Code Block HBW_Retract_DN
$LGCEND HBW_Retract_DN

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#2
// Offset 3
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#3
// Offset 6
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#4
// Offset 9
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#5
// Offset 12
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// Rung $Main#6
// Offset 15
#BEGIN FMT_COMMENT 
"Hunter Demo Light<br>"
#END

STR ST1
RUN hunt_exp_light

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
SG HBW_Program.S0

// Rung HBW_Program#2
// Offset 2
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#3
// Offset 10
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#4
// Offset 12
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#5
// Offset 14
STR ST1
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#6
// Offset 22
NOP

// Rung HBW_Program#7
// Offset 23
STR C213
JMP HBW_Program.S1

// Rung HBW_Program#8
// Offset 25
SG HBW_Program.S1

// Rung HBW_Program#9
// Offset 27
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#10
// Offset 35
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#11
// Offset 37
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#12
// Offset 39
STR ST1
MOVE 6 N1

// Rung HBW_Program#13
// Offset 42
STR ST1
MOVE 0 C299

// Rung HBW_Program#14
// Offset 45
NOP

// Rung HBW_Program#15
// Offset 46
STR ST1
DUPBOOL
STR C205
ANDN C206
STR C206
ANDN C205
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 500 60
POPBOOL
DUPBOOL
AND C205
OUT Y48
POPBOOL
AND C206
OUT Y49

// Rung HBW_Program#16
// Offset 75
STR ST1
DUPBOOL
STR C207
ANDN C208
STRN C207
AND C208
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
POPBOOL
DUPBOOL
AND C207
OUT Y50
POPBOOL
AND C208
OUT Y51

// Rung HBW_Program#17
// Offset 104
STR ST1
DUPBOOL
STR C209
ANDN C210
STRN C209
AND C210
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
POPBOOL
DUPBOOL
AND C209
OUT Y4
POPBOOL
AND C210
OUT Y5

// Rung HBW_Program#18
// Offset 133
STR ST1
DUPBOOL
STR C211
ANDN C212
STRN C211
AND C212
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
POPBOOL
DUPBOOL
AND C211
OUT Y6
POPBOOL
AND C212
OUT Y7

// Rung HBW_Program#19
// Offset 162
STR C213
JMP HBW_Program.S2

// Rung HBW_Program#20
// Offset 164
SG HBW_Program.S2

// Rung HBW_Program#21
// Offset 166
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#22
// Offset 174
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#23
// Offset 176
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#24
// Offset 178
STR ST1
CALL HBW_Home 0x1 DST511 "3" "3"

// Rung HBW_Program#25
// Offset 186
STR X0
AND X11
AND X3
JMP HBW_Program.S3

// Rung HBW_Program#26
// Offset 190
STR C212
JMP HBW_Program.S3

// Rung HBW_Program#27
// Offset 192
NOP

// Rung HBW_Program#28
// Offset 193
SG HBW_Program.S3

// Rung HBW_Program#29
// Offset 195
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#30
// Offset 203
STR ST1
CALL HWB_Home_to_11 0x1 DST511 "3" "3"

// Rung HBW_Program#31
// Offset 211
STRN C250
ANDN C251
JMP HBW_Program.S4

// Rung HBW_Program#32
// Offset 214
SG HBW_Program.S4

// Rung HBW_Program#33
// Offset 216
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#34
// Offset 224
STR ST1
CALL HBW_PickUp_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#35
// Offset 232
STR X10
ANDN C251
JMP HBW_Program.S5

// Rung HBW_Program#36
// Offset 235
SG HBW_Program.S5

// Rung HBW_Program#37
// Offset 237
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#38
// Offset 245
STR ST1
CALL HWB_11_DropOff 0x1 DST511 "3" "3"

// Rung HBW_Program#39
// Offset 253
STRN C251
AND C250
JMP HBW_Program.S6

// Rung HBW_Program#40
// Offset 256
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#41
// Offset 258
SG HBW_Program.S6

// Rung HBW_Program#42
// Offset 260
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#43
// Offset 268
STR ST1
CALL HBW_Send_VGR 0x1 DST511 "3" "3"

// Rung HBW_Program#44
// Offset 276
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#45
// Offset 278
STRN X2
JMP HBW_Program.S7
INC N1

// Rung HBW_Program#46
// Offset 281
SG HBW_Program.S7

// Rung HBW_Program#47
// Offset 283
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#48
// Offset 291
STR C300
MOVE 1 C299

// Rung HBW_Program#49
// Offset 294
STR ST1
CALL HBW_Return_VGR 0x1 DST511 "3" "3"

// Rung HBW_Program#50
// Offset 302
STR X11
JMP HBW_Program.S15
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#51
// Offset 311
SG HBW_Program.S8

// Rung HBW_Program#52
// Offset 313
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#53
// Offset 321
STR ST1
CALL HBW_Conv_12 0x1 DST511 "3" "3"

// Rung HBW_Program#54
// Offset 329
STR ST1
MOVE 0 C299

// Rung HBW_Program#55
// Offset 332
STRN C250
JMP HBW_Program.S9

// Rung HBW_Program#56
// Offset 334
SG HBW_Program.S9

// Rung HBW_Program#57
// Offset 336
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#58
// Offset 344
STR ST1
CALL HBW_Return_Top 0x1 DST511 "3" "3"

// Rung HBW_Program#59
// Offset 352
STR X10
ANDN C251
JMP HBW_Program.S10
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#60
// Offset 362
SG HBW_Program.S10

// Rung HBW_Program#61
// Offset 364
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#62
// Offset 372
STR ST1
CALL HBW_MV_11_12 0x1 DST511 "3" "3"

// Rung HBW_Program#63
// Offset 380
STRN C250
JMP HBW_Program.S11

// Rung HBW_Program#64
// Offset 382
SG HBW_Program.S11

// Rung HBW_Program#65
// Offset 384
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#66
// Offset 392
STRE N1 1
CALL HBW_PickUp_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#67
// Offset 403
STRE N1 2
CALL HBW_PickUp_R1 0x1 DST511 "3" "3"

// Rung HBW_Program#68
// Offset 414
STRE N1 3
CALL HBW_Move_R1_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#69
// Offset 425
STRE N1 3
ANDLE 1650 $HBW_Encoder_Z.Acc
JMP HBW_Program.S51

// Rung HBW_Program#70
// Offset 434
STRE N1 4
CALL HBW_PickUp_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#71
// Offset 445
STRE N1 5
CALL HBW_PickUp_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#72
// Offset 456
STRE N1 6
CALL HBW_Move_R2_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#73
// Offset 467
STRE N1 6
ANDLE 3200 $HBW_Encoder_Z.Acc
JMP HBW_Program.S51

// Rung HBW_Program#74
// Offset 476
STRE N1 7
CALL HBW_PickUp_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#75
// Offset 487
STRE N1 8
CALL HBW_PickUp_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#76
// Offset 498
STRE N1 9
JMP HBW_Program.S18

// Rung HBW_Program#77
// Offset 503
NOP

// Rung HBW_Program#78
// Offset 504
NOP

// Rung HBW_Program#79
// Offset 505
STR X10
ANDN C251
JMP HBW_Program.S12

// Rung HBW_Program#80
// Offset 508
STR C215
JMP HBW_Program.S1

// Rung HBW_Program#81
// Offset 510
SG HBW_Program.S51

// Rung HBW_Program#82
// Offset 512
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#83
// Offset 520
STRE N1 3
CALL HBW_PickUp_R2 0x1 DST511 "3" "3"

// Rung HBW_Program#84
// Offset 531
STRE N1 6
CALL HBW_PickUp_R3 0x1 DST511 "3" "3"

// Rung HBW_Program#85
// Offset 542
NOP

// Rung HBW_Program#86
// Offset 543
STR X10
ANDN C251
JMP HBW_Program.S12

// Rung HBW_Program#87
// Offset 546
SG HBW_Program.S12

// Rung HBW_Program#88
// Offset 548
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#89
// Offset 556
STR ST1
CALL HWB_11_DropOff 0x1 DST511 "3" "3"

// Rung HBW_Program#90
// Offset 564
STRN C251
AND C250
JMP HBW_Program.S13

// Rung HBW_Program#91
// Offset 567
SG HBW_Program.S13

// Rung HBW_Program#92
// Offset 569
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#93
// Offset 577
STR ST1
CALL HBW_Send_VGR 0x1 DST511 "3" "3"

// Rung HBW_Program#94
// Offset 585
STR C300
MOVE 1 C299

// Rung HBW_Program#95
// Offset 588
STRN X2
AND C299
JMP HBW_Program.S14
INC N1

// Rung HBW_Program#96
// Offset 592
SG HBW_Program.S14

// Rung HBW_Program#97
// Offset 594
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#98
// Offset 602
STR ST1
CALL HBW_Return_VGR 0x1 DST511 "3" "3"

// Rung HBW_Program#99
// Offset 610
STR X11
JMP HBW_Program.S15
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#100
// Offset 619
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#101
// Offset 621
SG HBW_Program.S15

// Rung HBW_Program#102
// Offset 623
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#103
// Offset 631
STR ST1
MOVE 0 C299

// Rung HBW_Program#104
// Offset 634
STRE N1 1
CALL HBW_Conv_12 0x1 DST511 "3" "3"

// Rung HBW_Program#105
// Offset 645
STRE N1 2
CALL HBW_Conv_12 0x1 DST511 "3" "3"

// Rung HBW_Program#106
// Offset 656
STRE N1 3
CALL HBW_Conv_12 0x1 DST511 "3" "3"

// Rung HBW_Program#107
// Offset 667
STRE N1 4
CALL HBW_Conv_2Row 0x1 DST511 "3" "3"

// Rung HBW_Program#108
// Offset 678
STRE N1 5
CALL HBW_Conv_2Row 0x1 DST511 "3" "3"

// Rung HBW_Program#109
// Offset 689
STRE N1 6
CALL HBW_Conv_2Row 0x1 DST511 "3" "3"

// Rung HBW_Program#110
// Offset 700
STRE N1 7
CALL HBW_Conv_3Row 0x1 DST511 "3" "3"

// Rung HBW_Program#111
// Offset 711
STRE N1 8
CALL HBW_Conv_3Row 0x1 DST511 "3" "3"

// Rung HBW_Program#112
// Offset 722
STRE N1 9
CALL HBW_Conv_3Row 0x1 DST511 "3" "3"

// Rung HBW_Program#113
// Offset 733
NOP

// Rung HBW_Program#114
// Offset 734
STRN C251
JMP HBW_Program.S16
CALL HBW_MotorsOff 0x1 DST511 "3" "3"

// Rung HBW_Program#115
// Offset 743
SG HBW_Program.S16

// Rung HBW_Program#116
// Offset 745
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#117
// Offset 753
STRE N1 1
CALL HBW_Conv11_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#118
// Offset 764
STRE N1 2
CALL HBW_Conv_12_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#119
// Offset 775
STRE N1 3
CALL HBW_Conv13_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#120
// Offset 786
STRE N1 4
CALL HBW_Conv13_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#121
// Offset 797
STRE N1 5
CALL HBW_Conv_12_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#122
// Offset 808
STRE N1 6
CALL HBW_Conv11_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#123
// Offset 819
STRE N1 7
CALL HBW_Conv11_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#124
// Offset 830
STRE N1 8
CALL HBW_Conv_12_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#125
// Offset 841
STRE N1 9
CALL HBW_Conv13_Lat 0x1 DST511 "3" "3"

// Rung HBW_Program#126
// Offset 852
NOP

// Rung HBW_Program#127
// Offset 853
STR C215
JMP HBW_Program.S0

// Rung HBW_Program#128
// Offset 855
STRN C250
AND X10
JMP HBW_Program.S17

// Rung HBW_Program#129
// Offset 858
SG HBW_Program.S17

// Rung HBW_Program#130
// Offset 860
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#131
// Offset 868
STRE N1 1
CALL HBW_Retract_12 0x1 DST511 "3" "3"

// Rung HBW_Program#132
// Offset 879
STRE N1 2
CALL HBW_RETRACT_13 0x1 DST511 "3" "3"

// Rung HBW_Program#133
// Offset 890
STRE N1 3
CALL HBW_Retract_23 0x1 DST511 "3" "3"

// Rung HBW_Program#134
// Offset 901
STRE N1 4
CALL HBW_Retract_22 0x1 DST511 "3" "3"

// Rung HBW_Program#135
// Offset 912
STRE N1 5
CALL HBW_Retract_21 0x1 DST511 "3" "3"

// Rung HBW_Program#136
// Offset 923
STRE N1 6
CALL HBW_Retract_21 0x1 DST511 "3" "3"

// Rung HBW_Program#137
// Offset 934
STRE N1 7
CALL HBW_Retract_32 0x1 DST511 "3" "3"

// Rung HBW_Program#138
// Offset 945
STRE N1 8
CALL HBW_Retract_33 0x1 DST511 "3" "3"

// Rung HBW_Program#139
// Offset 956
STRE N1 9
CALL HBW_Retract_33 0x1 DST511 "3" "3"

// Rung HBW_Program#140
// Offset 967
NOP

// Rung HBW_Program#141
// Offset 968
STR C215
JMP HBW_Program.S1

// Rung HBW_Program#142
// Offset 970
STR X11
ANDN C251
ANDN C250
JMP HBW_Program.S11

// Rung HBW_Program#143
// Offset 974
STR X11
ANDE N1 1
JMP HBW_Program.S50

// Rung HBW_Program#144
// Offset 980
SG HBW_Program.S18

// Rung HBW_Program#145
// Offset 982
STR ST1
JMP HBW_Program.S0

// Rung HBW_Program#146
// Offset 984
SG HBW_Program.S50

// Rung HBW_Program#147
// Offset 986
STR ST1
CALL HBW_Shift_C1C2 0x1 DST511 "3" "3"

// Rung HBW_Program#148
// Offset 994
STRN Y50
ANDN C250
JMP HBW_Program.S11

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#2
// Offset 8
STR ST1
DUPBOOL
STR C410
ANDN C409
STRN C410
AND C409
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 100
POPBOOL
DUPBOOL
AND C410
OUT Y27
POPBOOL
AND C409
OUT Y26

// Rung VGR_Program#3
// Offset 37
STR ST1
DUPBOOL
STR C408
ANDN C411
STRN C408
AND C411
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
POPBOOL
DUPBOOL
AND C408
OUT Y24
POPBOOL
AND C411
OUT Y25

// Rung VGR_Program#4
// Offset 66
STR ST1
DUPBOOL
STR C406
ANDN C407
STRN C406
AND C407
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 100
POPBOOL
DUPBOOL
AND C406
OUT Y23
POPBOOL
AND C407
OUT Y22

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
STR C813
OUT Y18

// Rung MPO_Program#4
// Offset 12
STR C810
OUT Y17

// Rung MPO_Program#5
// Offset 14
STR C811
OUT Y52

// Rung MPO_Program#6
// Offset 16
STR ST1
DUPBOOL
STR C804
ANDN C805
STR C805
ANDN C804
ORSTR
ANDSTR
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 100
POPBOOL
DUPBOOL
AND C804
OUT Y53
POPBOOL
AND C805
OUT Y15

// Rung MPO_Program#7
// Offset 45
STR C814
OUT Y19

// Rung MPO_Program#8
// Offset 47
STR C809
JMP MPO_Program.S2

// Rung MPO_Program#9
// Offset 49
SG MPO_Program.S1

// Rung MPO_Program#10
// Offset 51
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#11
// Offset 59
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#12
// Offset 61
STRN X24
SET Y17

// Rung MPO_Program#13
// Offset 63
STR Y17
OUT Y20
ANDN X17
ONDTMR T0 1000 Y44

// Rung MPO_Program#14
// Offset 69
SG MPO_Program.S2

// Rung MPO_Program#15
// Offset 71
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#16
// Offset 79
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#17
// Offset 81
STRN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y53

// Rung MPO_Program#18
// Offset 97
STR X19
JMP MPO_Program.S3

// Rung MPO_Program#19
// Offset 99
SG MPO_Program.S3

// Rung MPO_Program#20
// Offset 101
STR ST1
SET Y17

// Rung MPO_Program#21
// Offset 103
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#22
// Offset 111
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#23
// Offset 113
STR X19
SET Y19

// Rung MPO_Program#24
// Offset 115
STR X19
ONDTMR T100 2000 Y18

// Rung MPO_Program#25
// Offset 119
STR T100.DN
JMP MPO_Program.S4

// Rung MPO_Program#26
// Offset 121
SG MPO_Program.S4

// Rung MPO_Program#27
// Offset 123
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#28
// Offset 131
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#29
// Offset 133
STR X19
RST Y19

// Rung MPO_Program#30
// Offset 135
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y15

// Rung MPO_Program#31
// Offset 151
STR X16
JMP MPO_Program.S5

// Rung MPO_Program#32
// Offset 153
SG MPO_Program.S5

// Rung MPO_Program#33
// Offset 155
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#34
// Offset 163
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#35
// Offset 165
STR X16
SET Y19

// Rung MPO_Program#36
// Offset 167
STR Y19
ONDTMR T101 2000 C815

// Rung MPO_Program#37
// Offset 171
STR C815
RST Y18

// Rung MPO_Program#38
// Offset 173
STRN Y18
JMP MPO_Program.S6

// Rung MPO_Program#39
// Offset 175
SG MPO_Program.S6

// Rung MPO_Program#40
// Offset 177
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#41
// Offset 185
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#42
// Offset 187
STR X16
RST Y19

// Rung MPO_Program#43
// Offset 189
STRN Y19
ONDTMR T102 1000 C818

// Rung MPO_Program#44
// Offset 193
STR C818
JMP MPO_Program.S7

// Rung MPO_Program#45
// Offset 195
SG MPO_Program.S7

// Rung MPO_Program#46
// Offset 197
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#47
// Offset 205
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#48
// Offset 207
STRN X15
OUT Y45

// Rung MPO_Program#49
// Offset 209
STR X15
TMRDOWN T102 1000
OUT Y43

// Rung MPO_Program#50
// Offset 213
STR T102.Done
JMP MPO_Program.S8

// Rung MPO_Program#51
// Offset 215
SG MPO_Program.S8

// Rung MPO_Program#52
// Offset 217
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#53
// Offset 225
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#54
// Offset 227
STRN X13
OUT Y45

// Rung MPO_Program#55
// Offset 229
STR X13
TMRDOWN T103 1000
OUT Y21

// Rung MPO_Program#56
// Offset 233
STR T103.Done
JMP MPO_Program.S9

// Rung MPO_Program#57
// Offset 235
SG MPO_Program.S9

// Rung MPO_Program#58
// Offset 237
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#59
// Offset 245
STRN C809
JMP MPO_Program.S0

// Rung MPO_Program#60
// Offset 247
STR ST1
OUT Y47

// Rung MPO_Program#61
// Offset 249
STRN X12
ONDTMR T104 1000 Y46

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#3
// Offset 10
STR C1600
OUT Y30

// Rung SLD_Program#4
// Offset 12
STR C1601
OUT Y31

// Rung SLD_Program#5
// Offset 14
STR C1602
OUT Y32

// Rung SLD_Program#6
// Offset 16
STR C1603
OUT Y33

// Rung SLD_Program#7
// Offset 18
STR C1604
OUT Y34

// Rung SLD_Program#8
// Offset 20
STR C1605
JMP SLD_Program.S1

// Rung SLD_Program#9
// Offset 22
SG SLD_Program.S1

// Rung SLD_Program#10
// Offset 24
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#11
// Offset 32
STRN C1605
JMP SLD_Program.S0

// Rung SLD_Program#12
// Offset 34
STRN X35
OFFDTMR T200 1750 C1651

// Rung SLD_Program#13
// Offset 38
STR C1651
OUT Y30

// Rung SLD_Program#14
// Offset 40
STRGE T200.Acc 1750
FLASHER 500 500 Y899

// Rung SLD_Program#15
// Offset 48
SG SLD_Program.S2

// Rung SLD_Program#16
// Offset 50
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#17
// Offset 58
STRN C1605
JMP SLD_Program.S0

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STR C1200
OUT Y39

// Rung SSC_Program#4
// Offset 12
STR C1201
OUT Y40

// Rung SSC_Program#5
// Offset 14
STR C1202
OUT Y41

// Rung SSC_Program#6
// Offset 16
STR C1215
PWMOUT @ssc_vertical $ssc_vertical Y11 500 100
OUT Y35

// Rung SSC_Program#7
// Offset 32
STR C1216
PWMOUT @ssc_vertical $ssc_vertical Y11 500 100
OUT Y36

// Rung SSC_Program#8
// Offset 48
STR C1217
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y37

// Rung SSC_Program#9
// Offset 64
STR C1218
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y38

// Rung SSC_Program#10
// Offset 80
STR ST2
ANDPD X47
ANDPDPF
STR ST2
AND CT150.Done
CNT CT150 100

// Rung SSC_Program#11
// Offset 88
STR C1203
JMP SSC_Program.S1

// Rung SSC_Program#12
// Offset 90
SG SSC_Program.S1

// Rung SSC_Program#13
// Offset 92
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#14
// Offset 100
STRN C1203
JMP SSC_Program.S0

// Rung SSC_Program#15
// Offset 102
STRN X41
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y37

// Rung SSC_Program#16
// Offset 118
STRN X40
PWMOUT @ssc_vertical $ssc_vertical Y11 60 100
OUT Y36

// Rung SSC_Program#17
// Offset 134
STR X40
AND X41
JMP SSC_Program.S2

// Rung SSC_Program#18
// Offset 137
SG SSC_Program.S2

// Rung SSC_Program#19
// Offset 139
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#20
// Offset 147
STRN C1203
JMP SSC_Program.S0

// Rung SSC_Program#21
// Offset 149
STR X44
ANDPDPF
STR ST2
CNT CT150 300

// Rung SSC_Program#22
// Offset 154
STRN CT150.Done
PWMOUT @ssc_vertical $ssc_vertical Y11 60 100
OUT Y35

// Rung SSC_Program#23
// Offset 170
STR X46
STR ST2
CNT CT151 1300

// Rung SSC_Program#24
// Offset 174
STRN CT151.Done
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y38

// Rung SSC_Program#25
// Offset 190
STR CT150.Done
AND CT151.Done
JMP SSC_Program.S3

// Rung SSC_Program#26
// Offset 193
SG SSC_Program.S3

// Rung SSC_Program#27
// Offset 195
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#28
// Offset 203
STRN C1203
JMP SSC_Program.S0

// Rung SSC_Program#29
// Offset 205
STR X46
STR ST2
CNT CT152 300

// Rung SSC_Program#30
// Offset 209
STRN CT152.Done
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y37

// Rung SSC_Program#31
// Offset 225
STR CT152.Done
JMP SSC_Program.S4

// Rung SSC_Program#32
// Offset 227
SG SSC_Program.S4

// Rung SSC_Program#33
// Offset 229
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#34
// Offset 237
STRN C1203
JMP SSC_Program.S0

// Rung SSC_Program#35
// Offset 239
STR X46
STR ST2
CNT CT153 135

// Rung SSC_Program#36
// Offset 243
STRN CT153.Done
PWMOUT @ssc_horizontal $ssc_horizontal Y12 60 100
OUT Y37

// Rung SSC_Program#37
// Offset 259
STR X44
STR ST2
CNT CT154 210

// Rung SSC_Program#38
// Offset 263
STRN CT154.Done
PWMOUT @ssc_vertical $ssc_vertical Y11 60 100
OUT Y36

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block hunt_exp_light
$PRGRM hunt_exp_light

// Rung hunt_exp_light#1
// Offset 0
STR ST2
COPY 0x1 "4 0x0 MC402 Y39 1"

// End of Code Block hunt_exp_light
$PGMEND hunt_exp_light

// Beginning of Code Block HWB_PickUp
$TSK HWB_PickUp

// Rung HWB_PickUp#1
// Offset 0
NOP

// End of Code Block HWB_PickUp
$TSKEND HWB_PickUp

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C1","copy","",""
"C11","C11_Interlock","","Used to delay logic by one scan"
"C12","C12_Interlock_2","","Used to delay logic by one scan"
"C20","HBW_Has_Pallet","","True when carrying a pallet"
"C51","X_Direction","","True: Left False: Right"
"C52","Z_Direction","","True: Down False: Up"
"C80","Conveyor_Timeout","","Bit high when Conveyor Timeout timer active"
"C90","HBW_XY_PID_EN","","Enables PID control in HBW_Move_XZ"
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C150","HBW_MoveComplete","","HBW_Move_XZ completion interlock."
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"C182","Fault_X_Target","","Active when X target out of range"
"C183","Fault_Z_target","","Active when Z target out of range"
"C400","VGR_T0","",""
"C410","VGR_T1","",""
"C420","VGR_T2","",""
"C430","VGR_T3","",""
"C440","VGR_T4","",""
"C500","VGR_Man_Control","",""
"C799","VGR_RESET","",""
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"V801","VGR_Fault_Code","",""
"N810","VGR_Rot_Target","",""
"N811","VGR_X_Target","",""
"N812","VGR_Y_Target","",""
"D0","MC","",""
"D1","Feeder_Extend","",""
"D140","X_Start_Position","","Distance to target"
"D142","Y_Start_Position","","Distance to target"
"D143","HBW_PWM_Cur_X","","PWM value for X for XZ movement task"
"D144","HBW_PWM_Cur_Z","","PWM value for Z for XZ movement task"
"T3","T_HBW_S6","",""
"T4","T_Conveyor_Timer","","Used to detect conveyor faults"
"MPO_Program.S2","Vaccum_MO","",""
"MPO_Program.S3","Vaccum","",""
"MPO_Program.S4","Vacumm_MO","",""
"MPO_Program.S5","Vaccum_Load","",""
"US0","_CP_Strogram_A","","CP_State_Program"
"US1","_VGR_Movement","","VGR_Movement"
"US2","_SSC_Check_InOut","","SSC_Check_InOut"
"UB0","_VGR_MisScan_A","","VGR_Movement.Done ThisScan"
#END

